{
  "version": 3,
  "sources": ["../../../dev/core/src/Engines/Extensions/engine.alpha.ts", "../../../dev/core/src/Engines/Extensions/engine.dynamicBuffer.ts"],
  "sourcesContent": ["import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport { Constants } from \"../constants\";\r\n\r\ndeclare module \"../abstractEngine\" {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Sets the current alpha mode\r\n         * @param mode defines the mode to use (one of the Engine.ALPHA_XXX)\r\n         * @param noDepthWriteChange defines if depth writing state should remains unchanged (false by default)\r\n         * @param targetIndex defines the index of the target to set the alpha mode for (default is 0)\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/transparent_rendering\r\n         */\r\n        setAlphaMode(mode: number, noDepthWriteChange?: boolean, targetIndex?: number): void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.setAlphaMode = function (mode: number, noDepthWriteChange: boolean = false, targetIndex: number = 0): void {\r\n    if (this._alphaMode[targetIndex] === mode) {\r\n        if (!noDepthWriteChange) {\r\n            // Make sure we still have the correct depth mask according to the alpha mode (a transparent material could have forced writting to the depth buffer, for instance)\r\n            const depthMask = mode === Constants.ALPHA_DISABLE;\r\n            if (this.depthCullingState.depthMask !== depthMask) {\r\n                this.depthCullingState.depthMask = depthMask;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    const alphaBlendDisabled = mode === Constants.ALPHA_DISABLE;\r\n\r\n    this._alphaState.setAlphaBlend(!alphaBlendDisabled, targetIndex);\r\n    this._alphaState.setAlphaMode(mode, targetIndex);\r\n\r\n    if (!noDepthWriteChange) {\r\n        this.depthCullingState.depthMask = alphaBlendDisabled;\r\n    }\r\n    this._alphaMode[targetIndex] = mode;\r\n};\r\n", "import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { DataBuffer } from \"../../Buffers/dataBuffer\";\r\nimport type { IndicesArray, DataArray } from \"../../types\";\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Update a dynamic index buffer\r\n         * @param indexBuffer defines the target index buffer\r\n         * @param indices defines the data to update\r\n         * @param offset defines the offset in the target index buffer where update should start\r\n         */\r\n        updateDynamicIndexBuffer(indexBuffer: DataBuffer, indices: IndicesArray, offset?: number): void;\r\n\r\n        /**\r\n         * Updates a dynamic vertex buffer.\r\n         * @param vertexBuffer the vertex buffer to update\r\n         * @param data the data used to update the vertex buffer\r\n         * @param byteOffset the byte offset of the data\r\n         * @param byteLength the byte length of the data\r\n         */\r\n        updateDynamicVertexBuffer(vertexBuffer: DataBuffer, data: DataArray, byteOffset?: number, byteLength?: number): void;\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nThinEngine.prototype.updateDynamicIndexBuffer = function (this: ThinEngine, indexBuffer: DataBuffer, indices: IndicesArray, offset: number = 0): void {\r\n    // Force cache update\r\n    this._currentBoundBuffer[this._gl.ELEMENT_ARRAY_BUFFER] = null;\r\n    this.bindIndexBuffer(indexBuffer);\r\n\r\n    let view: ArrayBufferView;\r\n    if (indexBuffer.is32Bits) {\r\n        // anything else than Uint32Array needs to be converted to Uint32Array\r\n        view = indices instanceof Uint32Array ? indices : new Uint32Array(indices);\r\n    } else {\r\n        // anything else than Uint16Array needs to be converted to Uint16Array\r\n        view = indices instanceof Uint16Array ? indices : new Uint16Array(indices);\r\n    }\r\n\r\n    this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, view, this._gl.DYNAMIC_DRAW);\r\n\r\n    this._resetIndexBufferBinding();\r\n};\r\n\r\nThinEngine.prototype.updateDynamicVertexBuffer = function (this: ThinEngine, vertexBuffer: DataBuffer, data: DataArray, byteOffset?: number, byteLength?: number): void {\r\n    this.bindArrayBuffer(vertexBuffer);\r\n\r\n    if (byteOffset === undefined) {\r\n        byteOffset = 0;\r\n    }\r\n\r\n    const dataLength = (data as ArrayBuffer).byteLength || (data as number[]).length;\r\n\r\n    if (byteLength === undefined || (byteLength >= dataLength && byteOffset === 0)) {\r\n        if (data instanceof Array) {\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, new Float32Array(data));\r\n        } else {\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, data);\r\n        }\r\n    } else {\r\n        if (data instanceof Array) {\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, new Float32Array(data).subarray(0, byteLength / 4));\r\n        } else {\r\n            if (data instanceof ArrayBuffer) {\r\n                data = new Uint8Array(data, 0, byteLength);\r\n            } else {\r\n                data = new Uint8Array(data.buffer, data.byteOffset, byteLength);\r\n            }\r\n\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, data);\r\n        }\r\n    }\r\n\r\n    this._resetVertexBufferBinding();\r\n};\r\n"],
  "mappings": ";;;;;AAiBA,WAAW,UAAU,eAAe,SAAU,MAAc,qBAA8B,OAAO,cAAsB,GAAC;AACpH,MAAI,KAAK,WAAW,WAAW,MAAM,MAAM;AACvC,QAAI,CAAC,oBAAoB;AAErB,YAAM,YAAY,SAAS;AAC3B,UAAI,KAAK,kBAAkB,cAAc,WAAW;AAChD,aAAK,kBAAkB,YAAY;MACvC;IACJ;AACA;EACJ;AAEA,QAAM,qBAAqB,SAAS;AAEpC,OAAK,YAAY,cAAc,CAAC,oBAAoB,WAAW;AAC/D,OAAK,YAAY,aAAa,MAAM,WAAW;AAE/C,MAAI,CAAC,oBAAoB;AACrB,SAAK,kBAAkB,YAAY;EACvC;AACA,OAAK,WAAW,WAAW,IAAI;AACnC;;;ACXA,WAAW,UAAU,2BAA2B,SAA4B,aAAyB,SAAuB,SAAiB,GAAC;AAE1I,OAAK,oBAAoB,KAAK,IAAI,oBAAoB,IAAI;AAC1D,OAAK,gBAAgB,WAAW;AAEhC,MAAI;AACJ,MAAI,YAAY,UAAU;AAEtB,WAAO,mBAAmB,cAAc,UAAU,IAAI,YAAY,OAAO;EAC7E,OAAO;AAEH,WAAO,mBAAmB,cAAc,UAAU,IAAI,YAAY,OAAO;EAC7E;AAEA,OAAK,IAAI,WAAW,KAAK,IAAI,sBAAsB,MAAM,KAAK,IAAI,YAAY;AAE9E,OAAK,yBAAwB;AACjC;AAEA,WAAW,UAAU,4BAA4B,SAA4B,cAA0B,MAAiB,YAAqB,YAAmB;AAC5J,OAAK,gBAAgB,YAAY;AAEjC,MAAI,eAAe,QAAW;AAC1B,iBAAa;EACjB;AAEA,QAAM,aAAc,KAAqB,cAAe,KAAkB;AAE1E,MAAI,eAAe,UAAc,cAAc,cAAc,eAAe,GAAI;AAC5E,QAAI,gBAAgB,OAAO;AACvB,WAAK,IAAI,cAAc,KAAK,IAAI,cAAc,YAAY,IAAI,aAAa,IAAI,CAAC;IACpF,OAAO;AACH,WAAK,IAAI,cAAc,KAAK,IAAI,cAAc,YAAY,IAAI;IAClE;EACJ,OAAO;AACH,QAAI,gBAAgB,OAAO;AACvB,WAAK,IAAI,cAAc,KAAK,IAAI,cAAc,YAAY,IAAI,aAAa,IAAI,EAAE,SAAS,GAAG,aAAa,CAAC,CAAC;IAChH,OAAO;AACH,UAAI,gBAAgB,aAAa;AAC7B,eAAO,IAAI,WAAW,MAAM,GAAG,UAAU;MAC7C,OAAO;AACH,eAAO,IAAI,WAAW,KAAK,QAAQ,KAAK,YAAY,UAAU;MAClE;AAEA,WAAK,IAAI,cAAc,KAAK,IAAI,cAAc,YAAY,IAAI;IAClE;EACJ;AAEA,OAAK,0BAAyB;AAClC;",
  "names": []
}
