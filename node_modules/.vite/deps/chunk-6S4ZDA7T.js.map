{
  "version": 3,
  "sources": ["../../../dev/core/src/Materials/uniformBufferEffectCommonAccessor.ts", "../../../dev/core/src/Shaders/gpuUpdateParticles.fragment.ts", "../../../dev/core/src/Shaders/gpuUpdateParticles.vertex.ts", "../../../dev/core/src/Particles/webgl2ParticleSystem.ts"],
  "sourcesContent": ["import type { IColor3Like, IColor4Like, IMatrixLike, IVector3Like, IVector4Like } from \"../Maths/math.like\";\r\nimport type { Effect } from \"./effect\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\n\r\n/** @internal */\r\nexport class UniformBufferEffectCommonAccessor {\r\n    public setMatrix3x3: (name: string, matrix: Float32Array) => void;\r\n\r\n    public setMatrix2x2: (name: string, matrix: Float32Array) => void;\r\n\r\n    public setFloat: (name: string, x: number) => void;\r\n\r\n    public setFloat2: (name: string, x: number, y: number, suffix?: string) => void;\r\n\r\n    public setFloat3: (name: string, x: number, y: number, z: number, suffix?: string) => void;\r\n\r\n    public setFloat4: (name: string, x: number, y: number, z: number, w: number, suffix?: string) => void;\r\n\r\n    public setFloatArray: (name: string, array: Float32Array) => void;\r\n\r\n    public setArray: (name: string, array: number[]) => void;\r\n\r\n    public setIntArray: (name: string, array: Int32Array) => void;\r\n\r\n    public setMatrix: (name: string, mat: IMatrixLike) => void;\r\n\r\n    public setMatrices: (name: string, mat: Float32Array) => void;\r\n\r\n    public setVector3: (name: string, vector: IVector3Like) => void;\r\n\r\n    public setVector4: (name: string, vector: IVector4Like) => void;\r\n\r\n    public setColor3: (name: string, color: IColor3Like, suffix?: string) => void;\r\n\r\n    public setColor4: (name: string, color: IColor3Like, alpha: number, suffix?: string) => void;\r\n\r\n    public setDirectColor4: (name: string, color: IColor4Like) => void;\r\n\r\n    public setInt: (name: string, x: number, suffix?: string) => void;\r\n\r\n    public setInt2: (name: string, x: number, y: number, suffix?: string) => void;\r\n\r\n    public setInt3: (name: string, x: number, y: number, z: number, suffix?: string) => void;\r\n\r\n    public setInt4: (name: string, x: number, y: number, z: number, w: number, suffix?: string) => void;\r\n\r\n    private _isUbo(uboOrEffect: UniformBuffer | Effect): uboOrEffect is UniformBuffer {\r\n        return (uboOrEffect as UniformBuffer).addUniform !== undefined;\r\n    }\r\n\r\n    constructor(uboOrEffect: UniformBuffer | Effect) {\r\n        if (this._isUbo(uboOrEffect)) {\r\n            this.setMatrix3x3 = uboOrEffect.updateMatrix3x3.bind(uboOrEffect);\r\n            this.setMatrix2x2 = uboOrEffect.updateMatrix2x2.bind(uboOrEffect);\r\n            this.setFloat = uboOrEffect.updateFloat.bind(uboOrEffect);\r\n            this.setFloat2 = uboOrEffect.updateFloat2.bind(uboOrEffect);\r\n            this.setFloat3 = uboOrEffect.updateFloat3.bind(uboOrEffect);\r\n            this.setFloat4 = uboOrEffect.updateFloat4.bind(uboOrEffect);\r\n            this.setFloatArray = uboOrEffect.updateFloatArray.bind(uboOrEffect);\r\n            this.setArray = uboOrEffect.updateArray.bind(uboOrEffect);\r\n            this.setIntArray = uboOrEffect.updateIntArray.bind(uboOrEffect);\r\n            this.setMatrix = uboOrEffect.updateMatrix.bind(uboOrEffect);\r\n            this.setMatrices = uboOrEffect.updateMatrices.bind(uboOrEffect);\r\n            this.setVector3 = uboOrEffect.updateVector3.bind(uboOrEffect);\r\n            this.setVector4 = uboOrEffect.updateVector4.bind(uboOrEffect);\r\n            this.setColor3 = uboOrEffect.updateColor3.bind(uboOrEffect);\r\n            this.setColor4 = uboOrEffect.updateColor4.bind(uboOrEffect);\r\n            this.setDirectColor4 = uboOrEffect.updateDirectColor4.bind(uboOrEffect);\r\n            this.setInt = uboOrEffect.updateInt.bind(uboOrEffect);\r\n            this.setInt2 = uboOrEffect.updateInt2.bind(uboOrEffect);\r\n            this.setInt3 = uboOrEffect.updateInt3.bind(uboOrEffect);\r\n            this.setInt4 = uboOrEffect.updateInt4.bind(uboOrEffect);\r\n        } else {\r\n            this.setMatrix3x3 = uboOrEffect.setMatrix3x3.bind(uboOrEffect);\r\n            this.setMatrix2x2 = uboOrEffect.setMatrix2x2.bind(uboOrEffect);\r\n            this.setFloat = uboOrEffect.setFloat.bind(uboOrEffect);\r\n            this.setFloat2 = uboOrEffect.setFloat2.bind(uboOrEffect);\r\n            this.setFloat3 = uboOrEffect.setFloat3.bind(uboOrEffect);\r\n            this.setFloat4 = uboOrEffect.setFloat4.bind(uboOrEffect);\r\n            this.setFloatArray = uboOrEffect.setFloatArray.bind(uboOrEffect);\r\n            this.setArray = uboOrEffect.setArray.bind(uboOrEffect);\r\n            this.setIntArray = uboOrEffect.setIntArray.bind(uboOrEffect);\r\n            this.setMatrix = uboOrEffect.setMatrix.bind(uboOrEffect);\r\n            this.setMatrices = uboOrEffect.setMatrices.bind(uboOrEffect);\r\n            this.setVector3 = uboOrEffect.setVector3.bind(uboOrEffect);\r\n            this.setVector4 = uboOrEffect.setVector4.bind(uboOrEffect);\r\n            this.setColor3 = uboOrEffect.setColor3.bind(uboOrEffect);\r\n            this.setColor4 = uboOrEffect.setColor4.bind(uboOrEffect);\r\n            this.setDirectColor4 = uboOrEffect.setDirectColor4.bind(uboOrEffect);\r\n            this.setInt = uboOrEffect.setInt.bind(uboOrEffect);\r\n            this.setInt2 = uboOrEffect.setInt2.bind(uboOrEffect);\r\n            this.setInt3 = uboOrEffect.setInt3.bind(uboOrEffect);\r\n            this.setInt4 = uboOrEffect.setInt4.bind(uboOrEffect);\r\n        }\r\n    }\r\n}\r\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"gpuUpdateParticlesPixelShader\";\nconst shader = `#version 300 es\nvoid main() {discard;}\n`;\n// Sideeffect\nif (!ShaderStore.ShadersStore[name]) {\n    ShaderStore.ShadersStore[name] = shader;\n}\n/** @internal */\nexport const gpuUpdateParticlesPixelShader = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"gpuUpdateParticlesVertexShader\";\nconst shader = `#version 300 es\n#define PI 3.14159\nuniform float currentCount;uniform float timeDelta;uniform float stopFactor;\n#ifndef LOCAL\nuniform mat4 emitterWM;\n#endif\nuniform vec2 lifeTime;uniform vec2 emitPower;uniform vec2 sizeRange;uniform vec4 scaleRange;\n#ifdef FLOWMAP\nuniform mat4 flowMapProjection;uniform float flowMapStrength;uniform sampler2D flowMapSampler;\n#endif\n#ifndef COLORGRADIENTS\nuniform vec4 color1;uniform vec4 color2;\n#endif\nuniform vec3 gravity;uniform sampler2D randomSampler;uniform sampler2D randomSampler2;uniform vec4 angleRange;\n#ifdef BOXEMITTER\nuniform vec3 direction1;uniform vec3 direction2;uniform vec3 minEmitBox;uniform vec3 maxEmitBox;\n#endif\n#ifdef POINTEMITTER\nuniform vec3 direction1;uniform vec3 direction2;\n#endif\n#ifdef HEMISPHERICEMITTER\nuniform float radius;uniform float radiusRange;uniform float directionRandomizer;\n#endif\n#ifdef SPHEREEMITTER\nuniform float radius;uniform float radiusRange;\n#ifdef DIRECTEDSPHEREEMITTER\nuniform vec3 direction1;uniform vec3 direction2;\n#else\nuniform float directionRandomizer;\n#endif\n#endif\n#ifdef CYLINDEREMITTER\nuniform float radius;uniform float height;uniform float radiusRange;\n#ifdef DIRECTEDCYLINDEREMITTER\nuniform vec3 direction1;uniform vec3 direction2;\n#else\nuniform float directionRandomizer;\n#endif\n#endif\n#ifdef CONEEMITTER\nuniform vec2 radius;uniform float coneAngle;uniform vec2 height;\n#ifdef DIRECTEDCONEEMITTER\nuniform vec3 direction1;uniform vec3 direction2;\n#else\nuniform float directionRandomizer;\n#endif\n#endif\nin vec3 position;\n#ifdef CUSTOMEMITTER\nin vec3 initialPosition;\n#endif\nin float age;in float life;in vec4 seed;in vec3 size;\n#ifndef COLORGRADIENTS\nin vec4 color;\n#endif\nin vec3 direction;\n#ifndef BILLBOARD\nin vec3 initialDirection;\n#endif\n#ifdef ANGULARSPEEDGRADIENTS\nin float angle;\n#else\nin vec2 angle;\n#endif\n#ifdef ANIMATESHEET\nin float cellIndex;\n#ifdef ANIMATESHEETRANDOMSTART\nin float cellStartOffset;\n#endif\n#endif\n#ifdef NOISE\nin vec3 noiseCoordinates1;in vec3 noiseCoordinates2;\n#endif\nout vec3 outPosition;\n#ifdef CUSTOMEMITTER\nout vec3 outInitialPosition;\n#endif\nout float outAge;out float outLife;out vec4 outSeed;out vec3 outSize;\n#ifndef COLORGRADIENTS\nout vec4 outColor;\n#endif\nout vec3 outDirection;\n#ifndef BILLBOARD\nout vec3 outInitialDirection;\n#endif\n#ifdef ANGULARSPEEDGRADIENTS\nout float outAngle;\n#else\nout vec2 outAngle;\n#endif\n#ifdef ANIMATESHEET\nout float outCellIndex;\n#ifdef ANIMATESHEETRANDOMSTART\nout float outCellStartOffset;\n#endif\n#endif\n#ifdef NOISE\nout vec3 outNoiseCoordinates1;out vec3 outNoiseCoordinates2;\n#endif\n#ifdef SIZEGRADIENTS\nuniform sampler2D sizeGradientSampler;\n#endif \n#ifdef ANGULARSPEEDGRADIENTS\nuniform sampler2D angularSpeedGradientSampler;\n#endif \n#ifdef VELOCITYGRADIENTS\nuniform sampler2D velocityGradientSampler;\n#endif\n#ifdef LIMITVELOCITYGRADIENTS\nuniform sampler2D limitVelocityGradientSampler;uniform float limitVelocityDamping;\n#endif\n#ifdef DRAGGRADIENTS\nuniform sampler2D dragGradientSampler;\n#endif\n#ifdef NOISE\nuniform vec3 noiseStrength;uniform sampler2D noiseSampler;\n#endif\n#ifdef ANIMATESHEET\nuniform vec4 cellInfos;\n#endif\nvec3 getRandomVec3(float offset) {return texture(randomSampler2,vec2(float(gl_VertexID)*offset/currentCount,0)).rgb;}\nvec4 getRandomVec4(float offset) {return texture(randomSampler,vec2(float(gl_VertexID)*offset/currentCount,0));}\nvoid main() {float newAge=age+timeDelta; \nif (newAge>=life && stopFactor != 0.) {vec3 newPosition;vec3 newDirection;vec4 randoms=getRandomVec4(seed.x);outLife=lifeTime.x+(lifeTime.y-lifeTime.x)*randoms.r;outAge=newAge-life;outSeed=seed;\n#ifdef SIZEGRADIENTS \noutSize.x=texture(sizeGradientSampler,vec2(0,0)).r;\n#else\noutSize.x=sizeRange.x+(sizeRange.y-sizeRange.x)*randoms.g;\n#endif\noutSize.y=scaleRange.x+(scaleRange.y-scaleRange.x)*randoms.b;outSize.z=scaleRange.z+(scaleRange.w-scaleRange.z)*randoms.a; \n#ifndef COLORGRADIENTS\noutColor=color1+(color2-color1)*randoms.b;\n#endif\n#ifndef ANGULARSPEEDGRADIENTS \noutAngle.y=angleRange.x+(angleRange.y-angleRange.x)*randoms.a;outAngle.x=angleRange.z+(angleRange.w-angleRange.z)*randoms.r;\n#else\noutAngle=angleRange.z+(angleRange.w-angleRange.z)*randoms.r;\n#endif \n#ifdef POINTEMITTER\nvec3 randoms2=getRandomVec3(seed.y);vec3 randoms3=getRandomVec3(seed.z);newPosition=vec3(0,0,0);newDirection=direction1+(direction2-direction1)*randoms3;\n#elif defined(BOXEMITTER)\nvec3 randoms2=getRandomVec3(seed.y);vec3 randoms3=getRandomVec3(seed.z);newPosition=minEmitBox+(maxEmitBox-minEmitBox)*randoms2;newDirection=direction1+(direction2-direction1)*randoms3; \n#elif defined(HEMISPHERICEMITTER)\nvec3 randoms2=getRandomVec3(seed.y);vec3 randoms3=getRandomVec3(seed.z);float phi=2.0*PI*randoms2.x;float theta=acos(2.0*randoms2.y-1.0);float randX=cos(phi)*sin(theta);float randY=cos(theta);float randZ=sin(phi)*sin(theta);newPosition=(radius-(radius*radiusRange*randoms2.z))*vec3(randX,abs(randY),randZ);newDirection=newPosition+directionRandomizer*randoms3; \n#elif defined(SPHEREEMITTER)\nvec3 randoms2=getRandomVec3(seed.y);vec3 randoms3=getRandomVec3(seed.z);float phi=2.0*PI*randoms2.x;float theta=acos(2.0*randoms2.y-1.0);float randX=cos(phi)*sin(theta);float randY=cos(theta);float randZ=sin(phi)*sin(theta);newPosition=(radius-(radius*radiusRange*randoms2.z))*vec3(randX,randY,randZ);\n#ifdef DIRECTEDSPHEREEMITTER\nnewDirection=normalize(direction1+(direction2-direction1)*randoms3);\n#else\nnewDirection=normalize(newPosition+directionRandomizer*randoms3);\n#endif\n#elif defined(CYLINDEREMITTER)\nvec3 randoms2=getRandomVec3(seed.y);vec3 randoms3=getRandomVec3(seed.z);float yPos=(randoms2.x-0.5)*height;float angle=randoms2.y*PI*2.;float inverseRadiusRangeSquared=((1.-radiusRange)*(1.-radiusRange));float positionRadius=radius*sqrt(inverseRadiusRangeSquared+(randoms2.z*(1.-inverseRadiusRangeSquared)));float xPos=positionRadius*cos(angle);float zPos=positionRadius*sin(angle);newPosition=vec3(xPos,yPos,zPos);\n#ifdef DIRECTEDCYLINDEREMITTER\nnewDirection=direction1+(direction2-direction1)*randoms3;\n#else\nangle=angle+((randoms3.x-0.5)*PI)*directionRandomizer;newDirection=vec3(cos(angle),(randoms3.y-0.5)*directionRandomizer,sin(angle));newDirection=normalize(newDirection);\n#endif\n#elif defined(CONEEMITTER)\nvec3 randoms2=getRandomVec3(seed.y);float s=2.0*PI*randoms2.x;\n#ifdef CONEEMITTERSPAWNPOINT\nfloat h=0.0001;\n#else\nfloat h=randoms2.y*height.y;h=1.-h*h; \n#endif\nfloat lRadius=radius.x-radius.x*randoms2.z*radius.y;lRadius=lRadius*h;float randX=lRadius*sin(s);float randZ=lRadius*cos(s);float randY=h *height.x;newPosition=vec3(randX,randY,randZ); \nvec3 randoms3=getRandomVec3(seed.z);\n#ifdef DIRECTEDCONEEMITTER\nnewDirection=direction1+(direction2-direction1)*randoms3;\n#else\nif (abs(cos(coneAngle))==1.0) {newDirection=vec3(0.,1.0,0.);} else {newDirection=normalize(newPosition+directionRandomizer*randoms3); }\n#endif\n#elif defined(CUSTOMEMITTER)\nnewPosition=initialPosition;outInitialPosition=initialPosition;\n#else \nnewPosition=vec3(0.,0.,0.);newDirection=2.0*(getRandomVec3(seed.w)-vec3(0.5,0.5,0.5));\n#endif\nfloat power=emitPower.x+(emitPower.y-emitPower.x)*randoms.a;\n#ifdef LOCAL\noutPosition=newPosition;\n#else\noutPosition=(emitterWM*vec4(newPosition,1.)).xyz;\n#endif\n#ifdef CUSTOMEMITTER\noutDirection=direction;\n#ifndef BILLBOARD \noutInitialDirection=direction;\n#endif\n#else\n#ifdef LOCAL\nvec3 initial=newDirection;\n#else \nvec3 initial=(emitterWM*vec4(newDirection,0.)).xyz;\n#endif\noutDirection=initial*power;\n#ifndef BILLBOARD \noutInitialDirection=initial;\n#endif\n#endif\n#ifdef ANIMATESHEET \noutCellIndex=cellInfos.x;\n#ifdef ANIMATESHEETRANDOMSTART\noutCellStartOffset=randoms.a*outLife;\n#endif \n#endif\n#ifdef NOISE\noutNoiseCoordinates1=noiseCoordinates1;outNoiseCoordinates2=noiseCoordinates2;\n#endif\n} else {float directionScale=timeDelta;outAge=newAge;float ageGradient=newAge/life;\n#ifdef VELOCITYGRADIENTS\ndirectionScale*=texture(velocityGradientSampler,vec2(ageGradient,0)).r;\n#endif\n#ifdef DRAGGRADIENTS\ndirectionScale*=1.0-texture(dragGradientSampler,vec2(ageGradient,0)).r;\n#endif\n#if defined(CUSTOMEMITTER)\noutPosition=position+(direction-position)*ageGradient; \noutInitialPosition=initialPosition;\n#else\noutPosition=position+direction*directionScale;\n#endif\noutLife=life;outSeed=seed;\n#ifndef COLORGRADIENTS \noutColor=color;\n#endif\n#ifdef SIZEGRADIENTS\noutSize.x=texture(sizeGradientSampler,vec2(ageGradient,0)).r;outSize.yz=size.yz;\n#else\noutSize=size;\n#endif \n#ifndef BILLBOARD \noutInitialDirection=initialDirection;\n#endif\n#ifdef CUSTOMEMITTER\noutDirection=direction;\n#else\nvec3 updatedDirection=direction+gravity*timeDelta;\n#ifdef FLOWMAP\nvec4 clipSpace=(flowMapProjection*vec4(position,1.));vec3 ndcSpace=clipSpace.xyz/clipSpace.w;vec2 flowMapUV=ndcSpace.xy*0.5+0.5;vec4 flowMapValue=texture(flowMapSampler,flowMapUV);vec3 flowMapDirection=(flowMapValue.xyz*2.0-1.0)*flowMapValue.w;updatedDirection+=flowMapDirection*timeDelta*flowMapStrength;\n#endif\n#ifdef LIMITVELOCITYGRADIENTS\nfloat limitVelocity=texture(limitVelocityGradientSampler,vec2(ageGradient,0)).r;float currentVelocity=length(updatedDirection);if (currentVelocity>limitVelocity) {updatedDirection=updatedDirection*limitVelocityDamping;}\n#endif\noutDirection=updatedDirection;\n#ifdef NOISE\nfloat fetchedR=texture(noiseSampler,vec2(noiseCoordinates1.x,noiseCoordinates1.y)*vec2(0.5)+vec2(0.5)).r;float fetchedG=texture(noiseSampler,vec2(noiseCoordinates1.z,noiseCoordinates2.x)*vec2(0.5)+vec2(0.5)).r;float fetchedB=texture(noiseSampler,vec2(noiseCoordinates2.y,noiseCoordinates2.z)*vec2(0.5)+vec2(0.5)).r;vec3 force=vec3(2.*fetchedR-1.,2.*fetchedG-1.,2.*fetchedB-1.)*noiseStrength;outDirection=outDirection+force*timeDelta;outNoiseCoordinates1=noiseCoordinates1;outNoiseCoordinates2=noiseCoordinates2;\n#endif \n#endif \n#ifdef ANGULARSPEEDGRADIENTS\nfloat angularSpeed=texture(angularSpeedGradientSampler,vec2(ageGradient,0)).r;outAngle=angle+angularSpeed*timeDelta;\n#else\noutAngle=vec2(angle.x+angle.y*timeDelta,angle.y);\n#endif\n#ifdef ANIMATESHEET \nfloat offsetAge=outAge;float dist=cellInfos.y-cellInfos.x;\n#ifdef ANIMATESHEETRANDOMSTART\noutCellStartOffset=cellStartOffset;offsetAge+=cellStartOffset;\n#else\nfloat cellStartOffset=0.;\n#endif \nfloat ratio=0.;if (cellInfos.w==1.0) {ratio=clamp(mod(cellStartOffset+cellInfos.z*offsetAge,life)/life,0.,1.0);}\nelse {ratio=clamp(cellStartOffset+cellInfos.z*offsetAge/life,0.,1.0);}\noutCellIndex=float(int(cellInfos.x+ratio*dist));\n#endif\n}}`;\n// Sideeffect\nif (!ShaderStore.ShadersStore[name]) {\n    ShaderStore.ShadersStore[name] = shader;\n}\n/** @internal */\nexport const gpuUpdateParticlesVertexShader = { name, shader };\n", "import type { VertexBuffer, Buffer } from \"../Buffers/buffer\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport type { Effect, IEffectCreationOptions } from \"../Materials/effect\";\r\nimport type { IGPUParticleSystemPlatform } from \"./IGPUParticleSystemPlatform\";\r\n\r\nimport { CustomParticleEmitter } from \"./EmitterTypes/customParticleEmitter\";\r\nimport type { GPUParticleSystem } from \"./gpuParticleSystem\";\r\nimport type { DataArray, Nullable } from \"../types\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { UniformBufferEffectCommonAccessor } from \"../Materials/uniformBufferEffectCommonAccessor\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nimport \"../Shaders/gpuUpdateParticles.fragment\";\r\nimport \"../Shaders/gpuUpdateParticles.vertex\";\r\n\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\n/** @internal */\r\nexport class WebGL2ParticleSystem implements IGPUParticleSystemPlatform {\r\n    private _parent: GPUParticleSystem;\r\n    private _engine: ThinEngine;\r\n    private _updateEffect: Effect;\r\n    private _updateEffectOptions: IEffectCreationOptions;\r\n    private _renderVAO: WebGLVertexArrayObject[] = [];\r\n    private _updateVAO: WebGLVertexArrayObject[] = [];\r\n    private _renderVertexBuffers: { [key: string]: VertexBuffer };\r\n\r\n    /** @internal */\r\n    public readonly alignDataInBuffer = false;\r\n\r\n    /** @internal */\r\n    constructor(parent: GPUParticleSystem, engine: ThinEngine) {\r\n        this._parent = parent;\r\n        this._engine = engine;\r\n\r\n        this._updateEffectOptions = {\r\n            attributes: [\r\n                \"position\",\r\n                \"initialPosition\",\r\n                \"age\",\r\n                \"life\",\r\n                \"seed\",\r\n                \"size\",\r\n                \"color\",\r\n                \"direction\",\r\n                \"initialDirection\",\r\n                \"angle\",\r\n                \"cellIndex\",\r\n                \"cellStartOffset\",\r\n                \"noiseCoordinates1\",\r\n                \"noiseCoordinates2\",\r\n            ],\r\n            uniformsNames: [\r\n                \"currentCount\",\r\n                \"timeDelta\",\r\n                \"emitterWM\",\r\n                \"lifeTime\",\r\n                \"color1\",\r\n                \"color2\",\r\n                \"sizeRange\",\r\n                \"scaleRange\",\r\n                \"gravity\",\r\n                \"emitPower\",\r\n                \"direction1\",\r\n                \"direction2\",\r\n                \"minEmitBox\",\r\n                \"maxEmitBox\",\r\n                \"radius\",\r\n                \"directionRandomizer\",\r\n                \"height\",\r\n                \"coneAngle\",\r\n                \"stopFactor\",\r\n                \"angleRange\",\r\n                \"radiusRange\",\r\n                \"cellInfos\",\r\n                \"noiseStrength\",\r\n                \"limitVelocityDamping\",\r\n                \"flowMapProjection\",\r\n                \"flowMapStrength\",\r\n            ],\r\n            uniformBuffersNames: [],\r\n            samplers: [\r\n                \"randomSampler\",\r\n                \"randomSampler2\",\r\n                \"sizeGradientSampler\",\r\n                \"angularSpeedGradientSampler\",\r\n                \"velocityGradientSampler\",\r\n                \"limitVelocityGradientSampler\",\r\n                \"noiseSampler\",\r\n                \"dragGradientSampler\",\r\n                \"flowMapSampler\",\r\n            ],\r\n            defines: \"\",\r\n            fallbacks: null,\r\n            onCompiled: null,\r\n            onError: null,\r\n            indexParameters: null,\r\n            maxSimultaneousLights: 0,\r\n            transformFeedbackVaryings: [],\r\n        };\r\n    }\r\n\r\n    /** @internal */\r\n    public contextLost(): void {\r\n        this._updateEffect = undefined as any;\r\n        this._renderVAO.length = 0;\r\n        this._updateVAO.length = 0;\r\n    }\r\n\r\n    /** @internal */\r\n    public isUpdateBufferCreated(): boolean {\r\n        return !!this._updateEffect;\r\n    }\r\n\r\n    /** @internal */\r\n    public isUpdateBufferReady(): boolean {\r\n        return this._updateEffect?.isReady() ?? false;\r\n    }\r\n\r\n    /** @internal */\r\n    public createUpdateBuffer(defines: string): UniformBufferEffectCommonAccessor {\r\n        this._updateEffectOptions.transformFeedbackVaryings = [\"outPosition\"];\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outAge\");\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outSize\");\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outLife\");\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outSeed\");\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outDirection\");\r\n\r\n        if (this._parent.particleEmitterType instanceof CustomParticleEmitter) {\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outInitialPosition\");\r\n        }\r\n\r\n        if (!this._parent._colorGradientsTexture) {\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outColor\");\r\n        }\r\n\r\n        if (!this._parent._isBillboardBased) {\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outInitialDirection\");\r\n        }\r\n\r\n        if (this._parent.noiseTexture) {\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outNoiseCoordinates1\");\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outNoiseCoordinates2\");\r\n        }\r\n\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outAngle\");\r\n\r\n        if (this._parent.isAnimationSheetEnabled) {\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outCellIndex\");\r\n            if (this._parent.spriteRandomStartCell) {\r\n                this._updateEffectOptions.transformFeedbackVaryings.push(\"outCellStartOffset\");\r\n            }\r\n        }\r\n\r\n        this._updateEffectOptions.defines = defines;\r\n        this._updateEffect = this._engine.createEffect(\"gpuUpdateParticles\", this._updateEffectOptions, this._engine);\r\n\r\n        return new UniformBufferEffectCommonAccessor(this._updateEffect);\r\n    }\r\n\r\n    /** @internal */\r\n    public createVertexBuffers(updateBuffer: Buffer, renderVertexBuffers: { [key: string]: VertexBuffer }): void {\r\n        this._updateVAO.push(this._createUpdateVAO(updateBuffer));\r\n\r\n        this._renderVAO.push(this._engine.recordVertexArrayObject(renderVertexBuffers, null, this._parent._getWrapper(this._parent.blendMode).effect!));\r\n        this._engine.bindArrayBuffer(null);\r\n\r\n        this._renderVertexBuffers = renderVertexBuffers;\r\n    }\r\n\r\n    /** @internal */\r\n    public createParticleBuffer(data: number[]): DataArray | DataBuffer {\r\n        return data;\r\n    }\r\n\r\n    /** @internal */\r\n    public bindDrawBuffers(index: number, effect: Effect, indexBuffer: Nullable<DataBuffer>): void {\r\n        if (indexBuffer) {\r\n            this._engine.bindBuffers(this._renderVertexBuffers, indexBuffer, effect);\r\n        } else {\r\n            this._engine.bindVertexArrayObject(this._renderVAO[index], null);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public preUpdateParticleBuffer(): void {\r\n        const engine = this._engine as Engine;\r\n\r\n        this._engine.enableEffect(this._updateEffect);\r\n\r\n        if (!engine.setState) {\r\n            throw new Error(\"GPU particles cannot work without a full Engine. ThinEngine is not supported\");\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public updateParticleBuffer(index: number, targetBuffer: Buffer, currentActiveCount: number): void {\r\n        this._updateEffect.setTexture(\"randomSampler\", this._parent._randomTexture);\r\n        this._updateEffect.setTexture(\"randomSampler2\", this._parent._randomTexture2);\r\n\r\n        if (this._parent._flowMap) {\r\n            this._updateEffect.setTexture(\"flowMapSampler\", this._parent._flowMap);\r\n        }\r\n\r\n        if (this._parent._sizeGradientsTexture) {\r\n            this._updateEffect.setTexture(\"sizeGradientSampler\", this._parent._sizeGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._angularSpeedGradientsTexture) {\r\n            this._updateEffect.setTexture(\"angularSpeedGradientSampler\", this._parent._angularSpeedGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._velocityGradientsTexture) {\r\n            this._updateEffect.setTexture(\"velocityGradientSampler\", this._parent._velocityGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._limitVelocityGradientsTexture) {\r\n            this._updateEffect.setTexture(\"limitVelocityGradientSampler\", this._parent._limitVelocityGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._dragGradientsTexture) {\r\n            this._updateEffect.setTexture(\"dragGradientSampler\", this._parent._dragGradientsTexture);\r\n        }\r\n\r\n        if (this._parent.noiseTexture) {\r\n            this._updateEffect.setTexture(\"noiseSampler\", this._parent.noiseTexture);\r\n        }\r\n\r\n        // Bind source VAO\r\n        this._engine.bindVertexArrayObject(this._updateVAO[index], null);\r\n\r\n        // Update\r\n        const engine = this._engine as Engine;\r\n\r\n        engine.bindTransformFeedbackBuffer(targetBuffer.getBuffer());\r\n        engine.setRasterizerState(false);\r\n        engine.beginTransformFeedback(true);\r\n        engine.drawArraysType(Constants.MATERIAL_PointListDrawMode, 0, currentActiveCount);\r\n        engine.endTransformFeedback();\r\n        engine.setRasterizerState(true);\r\n        engine.bindTransformFeedbackBuffer(null);\r\n    }\r\n\r\n    /** @internal */\r\n    public releaseBuffers(): void {}\r\n\r\n    /** @internal */\r\n    public releaseVertexBuffers(): void {\r\n        for (let index = 0; index < this._updateVAO.length; index++) {\r\n            this._engine.releaseVertexArrayObject(this._updateVAO[index]);\r\n        }\r\n        this._updateVAO.length = 0;\r\n\r\n        for (let index = 0; index < this._renderVAO.length; index++) {\r\n            this._engine.releaseVertexArrayObject(this._renderVAO[index]);\r\n        }\r\n        this._renderVAO.length = 0;\r\n    }\r\n\r\n    private _createUpdateVAO(source: Buffer): WebGLVertexArrayObject {\r\n        const updateVertexBuffers: { [key: string]: VertexBuffer } = {};\r\n        updateVertexBuffers[\"position\"] = source.createVertexBuffer(\"position\", 0, 3);\r\n\r\n        let offset = 3;\r\n        updateVertexBuffers[\"age\"] = source.createVertexBuffer(\"age\", offset, 1);\r\n        offset += 1;\r\n        updateVertexBuffers[\"size\"] = source.createVertexBuffer(\"size\", offset, 3);\r\n        offset += 3;\r\n        updateVertexBuffers[\"life\"] = source.createVertexBuffer(\"life\", offset, 1);\r\n        offset += 1;\r\n        updateVertexBuffers[\"seed\"] = source.createVertexBuffer(\"seed\", offset, 4);\r\n        offset += 4;\r\n        updateVertexBuffers[\"direction\"] = source.createVertexBuffer(\"direction\", offset, 3);\r\n        offset += 3;\r\n\r\n        if (this._parent.particleEmitterType instanceof CustomParticleEmitter) {\r\n            updateVertexBuffers[\"initialPosition\"] = source.createVertexBuffer(\"initialPosition\", offset, 3);\r\n            offset += 3;\r\n        }\r\n\r\n        if (!this._parent._colorGradientsTexture) {\r\n            updateVertexBuffers[\"color\"] = source.createVertexBuffer(\"color\", offset, 4);\r\n            offset += 4;\r\n        }\r\n\r\n        if (!this._parent._isBillboardBased) {\r\n            updateVertexBuffers[\"initialDirection\"] = source.createVertexBuffer(\"initialDirection\", offset, 3);\r\n            offset += 3;\r\n        }\r\n\r\n        if (this._parent.noiseTexture) {\r\n            updateVertexBuffers[\"noiseCoordinates1\"] = source.createVertexBuffer(\"noiseCoordinates1\", offset, 3);\r\n            offset += 3;\r\n            updateVertexBuffers[\"noiseCoordinates2\"] = source.createVertexBuffer(\"noiseCoordinates2\", offset, 3);\r\n            offset += 3;\r\n        }\r\n\r\n        if (this._parent._angularSpeedGradientsTexture) {\r\n            updateVertexBuffers[\"angle\"] = source.createVertexBuffer(\"angle\", offset, 1);\r\n            offset += 1;\r\n        } else {\r\n            updateVertexBuffers[\"angle\"] = source.createVertexBuffer(\"angle\", offset, 2);\r\n            offset += 2;\r\n        }\r\n\r\n        if (this._parent._isAnimationSheetEnabled) {\r\n            updateVertexBuffers[\"cellIndex\"] = source.createVertexBuffer(\"cellIndex\", offset, 1);\r\n            offset += 1;\r\n            if (this._parent.spriteRandomStartCell) {\r\n                updateVertexBuffers[\"cellStartOffset\"] = source.createVertexBuffer(\"cellStartOffset\", offset, 1);\r\n                offset += 1;\r\n            }\r\n        }\r\n\r\n        const vao = this._engine.recordVertexArrayObject(updateVertexBuffers, null, this._updateEffect);\r\n        this._engine.bindArrayBuffer(null);\r\n\r\n        return vao;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.WebGL2ParticleSystem\", WebGL2ParticleSystem);\r\n"],
  "mappings": "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",
  "names": ["name", "shader"]
}
