{
  "version": 3,
  "sources": ["../../../dev/core/src/Meshes/Builders/ribbonBuilder.ts", "../../../dev/core/src/Meshes/Builders/discBuilder.ts", "../../../dev/core/src/Meshes/groundMesh.ts", "../../../dev/core/src/Meshes/Builders/groundBuilder.ts", "../../../dev/core/src/Meshes/Builders/boxBuilder.ts", "../../../dev/core/src/Meshes/Builders/tiledPlaneBuilder.ts", "../../../dev/core/src/Meshes/Builders/tiledBoxBuilder.ts", "../../../dev/core/src/Meshes/Builders/sphereBuilder.ts", "../../../dev/core/src/Meshes/Builders/cylinderBuilder.ts", "../../../dev/core/src/Meshes/Builders/torusBuilder.ts", "../../../dev/core/src/Meshes/Builders/torusKnotBuilder.ts", "../../../dev/core/src/Materials/shaderMaterial.ts", "../../../dev/core/src/Meshes/linesMesh.ts", "../../../dev/core/src/Meshes/Builders/linesBuilder.ts", "../../../dev/core/src/Meshes/polygonMesh.ts", "../../../dev/core/src/Meshes/Builders/polygonBuilder.ts", "../../../dev/core/src/Meshes/Builders/shapeBuilder.ts", "../../../dev/core/src/Meshes/Builders/latheBuilder.ts", "../../../dev/core/src/Meshes/Builders/planeBuilder.ts", "../../../dev/core/src/Meshes/Builders/tubeBuilder.ts", "../../../dev/core/src/Meshes/Builders/polyhedronBuilder.ts", "../../../dev/core/src/Meshes/Builders/icoSphereBuilder.ts", "../../../dev/core/src/Meshes/Builders/decalBuilder.ts", "../../../dev/core/src/Meshes/Builders/capsuleBuilder.ts", "../../../dev/core/src/Maths/math.isovector.ts", "../../../dev/core/src/Meshes/geodesicMesh.ts", "../../../dev/core/src/Meshes/Builders/geodesicBuilder.ts", "../../../dev/core/src/Meshes/goldbergMesh.ts", "../../../dev/core/src/Meshes/Builders/goldbergBuilder.ts", "../../../dev/core/src/Meshes/Builders/textBuilder.ts", "../../../dev/core/src/Meshes/meshBuilder.ts"],
  "sourcesContent": ["import type { Nullable, FloatArray } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Vector3, Vector2, Vector4 } from \"../../Maths/math.vector\";\r\nimport { TmpVectors } from \"../../Maths/math.vector\";\r\nimport type { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh, _CreationDataStorage } from \"../mesh\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a Ribbon\r\n * @param options an object used to set the following optional parameters for the ribbon, required but can be empty\r\n * * pathArray array of paths, each of which an array of successive Vector3\r\n * * closeArray creates a seam between the first and the last paths of the pathArray, optional, default false\r\n * * closePath creates a seam between the first and the last points of each path of the path array, optional, default false\r\n * * offset a positive integer, only used when pathArray contains a single path (offset = 10 means the point 1 is joined to the point 11), default rounded half size of the pathArray length\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * * invertUV swaps in the U and V coordinates when applying a texture, optional, default false\r\n * * uvs a linear array, of length 2 * number of vertices, of custom UV values, optional\r\n * * colors a linear array, of length 4 * number of vertices, of custom color values, optional\r\n * @returns the VertexData of the ribbon\r\n */\r\nexport function CreateRibbonVertexData(options: {\r\n    pathArray: Vector3[][];\r\n    closeArray?: boolean;\r\n    closePath?: boolean;\r\n    offset?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n    invertUV?: boolean;\r\n    uvs?: Vector2[];\r\n    colors?: Color4[];\r\n}): VertexData {\r\n    let pathArray: Vector3[][] = options.pathArray;\r\n    const closeArray: boolean = options.closeArray || false;\r\n    const closePath: boolean = options.closePath || false;\r\n    const invertUV: boolean = options.invertUV || false;\r\n    const defaultOffset: number = Math.floor(pathArray[0].length / 2);\r\n    let offset: number = options.offset || defaultOffset;\r\n    offset = offset > defaultOffset ? defaultOffset : Math.floor(offset); // offset max allowed : defaultOffset\r\n    const sideOrientation: number = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n    const customUV = options.uvs;\r\n    const customColors = options.colors;\r\n\r\n    const positions: number[] = [];\r\n    const indices: number[] = [];\r\n    const normals: number[] = [];\r\n    const uvs: number[] = [];\r\n\r\n    const us: number[][] = []; // us[path_id] = [uDist1, uDist2, uDist3 ... ] distances between points on path path_id\r\n    const vs: number[][] = []; // vs[i] = [vDist1, vDist2, vDist3, ... ] distances between points i of consecutive paths from pathArray\r\n    const uTotalDistance: number[] = []; // uTotalDistance[p] : total distance of path p\r\n    const vTotalDistance: number[] = []; //  vTotalDistance[i] : total distance between points i of first and last path from pathArray\r\n    let minlg: number; // minimal length among all paths from pathArray\r\n    const lg: number[] = []; // array of path lengths : nb of vertex per path\r\n    const idx: number[] = []; // array of path indexes : index of each path (first vertex) in the total vertex number\r\n    let p: number; // path iterator\r\n    let i: number; // point iterator\r\n    let j: number; // point iterator\r\n\r\n    // if single path in pathArray\r\n    if (pathArray.length < 2) {\r\n        const ar1: Vector3[] = [];\r\n        const ar2: Vector3[] = [];\r\n        for (i = 0; i < pathArray[0].length - offset; i++) {\r\n            ar1.push(pathArray[0][i]);\r\n            ar2.push(pathArray[0][i + offset]);\r\n        }\r\n        pathArray = [ar1, ar2];\r\n    }\r\n\r\n    // positions and horizontal distances (u)\r\n    let idc: number = 0;\r\n    const closePathCorr: number = closePath ? 1 : 0; // the final index will be +1 if closePath\r\n    const closeArrayCorr: number = closeArray ? 1 : 0;\r\n    let path: Vector3[];\r\n    let l: number;\r\n    minlg = pathArray[0].length;\r\n    let vectlg: number;\r\n    let dist: number;\r\n    for (p = 0; p < pathArray.length + closeArrayCorr; p++) {\r\n        uTotalDistance[p] = 0;\r\n        us[p] = [0];\r\n        path = p === pathArray.length ? pathArray[0] : pathArray[p];\r\n        l = path.length;\r\n        minlg = minlg < l ? minlg : l;\r\n\r\n        j = 0;\r\n        while (j < l) {\r\n            positions.push(path[j].x, path[j].y, path[j].z);\r\n            if (j > 0) {\r\n                vectlg = path[j].subtract(path[j - 1]).length();\r\n                dist = vectlg + uTotalDistance[p];\r\n                us[p].push(dist);\r\n                uTotalDistance[p] = dist;\r\n            }\r\n            j++;\r\n        }\r\n\r\n        if (closePath) {\r\n            // an extra hidden vertex is added in the \"positions\" array\r\n            j--;\r\n            positions.push(path[0].x, path[0].y, path[0].z);\r\n            vectlg = path[j].subtract(path[0]).length();\r\n            dist = vectlg + uTotalDistance[p];\r\n            us[p].push(dist);\r\n            uTotalDistance[p] = dist;\r\n        }\r\n\r\n        lg[p] = l + closePathCorr;\r\n        idx[p] = idc;\r\n        idc += l + closePathCorr;\r\n    }\r\n\r\n    // vertical distances (v)\r\n    let path1: Vector3[];\r\n    let path2: Vector3[];\r\n    let vertex1: Nullable<Vector3> = null;\r\n    let vertex2: Nullable<Vector3> = null;\r\n    for (i = 0; i < minlg + closePathCorr; i++) {\r\n        vTotalDistance[i] = 0;\r\n        vs[i] = [0];\r\n        for (p = 0; p < pathArray.length - 1 + closeArrayCorr; p++) {\r\n            path1 = pathArray[p];\r\n            path2 = p === pathArray.length - 1 ? pathArray[0] : pathArray[p + 1];\r\n            if (i === minlg) {\r\n                // closePath\r\n                vertex1 = path1[0];\r\n                vertex2 = path2[0];\r\n            } else {\r\n                vertex1 = path1[i];\r\n                vertex2 = path2[i];\r\n            }\r\n            vectlg = vertex2.subtract(vertex1).length();\r\n            dist = vectlg + vTotalDistance[i];\r\n            vs[i].push(dist);\r\n            vTotalDistance[i] = dist;\r\n        }\r\n    }\r\n\r\n    // uvs\r\n    let u: number;\r\n    let v: number;\r\n    if (customUV) {\r\n        for (p = 0; p < customUV.length; p++) {\r\n            uvs.push(customUV[p].x, useOpenGLOrientationForUV ? 1.0 - customUV[p].y : customUV[p].y);\r\n        }\r\n    } else {\r\n        for (p = 0; p < pathArray.length + closeArrayCorr; p++) {\r\n            for (i = 0; i < minlg + closePathCorr; i++) {\r\n                u = uTotalDistance[p] != 0.0 ? us[p][i] / uTotalDistance[p] : 0.0;\r\n                v = vTotalDistance[i] != 0.0 ? vs[i][p] / vTotalDistance[i] : 0.0;\r\n                if (invertUV) {\r\n                    uvs.push(v, u);\r\n                } else {\r\n                    uvs.push(u, useOpenGLOrientationForUV ? 1.0 - v : v);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // indices\r\n    p = 0; // path index\r\n    let pi: number = 0; // positions array index\r\n    let l1: number = lg[p] - 1; // path1 length\r\n    let l2: number = lg[p + 1] - 1; // path2 length\r\n    let min: number = l1 < l2 ? l1 : l2; // current path stop index\r\n    let shft: number = idx[1] - idx[0]; // shift\r\n    const path1nb: number = lg.length - 1; // number of path1 to iterate on\r\n\r\n    while (pi <= min && p < path1nb) {\r\n        //  stay under min and don't go over next to last path\r\n        // draw two triangles between path1 (p1) and path2 (p2) : (p1.pi, p2.pi, p1.pi+1) and (p2.pi+1, p1.pi+1, p2.pi) clockwise\r\n\r\n        indices.push(pi, pi + shft, pi + 1);\r\n        indices.push(pi + shft + 1, pi + 1, pi + shft);\r\n        pi += 1;\r\n        if (pi === min) {\r\n            // if end of one of two consecutive paths reached, go to next existing path\r\n            p++;\r\n            shft = idx[p + 1] - idx[p];\r\n            l1 = lg[p] - 1;\r\n            l2 = lg[p + 1] - 1;\r\n            pi = idx[p];\r\n            min = l1 < l2 ? l1 + pi : l2 + pi;\r\n        }\r\n    }\r\n\r\n    // normals\r\n    VertexData.ComputeNormals(positions, indices, normals);\r\n\r\n    if (closePath) {\r\n        // update both the first and last vertex normals to their average value\r\n        let indexFirst: number = 0;\r\n        let indexLast: number = 0;\r\n        for (p = 0; p < pathArray.length; p++) {\r\n            indexFirst = idx[p] * 3;\r\n            if (p + 1 < pathArray.length) {\r\n                indexLast = (idx[p + 1] - 1) * 3;\r\n            } else {\r\n                indexLast = normals.length - 3;\r\n            }\r\n            normals[indexFirst] = (normals[indexFirst] + normals[indexLast]) * 0.5;\r\n            normals[indexFirst + 1] = (normals[indexFirst + 1] + normals[indexLast + 1]) * 0.5;\r\n            normals[indexFirst + 2] = (normals[indexFirst + 2] + normals[indexLast + 2]) * 0.5;\r\n            const l = Math.sqrt(normals[indexFirst] * normals[indexFirst] + normals[indexFirst + 1] * normals[indexFirst + 1] + normals[indexFirst + 2] * normals[indexFirst + 2]);\r\n            normals[indexFirst] /= l;\r\n            normals[indexFirst + 1] /= l;\r\n            normals[indexFirst + 2] /= l;\r\n            normals[indexLast] = normals[indexFirst];\r\n            normals[indexLast + 1] = normals[indexFirst + 1];\r\n            normals[indexLast + 2] = normals[indexFirst + 2];\r\n        }\r\n    }\r\n\r\n    if (closeArray) {\r\n        let indexFirst = idx[0] * 3;\r\n        let indexLast = idx[pathArray.length] * 3;\r\n        for (i = 0; i < minlg + closePathCorr; i++) {\r\n            normals[indexFirst] = (normals[indexFirst] + normals[indexLast]) * 0.5;\r\n            normals[indexFirst + 1] = (normals[indexFirst + 1] + normals[indexLast + 1]) * 0.5;\r\n            normals[indexFirst + 2] = (normals[indexFirst + 2] + normals[indexLast + 2]) * 0.5;\r\n            const l = Math.sqrt(normals[indexFirst] * normals[indexFirst] + normals[indexFirst + 1] * normals[indexFirst + 1] + normals[indexFirst + 2] * normals[indexFirst + 2]);\r\n            normals[indexFirst] /= l;\r\n            normals[indexFirst + 1] /= l;\r\n            normals[indexFirst + 2] /= l;\r\n            normals[indexLast] = normals[indexFirst];\r\n            normals[indexLast + 1] = normals[indexFirst + 1];\r\n            normals[indexLast + 2] = normals[indexFirst + 2];\r\n            indexFirst += 3;\r\n            indexLast += 3;\r\n        }\r\n    }\r\n\r\n    // sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Colors\r\n    let colors: Nullable<Float32Array> = null;\r\n    if (customColors) {\r\n        colors = new Float32Array(customColors.length * 4);\r\n        for (let c = 0; c < customColors.length; c++) {\r\n            colors[c * 4] = customColors[c].r;\r\n            colors[c * 4 + 1] = customColors[c].g;\r\n            colors[c * 4 + 2] = customColors[c].b;\r\n            colors[c * 4 + 3] = customColors[c].a;\r\n        }\r\n    }\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n    const positions32 = new Float32Array(positions);\r\n    const normals32 = new Float32Array(normals);\r\n    const uvs32 = new Float32Array(uvs);\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions32;\r\n    vertexData.normals = normals32;\r\n    vertexData.uvs = uvs32;\r\n    if (colors) {\r\n        vertexData.set(colors, VertexBuffer.ColorKind);\r\n    }\r\n\r\n    if (closePath) {\r\n        (<any>vertexData)._idx = idx;\r\n    }\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a ribbon mesh. The ribbon is a parametric shape.  It has no predefined shape. Its final shape will depend on the input parameters\r\n * * The parameter `pathArray` is a required array of paths, what are each an array of successive Vector3. The pathArray parameter depicts the ribbon geometry\r\n * * The parameter `closeArray` (boolean, default false) creates a seam between the first and the last paths of the path array\r\n * * The parameter `closePath` (boolean, default false) creates a seam between the first and the last points of each path of the path array\r\n * * The parameter `offset` (positive integer, default : rounded half size of the pathArray length), is taken in account only if the `pathArray` is containing a single path\r\n * * It's the offset to join the points from the same path. Ex : offset = 10 means the point 1 is joined to the point 11\r\n * * The optional parameter `instance` is an instance of an existing Ribbon object to be updated with the passed `pathArray` parameter : https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#ribbon\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture\r\n * * The parameter `uvs` is an optional flat array of `Vector2` to update/set each ribbon vertex with its own custom UV values instead of the computed ones\r\n * * The parameters `colors` is an optional flat array of `Color4` to set/update each ribbon vertex with its own custom color values\r\n * * Note that if you use the parameters `uvs` or `colors`, the passed arrays must be populated with the right number of elements, it is to say the number of ribbon vertices. Remember that if you set `closePath` to `true`, there's one extra vertex per path in the geometry\r\n * * Moreover, you can use the parameter `color` with `instance` (to update the ribbon), only if you previously used it at creation time\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the ribbon mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param/ribbon_extra\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n */\r\nexport function CreateRibbon(\r\n    name: string,\r\n    options: {\r\n        pathArray: Vector3[][];\r\n        closeArray?: boolean;\r\n        closePath?: boolean;\r\n        offset?: number;\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        instance?: Mesh;\r\n        invertUV?: boolean;\r\n        uvs?: Vector2[];\r\n        colors?: Color4[];\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const pathArray = options.pathArray;\r\n    const closeArray = options.closeArray;\r\n    const closePath = options.closePath;\r\n    const sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    const instance = options.instance;\r\n    const updatable = options.updatable;\r\n\r\n    if (instance) {\r\n        // existing ribbon instance update\r\n        // positionFunction : ribbon case\r\n        // only pathArray and sideOrientation parameters are taken into account for positions update\r\n        const minimum = TmpVectors.Vector3[0].setAll(Number.MAX_VALUE);\r\n        const maximum = TmpVectors.Vector3[1].setAll(-Number.MAX_VALUE);\r\n        const positionFunction = (positions: FloatArray) => {\r\n            let minlg = pathArray[0].length;\r\n            const mesh = instance;\r\n            let i = 0;\r\n            const ns = mesh._originalBuilderSideOrientation === Mesh.DOUBLESIDE ? 2 : 1;\r\n            for (let si = 1; si <= ns; ++si) {\r\n                for (let p = 0; p < pathArray.length; ++p) {\r\n                    const path = pathArray[p];\r\n                    const l = path.length;\r\n                    minlg = minlg < l ? minlg : l;\r\n                    for (let j = 0; j < minlg; ++j) {\r\n                        const pathPoint = path[j];\r\n                        positions[i] = pathPoint.x;\r\n                        positions[i + 1] = pathPoint.y;\r\n                        positions[i + 2] = pathPoint.z;\r\n                        minimum.minimizeInPlaceFromFloats(pathPoint.x, pathPoint.y, pathPoint.z);\r\n                        maximum.maximizeInPlaceFromFloats(pathPoint.x, pathPoint.y, pathPoint.z);\r\n                        i += 3;\r\n                    }\r\n                    if (mesh._creationDataStorage && mesh._creationDataStorage.closePath) {\r\n                        const pathPoint = path[0];\r\n                        positions[i] = pathPoint.x;\r\n                        positions[i + 1] = pathPoint.y;\r\n                        positions[i + 2] = pathPoint.z;\r\n                        i += 3;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        const positions = <FloatArray>instance.getVerticesData(VertexBuffer.PositionKind);\r\n        positionFunction(positions);\r\n        if (instance.hasBoundingInfo) {\r\n            instance.getBoundingInfo().reConstruct(minimum, maximum, instance._worldMatrix);\r\n        } else {\r\n            instance.buildBoundingInfo(minimum, maximum, instance._worldMatrix);\r\n        }\r\n        instance.updateVerticesData(VertexBuffer.PositionKind, positions, false, false);\r\n        if (options.colors) {\r\n            const colors = <FloatArray>instance.getVerticesData(VertexBuffer.ColorKind);\r\n            for (let c = 0, colorIndex = 0; c < options.colors.length; c++, colorIndex += 4) {\r\n                const color = options.colors[c];\r\n                colors[colorIndex] = color.r;\r\n                colors[colorIndex + 1] = color.g;\r\n                colors[colorIndex + 2] = color.b;\r\n                colors[colorIndex + 3] = color.a;\r\n            }\r\n            instance.updateVerticesData(VertexBuffer.ColorKind, colors, false, false);\r\n        }\r\n        if (options.uvs) {\r\n            const uvs = <FloatArray>instance.getVerticesData(VertexBuffer.UVKind);\r\n            for (let i = 0; i < options.uvs.length; i++) {\r\n                uvs[i * 2] = options.uvs[i].x;\r\n                uvs[i * 2 + 1] = useOpenGLOrientationForUV ? 1.0 - options.uvs[i].y : options.uvs[i].y;\r\n            }\r\n            instance.updateVerticesData(VertexBuffer.UVKind, uvs, false, false);\r\n        }\r\n        if (!instance.areNormalsFrozen || instance.isFacetDataEnabled) {\r\n            const indices = instance.getIndices();\r\n            const normals = <FloatArray>instance.getVerticesData(VertexBuffer.NormalKind);\r\n            const params = instance.isFacetDataEnabled ? instance.getFacetDataParameters() : null;\r\n            VertexData.ComputeNormals(positions, indices, normals, params);\r\n\r\n            if (instance._creationDataStorage && instance._creationDataStorage.closePath) {\r\n                let indexFirst: number = 0;\r\n                let indexLast: number = 0;\r\n                for (let p = 0; p < pathArray.length; p++) {\r\n                    indexFirst = instance._creationDataStorage.idx[p] * 3;\r\n                    if (p + 1 < pathArray.length) {\r\n                        indexLast = (instance._creationDataStorage.idx[p + 1] - 1) * 3;\r\n                    } else {\r\n                        indexLast = normals.length - 3;\r\n                    }\r\n                    normals[indexFirst] = (normals[indexFirst] + normals[indexLast]) * 0.5;\r\n                    normals[indexFirst + 1] = (normals[indexFirst + 1] + normals[indexLast + 1]) * 0.5;\r\n                    normals[indexFirst + 2] = (normals[indexFirst + 2] + normals[indexLast + 2]) * 0.5;\r\n                    normals[indexLast] = normals[indexFirst];\r\n                    normals[indexLast + 1] = normals[indexFirst + 1];\r\n                    normals[indexLast + 2] = normals[indexFirst + 2];\r\n                }\r\n            }\r\n            if (!instance.areNormalsFrozen) {\r\n                instance.updateVerticesData(VertexBuffer.NormalKind, normals, false, false);\r\n            }\r\n        }\r\n\r\n        return instance;\r\n    } else {\r\n        // new ribbon creation\r\n\r\n        const ribbon = new Mesh(name, scene);\r\n        ribbon._originalBuilderSideOrientation = sideOrientation;\r\n        ribbon._creationDataStorage = new _CreationDataStorage();\r\n\r\n        const vertexData = CreateRibbonVertexData(options);\r\n        if (closePath) {\r\n            ribbon._creationDataStorage.idx = (<any>vertexData)._idx;\r\n        }\r\n        ribbon._creationDataStorage.closePath = closePath;\r\n        ribbon._creationDataStorage.closeArray = closeArray;\r\n\r\n        vertexData.applyToMesh(ribbon, updatable);\r\n\r\n        return ribbon;\r\n    }\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use CreateRibbon directly\r\n */\r\nexport const RibbonBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateRibbon,\r\n};\r\n\r\nVertexData.CreateRibbon = CreateRibbonVertexData;\r\n\r\nMesh.CreateRibbon = (\r\n    name: string,\r\n    pathArray: Vector3[][],\r\n    closeArray: boolean = false,\r\n    closePath: boolean,\r\n    offset: number,\r\n    scene?: Scene,\r\n    updatable: boolean = false,\r\n    sideOrientation?: number,\r\n    instance?: Mesh\r\n) => {\r\n    return CreateRibbon(\r\n        name,\r\n        {\r\n            pathArray: pathArray,\r\n            closeArray: closeArray,\r\n            closePath: closePath,\r\n            offset: offset,\r\n            updatable: updatable,\r\n            sideOrientation: sideOrientation,\r\n            instance: instance,\r\n        },\r\n        scene\r\n    );\r\n};\r\n", "import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData of the Disc or regular Polygon\r\n * @param options an object used to set the following optional parameters for the disc, required but can be empty\r\n * * radius the radius of the disc, optional default 0.5\r\n * * tessellation the number of polygon sides, optional, default 64\r\n * * arc a number from 0 to 1, to create an unclosed polygon based on the fraction of the circumference given by the arc value, optional, default 1\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @returns the VertexData of the box\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function CreateDiscVertexData(options: {\r\n    radius?: number;\r\n    tessellation?: number;\r\n    arc?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n}): VertexData {\r\n    const positions: number[] = [];\r\n    const indices: number[] = [];\r\n    const normals: number[] = [];\r\n    const uvs: number[] = [];\r\n\r\n    const radius = options.radius || 0.5;\r\n    const tessellation = options.tessellation || 64;\r\n    const arc: number = options.arc && (options.arc <= 0 || options.arc > 1) ? 1.0 : options.arc || 1.0;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // positions and uvs\r\n    positions.push(0, 0, 0); // disc center first\r\n    uvs.push(0.5, 0.5);\r\n\r\n    const theta = Math.PI * 2 * arc;\r\n    const step = arc === 1 ? theta / tessellation : theta / (tessellation - 1);\r\n    let a = 0;\r\n    for (let t = 0; t < tessellation; t++) {\r\n        const x = Math.cos(a);\r\n        const y = Math.sin(a);\r\n        const u = (x + 1) / 2;\r\n        const v = (1 - y) / 2;\r\n        positions.push(radius * x, radius * y, 0);\r\n        uvs.push(u, useOpenGLOrientationForUV ? 1 - v : v);\r\n        a += step;\r\n    }\r\n    if (arc === 1) {\r\n        positions.push(positions[3], positions[4], positions[5]); // close the circle\r\n        uvs.push(uvs[2], useOpenGLOrientationForUV ? 1 - uvs[3] : uvs[3]);\r\n    }\r\n\r\n    //indices\r\n    const vertexNb = positions.length / 3;\r\n    for (let i = 1; i < vertexNb - 1; i++) {\r\n        indices.push(i + 1, 0, i);\r\n    }\r\n\r\n    // result\r\n    VertexData.ComputeNormals(positions, indices, normals);\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a plane polygonal mesh.  By default, this is a disc\r\n * * The parameter `radius` sets the radius size (float) of the polygon (default 0.5)\r\n * * The parameter `tessellation` sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc\r\n * * You can create an unclosed polygon with the parameter `arc` (positive float, default 1), valued between 0 and 1, what is the ratio of the circumference : 2 x PI x ratio\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the plane polygonal mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#disc-or-regular-polygon\r\n */\r\nexport function CreateDisc(\r\n    name: string,\r\n    options: { radius?: number; tessellation?: number; arc?: number; updatable?: boolean; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const disc = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    disc._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateDiscVertexData(options);\r\n\r\n    vertexData.applyToMesh(disc, options.updatable);\r\n\r\n    return disc;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated please use CreateDisc directly\r\n */\r\nexport const DiscBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateDisc,\r\n};\r\n\r\nVertexData.CreateDisc = CreateDiscVertexData;\r\n\r\nMesh.CreateDisc = (name: string, radius: number, tessellation: number, scene: Nullable<Scene> = null, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        radius,\r\n        tessellation,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateDisc(name, options, scene);\r\n};\r\n", "import type { Scene } from \"../scene\";\r\nimport { Vector3, Vector2, TmpVectors, Vector4 } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\n\r\nMesh._GroundMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n    return GroundMesh.Parse(parsedMesh, scene);\r\n};\r\n\r\n/**\r\n * Mesh representing the ground\r\n */\r\nexport class GroundMesh extends Mesh {\r\n    /** If octree should be generated */\r\n    public generateOctree = false;\r\n\r\n    private _heightQuads: { slope: Vector2; facet1: Vector4; facet2: Vector4 }[];\r\n\r\n    /** @internal */\r\n    public _subdivisionsX: number;\r\n    /** @internal */\r\n    public _subdivisionsY: number;\r\n    /** @internal */\r\n    public _width: number;\r\n    /** @internal */\r\n    public _height: number;\r\n    /** @internal */\r\n    public _minX: number;\r\n    /** @internal */\r\n    public _maxX: number;\r\n    /** @internal */\r\n    public _minZ: number;\r\n    /** @internal */\r\n    public _maxZ: number;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    /**\r\n     * \"GroundMesh\"\r\n     * @returns \"GroundMesh\"\r\n     */\r\n    public override getClassName(): string {\r\n        return \"GroundMesh\";\r\n    }\r\n\r\n    /**\r\n     * The minimum of x and y subdivisions\r\n     */\r\n    public get subdivisions(): number {\r\n        return Math.min(this._subdivisionsX, this._subdivisionsY);\r\n    }\r\n\r\n    /**\r\n     * X subdivisions\r\n     */\r\n    public get subdivisionsX(): number {\r\n        return this._subdivisionsX;\r\n    }\r\n\r\n    /**\r\n     * Y subdivisions\r\n     */\r\n    public get subdivisionsY(): number {\r\n        return this._subdivisionsY;\r\n    }\r\n\r\n    /**\r\n     * This function will divide the mesh into submeshes and update an octree to help to select the right submeshes\r\n     * for rendering, picking and collision computations. Please note that you must have a decent number of submeshes\r\n     * to get performance improvements when using an octree.\r\n     * @param chunksCount the number of submeshes the mesh will be divided into\r\n     * @param octreeBlocksSize the maximum size of the octree blocks (Default: 32)\r\n     */\r\n    public optimize(chunksCount: number, octreeBlocksSize = 32): void {\r\n        this._subdivisionsX = chunksCount;\r\n        this._subdivisionsY = chunksCount;\r\n        this.subdivide(chunksCount);\r\n\r\n        // Call the octree system optimization if it is defined.\r\n        const thisAsAny = this as any;\r\n        if (thisAsAny.createOrUpdateSubmeshesOctree) {\r\n            thisAsAny.createOrUpdateSubmeshesOctree(octreeBlocksSize);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a height (y) value in the World system :\r\n     * the ground altitude at the coordinates (x, z) expressed in the World system.\r\n     * @param x x coordinate\r\n     * @param z z coordinate\r\n     * @returns the ground y position if (x, z) are outside the ground surface.\r\n     */\r\n    public getHeightAtCoordinates(x: number, z: number): number {\r\n        const world = this.getWorldMatrix();\r\n        const invMat = TmpVectors.Matrix[5];\r\n        world.invertToRef(invMat);\r\n        const tmpVect = TmpVectors.Vector3[8];\r\n        Vector3.TransformCoordinatesFromFloatsToRef(x, 0.0, z, invMat, tmpVect); // transform x,z in the mesh local space\r\n        x = tmpVect.x;\r\n        z = tmpVect.z;\r\n        if (x < this._minX || x >= this._maxX || z <= this._minZ || z > this._maxZ) {\r\n            return this.position.y;\r\n        }\r\n        if (!this._heightQuads || this._heightQuads.length == 0) {\r\n            this._initHeightQuads();\r\n            this._computeHeightQuads();\r\n        }\r\n        const facet = this._getFacetAt(x, z);\r\n        const y = -(facet.x * x + facet.z * z + facet.w) / facet.y;\r\n        // return y in the World system\r\n        Vector3.TransformCoordinatesFromFloatsToRef(0.0, y, 0.0, world, tmpVect);\r\n        return tmpVect.y;\r\n    }\r\n\r\n    /**\r\n     * Returns a normalized vector (Vector3) orthogonal to the ground\r\n     * at the ground coordinates (x, z) expressed in the World system.\r\n     * @param x x coordinate\r\n     * @param z z coordinate\r\n     * @returns Vector3(0.0, 1.0, 0.0) if (x, z) are outside the ground surface.\r\n     */\r\n    public getNormalAtCoordinates(x: number, z: number): Vector3 {\r\n        const normal = new Vector3(0.0, 1.0, 0.0);\r\n        this.getNormalAtCoordinatesToRef(x, z, normal);\r\n        return normal;\r\n    }\r\n\r\n    /**\r\n     * Updates the Vector3 passed a reference with a normalized vector orthogonal to the ground\r\n     * at the ground coordinates (x, z) expressed in the World system.\r\n     * Doesn't update the reference Vector3 if (x, z) are outside the ground surface.\r\n     * @param x x coordinate\r\n     * @param z z coordinate\r\n     * @param ref vector to store the result\r\n     * @returns the GroundMesh.\r\n     */\r\n    public getNormalAtCoordinatesToRef(x: number, z: number, ref: Vector3): GroundMesh {\r\n        const world = this.getWorldMatrix();\r\n        const tmpMat = TmpVectors.Matrix[5];\r\n        world.invertToRef(tmpMat);\r\n        const tmpVect = TmpVectors.Vector3[8];\r\n        Vector3.TransformCoordinatesFromFloatsToRef(x, 0.0, z, tmpMat, tmpVect); // transform x,z in the mesh local space\r\n        x = tmpVect.x;\r\n        z = tmpVect.z;\r\n        if (x < this._minX || x > this._maxX || z < this._minZ || z > this._maxZ) {\r\n            return this;\r\n        }\r\n        if (!this._heightQuads || this._heightQuads.length == 0) {\r\n            this._initHeightQuads();\r\n            this._computeHeightQuads();\r\n        }\r\n        const facet = this._getFacetAt(x, z);\r\n        Vector3.TransformNormalFromFloatsToRef(facet.x, facet.y, facet.z, world, ref);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Force the heights to be recomputed for getHeightAtCoordinates() or getNormalAtCoordinates()\r\n     * if the ground has been updated.\r\n     * This can be used in the render loop.\r\n     * @returns the GroundMesh.\r\n     */\r\n    public updateCoordinateHeights(): GroundMesh {\r\n        if (!this._heightQuads || this._heightQuads.length == 0) {\r\n            this._initHeightQuads();\r\n        }\r\n        this._computeHeightQuads();\r\n        return this;\r\n    }\r\n\r\n    // Returns the element \"facet\" from the heightQuads array relative to (x, z) local coordinates\r\n    private _getFacetAt(x: number, z: number): Vector4 {\r\n        // retrieve col and row from x, z coordinates in the ground local system\r\n        const col = Math.floor(((x + this._maxX) * this._subdivisionsX) / this._width);\r\n        const row = Math.floor((-(z + this._maxZ) * this._subdivisionsY) / this._height + this._subdivisionsY);\r\n        const quad = this._heightQuads[row * this._subdivisionsX + col];\r\n        let facet;\r\n        if (z < quad.slope.x * x + quad.slope.y) {\r\n            facet = quad.facet1;\r\n        } else {\r\n            facet = quad.facet2;\r\n        }\r\n        return facet;\r\n    }\r\n\r\n    //  Creates and populates the heightMap array with \"facet\" elements :\r\n    // a quad is two triangular facets separated by a slope, so a \"facet\" element is 1 slope + 2 facets\r\n    // slope : Vector2(c, h) = 2D diagonal line equation setting apart two triangular facets in a quad : z = cx + h\r\n    // facet1 : Vector4(a, b, c, d) = first facet 3D plane equation : ax + by + cz + d = 0\r\n    // facet2 :  Vector4(a, b, c, d) = second facet 3D plane equation : ax + by + cz + d = 0\r\n    // Returns the GroundMesh.\r\n    private _initHeightQuads(): GroundMesh {\r\n        const subdivisionsX = this._subdivisionsX;\r\n        const subdivisionsY = this._subdivisionsY;\r\n        this._heightQuads = [];\r\n        for (let row = 0; row < subdivisionsY; row++) {\r\n            for (let col = 0; col < subdivisionsX; col++) {\r\n                const quad = { slope: Vector2.Zero(), facet1: new Vector4(0.0, 0.0, 0.0, 0.0), facet2: new Vector4(0.0, 0.0, 0.0, 0.0) };\r\n                this._heightQuads[row * subdivisionsX + col] = quad;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // Compute each quad element values and update the heightMap array :\r\n    // slope : Vector2(c, h) = 2D diagonal line equation setting apart two triangular facets in a quad : z = cx + h\r\n    // facet1 : Vector4(a, b, c, d) = first facet 3D plane equation : ax + by + cz + d = 0\r\n    // facet2 :  Vector4(a, b, c, d) = second facet 3D plane equation : ax + by + cz + d = 0\r\n    // Returns the GroundMesh.\r\n    private _computeHeightQuads(): GroundMesh {\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (!positions) {\r\n            return this;\r\n        }\r\n\r\n        const v1 = TmpVectors.Vector3[3];\r\n        const v2 = TmpVectors.Vector3[2];\r\n        const v3 = TmpVectors.Vector3[1];\r\n        const v4 = TmpVectors.Vector3[0];\r\n        const v1v2 = TmpVectors.Vector3[4];\r\n        const v1v3 = TmpVectors.Vector3[5];\r\n        const v1v4 = TmpVectors.Vector3[6];\r\n        const norm1 = TmpVectors.Vector3[7];\r\n        const norm2 = TmpVectors.Vector3[8];\r\n        let i = 0;\r\n        let j = 0;\r\n        let k = 0;\r\n        let cd = 0; // 2D slope coefficient : z = cd * x + h\r\n        let h = 0;\r\n        let d1 = 0; // facet plane equation : ax + by + cz + d = 0\r\n        let d2 = 0;\r\n\r\n        const subdivisionsX = this._subdivisionsX;\r\n        const subdivisionsY = this._subdivisionsY;\r\n\r\n        for (let row = 0; row < subdivisionsY; row++) {\r\n            for (let col = 0; col < subdivisionsX; col++) {\r\n                i = col * 3;\r\n                j = row * (subdivisionsX + 1) * 3;\r\n                k = (row + 1) * (subdivisionsX + 1) * 3;\r\n                v1.x = positions[j + i];\r\n                v1.y = positions[j + i + 1];\r\n                v1.z = positions[j + i + 2];\r\n                v2.x = positions[j + i + 3];\r\n                v2.y = positions[j + i + 4];\r\n                v2.z = positions[j + i + 5];\r\n                v3.x = positions[k + i];\r\n                v3.y = positions[k + i + 1];\r\n                v3.z = positions[k + i + 2];\r\n                v4.x = positions[k + i + 3];\r\n                v4.y = positions[k + i + 4];\r\n                v4.z = positions[k + i + 5];\r\n\r\n                // 2D slope V1V4\r\n                cd = (v4.z - v1.z) / (v4.x - v1.x);\r\n                h = v1.z - cd * v1.x; // v1 belongs to the slope\r\n\r\n                // facet equations :\r\n                // we compute each facet normal vector\r\n                // the equation of the facet plane is : norm.x * x + norm.y * y + norm.z * z + d = 0\r\n                // we compute the value d by applying the equation to v1 which belongs to the plane\r\n                // then we store the facet equation in a Vector4\r\n                v2.subtractToRef(v1, v1v2);\r\n                v3.subtractToRef(v1, v1v3);\r\n                v4.subtractToRef(v1, v1v4);\r\n                Vector3.CrossToRef(v1v4, v1v3, norm1); // caution : CrossToRef uses the Tmp class\r\n                Vector3.CrossToRef(v1v2, v1v4, norm2);\r\n                norm1.normalize();\r\n                norm2.normalize();\r\n                d1 = -(norm1.x * v1.x + norm1.y * v1.y + norm1.z * v1.z);\r\n                d2 = -(norm2.x * v2.x + norm2.y * v2.y + norm2.z * v2.z);\r\n\r\n                const quad = this._heightQuads[row * subdivisionsX + col];\r\n                quad.slope.copyFromFloats(cd, h);\r\n                quad.facet1.copyFromFloats(norm1.x, norm1.y, norm1.z, d1);\r\n                quad.facet2.copyFromFloats(norm2.x, norm2.y, norm2.z, d2);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Serializes this ground mesh\r\n     * @param serializationObject object to write serialization to\r\n     */\r\n    public override serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.subdivisionsX = this._subdivisionsX;\r\n        serializationObject.subdivisionsY = this._subdivisionsY;\r\n\r\n        serializationObject.minX = this._minX;\r\n        serializationObject.maxX = this._maxX;\r\n\r\n        serializationObject.minZ = this._minZ;\r\n        serializationObject.maxZ = this._maxZ;\r\n\r\n        serializationObject.width = this._width;\r\n        serializationObject.height = this._height;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized ground mesh\r\n     * @param parsedMesh the serialized mesh\r\n     * @param scene the scene to create the ground mesh in\r\n     * @returns the created ground mesh\r\n     */\r\n    public static override Parse(parsedMesh: any, scene: Scene): GroundMesh {\r\n        const result = new GroundMesh(parsedMesh.name, scene);\r\n\r\n        result._subdivisionsX = parsedMesh.subdivisionsX || 1;\r\n        result._subdivisionsY = parsedMesh.subdivisionsY || 1;\r\n\r\n        result._minX = parsedMesh.minX;\r\n        result._maxX = parsedMesh.maxX;\r\n\r\n        result._minZ = parsedMesh.minZ;\r\n        result._maxZ = parsedMesh.maxZ;\r\n\r\n        result._width = parsedMesh.width;\r\n        result._height = parsedMesh.height;\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { GroundMesh } from \"../groundMesh\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\nimport { Epsilon } from \"../../Maths/math.constants\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a Ground\r\n * @param options an object used to set the following optional parameters for the Ground, required but can be empty\r\n * @param options.width the width (x direction) of the ground, optional, default 1\r\n * @param options.height the height (z direction) of the ground, optional, default 1\r\n * @param options.subdivisions the number of subdivisions per side, optional, default 1\r\n * @param options.subdivisionsX the number of subdivisions in the x direction, overrides options.subdivisions, optional, default undefined\r\n * @param options.subdivisionsY the number of subdivisions in the y direction, overrides options.subdivisions, optional, default undefined\r\n * @returns the VertexData of the Ground\r\n */\r\nexport function CreateGroundVertexData(options: {\r\n    size?: number;\r\n    width?: number;\r\n    height?: number;\r\n    subdivisions?: number;\r\n    subdivisionsX?: number;\r\n    subdivisionsY?: number;\r\n}): VertexData {\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n    let row: number, col: number;\r\n\r\n    const width: number = options.width || options.size || 1;\r\n    const height: number = options.height || options.size || 1;\r\n    const subdivisionsX: number = (options.subdivisionsX || options.subdivisions || 1) | 0;\r\n    const subdivisionsY: number = (options.subdivisionsY || options.subdivisions || 1) | 0;\r\n\r\n    for (row = 0; row <= subdivisionsY; row++) {\r\n        for (col = 0; col <= subdivisionsX; col++) {\r\n            const position = new Vector3((col * width) / subdivisionsX - width / 2.0, 0, ((subdivisionsY - row) * height) / subdivisionsY - height / 2.0);\r\n            const normal = new Vector3(0, 1.0, 0);\r\n\r\n            positions.push(position.x, position.y, position.z);\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            uvs.push(col / subdivisionsX, useOpenGLOrientationForUV ? row / subdivisionsY : 1.0 - row / subdivisionsY);\r\n        }\r\n    }\r\n\r\n    for (row = 0; row < subdivisionsY; row++) {\r\n        for (col = 0; col < subdivisionsX; col++) {\r\n            indices.push(col + 1 + (row + 1) * (subdivisionsX + 1));\r\n            indices.push(col + 1 + row * (subdivisionsX + 1));\r\n            indices.push(col + row * (subdivisionsX + 1));\r\n\r\n            indices.push(col + (row + 1) * (subdivisionsX + 1));\r\n            indices.push(col + 1 + (row + 1) * (subdivisionsX + 1));\r\n            indices.push(col + row * (subdivisionsX + 1));\r\n        }\r\n    }\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates the VertexData for a TiledGround by subdividing the ground into tiles\r\n * @param options an object used to set the following optional parameters for the Ground\r\n * @param options.xmin ground minimum X coordinate, default -1\r\n * @param options.zmin ground minimum Z coordinate, default -1\r\n * @param options.xmax ground maximum X coordinate, default 1\r\n * @param options.zmax ground maximum Z coordinate, default 1\r\n * @param options.subdivisions a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the ground width and height creating 'tiles', default {w: 6, h: 6}\r\n * @param options.subdivisions.w positive integer, default 6\r\n * @param options.subdivisions.h positive integer, default 6\r\n * @param options.precision a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the tile width and height, default {w: 2, h: 2}\r\n * @param options.precision.w positive integer, default 2\r\n * @param options.precision.h positive integer, default 2\r\n * @returns the VertexData of the TiledGround\r\n */\r\nexport function CreateTiledGroundVertexData(options: {\r\n    xmin: number;\r\n    zmin: number;\r\n    xmax: number;\r\n    zmax: number;\r\n    subdivisions?: { w: number; h: number };\r\n    precision?: { w: number; h: number };\r\n}): VertexData {\r\n    const xmin = options.xmin !== undefined && options.xmin !== null ? options.xmin : -1.0;\r\n    const zmin = options.zmin !== undefined && options.zmin !== null ? options.zmin : -1.0;\r\n    const xmax = options.xmax !== undefined && options.xmax !== null ? options.xmax : 1.0;\r\n    const zmax = options.zmax !== undefined && options.zmax !== null ? options.zmax : 1.0;\r\n    const subdivisions = options.subdivisions || { w: 1, h: 1 };\r\n    const precision = options.precision || { w: 1, h: 1 };\r\n\r\n    const indices: number[] = [];\r\n    const positions: number[] = [];\r\n    const normals: number[] = [];\r\n    const uvs: number[] = [];\r\n    let row: number, col: number, tileRow: number, tileCol: number;\r\n\r\n    subdivisions.h = subdivisions.h < 1 ? 1 : subdivisions.h;\r\n    subdivisions.w = subdivisions.w < 1 ? 1 : subdivisions.w;\r\n    precision.w = precision.w < 1 ? 1 : precision.w;\r\n    precision.h = precision.h < 1 ? 1 : precision.h;\r\n\r\n    const tileSize = {\r\n        w: (xmax - xmin) / subdivisions.w,\r\n        h: (zmax - zmin) / subdivisions.h,\r\n    };\r\n\r\n    function applyTile(xTileMin: number, zTileMin: number, xTileMax: number, zTileMax: number) {\r\n        // Indices\r\n        const base = positions.length / 3;\r\n        const rowLength = precision.w + 1;\r\n        for (row = 0; row < precision.h; row++) {\r\n            for (col = 0; col < precision.w; col++) {\r\n                const square = [base + col + row * rowLength, base + (col + 1) + row * rowLength, base + (col + 1) + (row + 1) * rowLength, base + col + (row + 1) * rowLength];\r\n\r\n                indices.push(square[1]);\r\n                indices.push(square[2]);\r\n                indices.push(square[3]);\r\n                indices.push(square[0]);\r\n                indices.push(square[1]);\r\n                indices.push(square[3]);\r\n            }\r\n        }\r\n\r\n        // Position, normals and uvs\r\n        const position = Vector3.Zero();\r\n        const normal = new Vector3(0, 1.0, 0);\r\n        for (row = 0; row <= precision.h; row++) {\r\n            position.z = (row * (zTileMax - zTileMin)) / precision.h + zTileMin;\r\n            for (col = 0; col <= precision.w; col++) {\r\n                position.x = (col * (xTileMax - xTileMin)) / precision.w + xTileMin;\r\n                position.y = 0;\r\n\r\n                positions.push(position.x, position.y, position.z);\r\n                normals.push(normal.x, normal.y, normal.z);\r\n                uvs.push(col / precision.w, row / precision.h);\r\n            }\r\n        }\r\n    }\r\n\r\n    for (tileRow = 0; tileRow < subdivisions.h; tileRow++) {\r\n        for (tileCol = 0; tileCol < subdivisions.w; tileCol++) {\r\n            applyTile(xmin + tileCol * tileSize.w, zmin + tileRow * tileSize.h, xmin + (tileCol + 1) * tileSize.w, zmin + (tileRow + 1) * tileSize.h);\r\n        }\r\n    }\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates the VertexData of the Ground designed from a heightmap\r\n * @param options an object used to set the following parameters for the Ground, required and provided by CreateGroundFromHeightMap\r\n * @param options.width the width (x direction) of the ground\r\n * @param options.height the height (z direction) of the ground\r\n * @param options.subdivisions the number of subdivisions per side\r\n * @param options.minHeight the minimum altitude on the ground, optional, default 0\r\n * @param options.maxHeight the maximum altitude on the ground, optional default 1\r\n * @param options.colorFilter the filter to apply to the image pixel colors to compute the height, optional Color3, default (0.3, 0.59, 0.11)\r\n * @param options.buffer the array holding the image color data\r\n * @param options.bufferWidth the width of image\r\n * @param options.bufferHeight the height of image\r\n * @param options.alphaFilter Remove any data where the alpha channel is below this value, defaults 0 (all data visible)\r\n * @param options.heightBuffer a array of floats where the height data can be saved, if its length is greater than zero.\r\n * @returns the VertexData of the Ground designed from a heightmap\r\n */\r\nexport function CreateGroundFromHeightMapVertexData(options: {\r\n    width: number;\r\n    height: number;\r\n    subdivisions: number;\r\n    minHeight: number;\r\n    maxHeight: number;\r\n    colorFilter: Color3;\r\n    buffer: Uint8Array;\r\n    bufferWidth: number;\r\n    bufferHeight: number;\r\n    alphaFilter: number;\r\n    heightBuffer?: Float32Array;\r\n}): VertexData {\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n    let row, col;\r\n    const filter = options.colorFilter || new Color3(0.3, 0.59, 0.11);\r\n    const alphaFilter = options.alphaFilter || 0.0;\r\n    let invert = false;\r\n\r\n    if (options.minHeight > options.maxHeight) {\r\n        invert = true;\r\n        const temp = options.maxHeight;\r\n        options.maxHeight = options.minHeight;\r\n        options.minHeight = temp;\r\n    }\r\n\r\n    // Vertices\r\n    for (row = 0; row <= options.subdivisions; row++) {\r\n        for (col = 0; col <= options.subdivisions; col++) {\r\n            const position = new Vector3(\r\n                (col * options.width) / options.subdivisions - options.width / 2.0,\r\n                0,\r\n                ((options.subdivisions - row) * options.height) / options.subdivisions - options.height / 2.0\r\n            );\r\n\r\n            // Compute height\r\n            const heightMapX = (((position.x + options.width / 2) / options.width) * (options.bufferWidth - 1)) | 0;\r\n            const heightMapY = ((1.0 - (position.z + options.height / 2) / options.height) * (options.bufferHeight - 1)) | 0;\r\n            const pos = (heightMapX + heightMapY * options.bufferWidth) * 4;\r\n            let r = options.buffer[pos] / 255.0;\r\n            let g = options.buffer[pos + 1] / 255.0;\r\n            let b = options.buffer[pos + 2] / 255.0;\r\n            const a = options.buffer[pos + 3] / 255.0;\r\n\r\n            if (invert) {\r\n                r = 1.0 - r;\r\n                g = 1.0 - g;\r\n                b = 1.0 - b;\r\n            }\r\n\r\n            const gradient = r * filter.r + g * filter.g + b * filter.b;\r\n\r\n            // If our alpha channel is not within our filter then we will assign a 'special' height\r\n            // Then when building the indices, we will ignore any vertex that is using the special height\r\n            if (a >= alphaFilter) {\r\n                position.y = options.minHeight + (options.maxHeight - options.minHeight) * gradient;\r\n            } else {\r\n                position.y = options.minHeight - Epsilon; // We can't have a height below minHeight, normally.\r\n            }\r\n            if (options.heightBuffer) {\r\n                // set the height buffer information in row major order.\r\n                options.heightBuffer[row * (options.subdivisions + 1) + col] = position.y;\r\n            }\r\n\r\n            // Add  vertex\r\n            positions.push(position.x, position.y, position.z);\r\n            normals.push(0, 0, 0);\r\n            uvs.push(col / options.subdivisions, 1.0 - row / options.subdivisions);\r\n        }\r\n    }\r\n\r\n    // Indices\r\n    for (row = 0; row < options.subdivisions; row++) {\r\n        for (col = 0; col < options.subdivisions; col++) {\r\n            // Calculate Indices\r\n            const idx1 = col + 1 + (row + 1) * (options.subdivisions + 1);\r\n            const idx2 = col + 1 + row * (options.subdivisions + 1);\r\n            const idx3 = col + row * (options.subdivisions + 1);\r\n            const idx4 = col + (row + 1) * (options.subdivisions + 1);\r\n\r\n            // Check that all indices are visible (based on our special height)\r\n            // Only display the vertex if all Indices are visible\r\n            // Positions are stored x,y,z for each vertex, hence the * 3 and + 1 for height\r\n            const isVisibleIdx1 = positions[idx1 * 3 + 1] >= options.minHeight;\r\n            const isVisibleIdx2 = positions[idx2 * 3 + 1] >= options.minHeight;\r\n            const isVisibleIdx3 = positions[idx3 * 3 + 1] >= options.minHeight;\r\n            if (isVisibleIdx1 && isVisibleIdx2 && isVisibleIdx3) {\r\n                indices.push(idx1);\r\n                indices.push(idx2);\r\n                indices.push(idx3);\r\n            }\r\n\r\n            const isVisibleIdx4 = positions[idx4 * 3 + 1] >= options.minHeight;\r\n            if (isVisibleIdx4 && isVisibleIdx1 && isVisibleIdx3) {\r\n                indices.push(idx4);\r\n                indices.push(idx1);\r\n                indices.push(idx3);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Normals\r\n    VertexData.ComputeNormals(positions, indices, normals);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a ground mesh\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.width set the width size (float, default 1)\r\n * @param options.height set the height size (float, default 1)\r\n * @param options.subdivisions sets the number of subdivision per side (default 1)\r\n * @param options.subdivisionsX sets the number of subdivision on the X axis (overrides subdivisions)\r\n * @param options.subdivisionsY sets the number of subdivision on the Y axis (overrides subdivisions)\r\n * @param options.updatable defines if the mesh must be flagged as updatable (default false)\r\n * @param scene defines the hosting scene\r\n * @returns the ground mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#ground\r\n */\r\nexport function CreateGround(\r\n    name: string,\r\n    options: { width?: number; height?: number; subdivisions?: number; subdivisionsX?: number; subdivisionsY?: number; updatable?: boolean } = {},\r\n    scene?: Scene\r\n): GroundMesh {\r\n    const ground = new GroundMesh(name, scene);\r\n    ground._setReady(false);\r\n    ground._subdivisionsX = options.subdivisionsX || options.subdivisions || 1;\r\n    ground._subdivisionsY = options.subdivisionsY || options.subdivisions || 1;\r\n    ground._width = options.width || 1;\r\n    ground._height = options.height || 1;\r\n    ground._maxX = ground._width / 2;\r\n    ground._maxZ = ground._height / 2;\r\n    ground._minX = -ground._maxX;\r\n    ground._minZ = -ground._maxZ;\r\n\r\n    const vertexData = CreateGroundVertexData(options);\r\n\r\n    vertexData.applyToMesh(ground, options.updatable);\r\n\r\n    ground._setReady(true);\r\n\r\n    return ground;\r\n}\r\n\r\n/**\r\n * Creates a tiled ground mesh\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.xmin ground minimum X coordinate (float, default -1)\r\n * @param options.zmin ground minimum Z coordinate (float, default -1)\r\n * @param options.xmax ground maximum X coordinate (float, default 1)\r\n * @param options.zmax ground maximum Z coordinate (float, default 1)\r\n * @param options.subdivisions a javascript object `{w: positive integer, h: positive integer}` (default `{w: 6, h: 6}`). `w` and `h` are the numbers of subdivisions on the ground width and height. Each subdivision is called a tile\r\n * @param options.subdivisions.w positive integer, default 6\r\n * @param options.subdivisions.h positive integer, default 6\r\n * @param options.precision a javascript object `{w: positive integer, h: positive integer}` (default `{w: 2, h: 2}`). `w` and `h` are the numbers of subdivisions on the ground width and height of each tile\r\n * @param options.precision.w positive integer, default 2\r\n * @param options.precision.h positive integer, default 2\r\n * @param options.updatable boolean, default false, true if the mesh must be flagged as updatable\r\n * @param scene defines the hosting scene\r\n * @returns the tiled ground mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#tiled-ground\r\n */\r\nexport function CreateTiledGround(\r\n    name: string,\r\n    options: { xmin: number; zmin: number; xmax: number; zmax: number; subdivisions?: { w: number; h: number }; precision?: { w: number; h: number }; updatable?: boolean },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const tiledGround = new Mesh(name, scene);\r\n\r\n    const vertexData = CreateTiledGroundVertexData(options);\r\n\r\n    vertexData.applyToMesh(tiledGround, options.updatable);\r\n\r\n    return tiledGround;\r\n}\r\n\r\n/**\r\n * Creates a ground mesh from a height map. The height map download can take some frames,\r\n * so the mesh is not immediately ready. To wait for the mesh to be completely built,\r\n * you should use the `onReady` callback option.\r\n * @param name defines the name of the mesh\r\n * @param url sets the URL of the height map image resource.\r\n * @param options defines the options used to create the mesh\r\n * @param options.width sets the ground width size (positive float, default 10)\r\n * @param options.height sets the ground height size (positive float, default 10)\r\n * @param options.subdivisions sets the number of subdivision per side (positive integer, default 1)\r\n * @param options.minHeight is the minimum altitude on the ground (float, default 0)\r\n * @param options.maxHeight is the maximum altitude on the ground (float, default 1)\r\n * @param options.colorFilter is the filter to apply to the image pixel colors to compute the height (optional Color3, default (0.3, 0.59, 0.11) )\r\n * @param options.alphaFilter will filter any data where the alpha channel is below this value, defaults 0 (all data visible)\r\n * @param options.updatable defines if the mesh must be flagged as updatable\r\n * @param options.onReady is a javascript callback function that will be called once the mesh is just built (the height map download can last some time)\r\n * @param options.onError is a javascript callback function that will be called if there is an error\r\n * @param options.passHeightBufferInCallback a boolean that indicates if the calculated height data will be passed in the onReady callback. Useful if you need the height data for physics, for example.\r\n * @param scene defines the hosting scene\r\n * @returns the ground mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set/height_map\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#ground-from-a-height-map\r\n */\r\nexport function CreateGroundFromHeightMap(\r\n    name: string,\r\n    url: string | { data: Uint8Array; width: number; height: number },\r\n    options: {\r\n        width?: number;\r\n        height?: number;\r\n        subdivisions?: number;\r\n        minHeight?: number;\r\n        maxHeight?: number;\r\n        colorFilter?: Color3;\r\n        alphaFilter?: number;\r\n        updatable?: boolean;\r\n        onReady?: (mesh: GroundMesh, heightBuffer?: Float32Array) => void;\r\n        onError?: (message?: string, exception?: any) => void;\r\n        passHeightBufferInCallback?: boolean;\r\n    } = {},\r\n    scene: Nullable<Scene> = null\r\n): GroundMesh {\r\n    const width = options.width || 10.0;\r\n    const height = options.height || 10.0;\r\n    const subdivisions = options.subdivisions || 1 | 0;\r\n    const minHeight = options.minHeight || 0.0;\r\n    const maxHeight = options.maxHeight || 1.0;\r\n    const filter = options.colorFilter || new Color3(0.3, 0.59, 0.11);\r\n    const alphaFilter = options.alphaFilter || 0.0;\r\n    const updatable = options.updatable;\r\n    const onReady = options.onReady;\r\n\r\n    scene = scene || EngineStore.LastCreatedScene!;\r\n\r\n    const ground = new GroundMesh(name, scene);\r\n    ground._subdivisionsX = subdivisions;\r\n    ground._subdivisionsY = subdivisions;\r\n    ground._width = width;\r\n    ground._height = height;\r\n    ground._maxX = ground._width / 2.0;\r\n    ground._maxZ = ground._height / 2.0;\r\n    ground._minX = -ground._maxX;\r\n    ground._minZ = -ground._maxZ;\r\n\r\n    ground._setReady(false);\r\n\r\n    let heightBuffer: Float32Array;\r\n    if (options.passHeightBufferInCallback) {\r\n        heightBuffer = new Float32Array((subdivisions + 1) * (subdivisions + 1));\r\n    }\r\n\r\n    const onBufferLoaded = (buffer: Uint8Array, bufferWidth: number, bufferHeight: number) => {\r\n        const vertexData = CreateGroundFromHeightMapVertexData({\r\n            width: width,\r\n            height: height,\r\n            subdivisions: subdivisions,\r\n            minHeight: minHeight,\r\n            maxHeight: maxHeight,\r\n            colorFilter: filter,\r\n            buffer: buffer,\r\n            bufferWidth: bufferWidth,\r\n            bufferHeight: bufferHeight,\r\n            alphaFilter: alphaFilter,\r\n            heightBuffer,\r\n        });\r\n\r\n        vertexData.applyToMesh(ground, updatable);\r\n\r\n        //execute ready callback, if set\r\n        if (onReady) {\r\n            onReady(ground, heightBuffer);\r\n        }\r\n\r\n        ground._setReady(true);\r\n    };\r\n\r\n    if (typeof url === \"string\") {\r\n        const onload = (img: HTMLImageElement | ImageBitmap) => {\r\n            const bufferWidth = img.width;\r\n            const bufferHeight = img.height;\r\n\r\n            if (scene.isDisposed) {\r\n                return;\r\n            }\r\n\r\n            const buffer = scene?.getEngine().resizeImageBitmap(img, bufferWidth, bufferHeight);\r\n\r\n            onBufferLoaded(buffer, bufferWidth, bufferHeight);\r\n        };\r\n\r\n        Tools.LoadImage(url, onload, options.onError ? options.onError : () => {}, scene.offlineProvider);\r\n    } else {\r\n        onBufferLoaded(url.data, url.width, url.height);\r\n    }\r\n\r\n    return ground;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the functions directly from the module\r\n */\r\nexport const GroundBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateGround,\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateGroundFromHeightMap,\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateTiledGround,\r\n};\r\n\r\nVertexData.CreateGround = CreateGroundVertexData;\r\nVertexData.CreateTiledGround = CreateTiledGroundVertexData;\r\nVertexData.CreateGroundFromHeightMap = CreateGroundFromHeightMapVertexData;\r\n\r\nMesh.CreateGround = (name: string, width: number, height: number, subdivisions: number, scene?: Scene, updatable?: boolean): Mesh => {\r\n    const options = {\r\n        width,\r\n        height,\r\n        subdivisions,\r\n        updatable,\r\n    };\r\n\r\n    return CreateGround(name, options, scene);\r\n};\r\n\r\nMesh.CreateTiledGround = (\r\n    name: string,\r\n    xmin: number,\r\n    zmin: number,\r\n    xmax: number,\r\n    zmax: number,\r\n    subdivisions: { w: number; h: number },\r\n    precision: { w: number; h: number },\r\n    scene: Scene,\r\n    updatable?: boolean\r\n): Mesh => {\r\n    const options = {\r\n        xmin,\r\n        zmin,\r\n        xmax,\r\n        zmax,\r\n        subdivisions,\r\n        precision,\r\n        updatable,\r\n    };\r\n\r\n    return CreateTiledGround(name, options, scene);\r\n};\r\n\r\nMesh.CreateGroundFromHeightMap = (\r\n    name: string,\r\n    url: string,\r\n    width: number,\r\n    height: number,\r\n    subdivisions: number,\r\n    minHeight: number,\r\n    maxHeight: number,\r\n    scene: Scene,\r\n    updatable?: boolean,\r\n    onReady?: (mesh: GroundMesh) => void,\r\n    alphaFilter?: number\r\n): GroundMesh => {\r\n    const options = {\r\n        width,\r\n        height,\r\n        subdivisions,\r\n        minHeight,\r\n        maxHeight,\r\n        updatable,\r\n        onReady,\r\n        alphaFilter,\r\n    };\r\n\r\n    return CreateGroundFromHeightMap(name, url, options, scene);\r\n};\r\n", "import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, Vector4 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\nimport { CreateGroundVertexData } from \"./groundBuilder\";\r\n\r\n/**\r\n * Creates the VertexData for a box\r\n * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n * * size sets the width, height and depth of the box to the value of size, optional default 1\r\n * * width sets the width (x direction) of the box, overwrites the width set by size, optional, default size\r\n * * height sets the height (y direction) of the box, overwrites the height set by size, optional, default size\r\n * * depth sets the depth (z direction) of the box, overwrites the depth set by size, optional, default size\r\n * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @returns the VertexData of the box\r\n */\r\nexport function CreateBoxVertexData(options: {\r\n    size?: number;\r\n    width?: number;\r\n    height?: number;\r\n    depth?: number;\r\n    faceUV?: Vector4[];\r\n    faceColors?: Color4[];\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n    wrap?: boolean;\r\n    topBaseAt?: number;\r\n    bottomBaseAt?: number;\r\n}): VertexData {\r\n    const nbFaces = 6;\r\n    let indices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];\r\n    const normals = [\r\n        0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0,\r\n        1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,\r\n    ];\r\n    const uvs = [];\r\n    let positions = [];\r\n    const width = options.width || options.size || 1;\r\n    const height = options.height || options.size || 1;\r\n    const depth = options.depth || options.size || 1;\r\n    const wrap = options.wrap || false;\r\n    let topBaseAt = options.topBaseAt === void 0 ? 1 : options.topBaseAt;\r\n    let bottomBaseAt = options.bottomBaseAt === void 0 ? 0 : options.bottomBaseAt;\r\n    topBaseAt = (topBaseAt + 4) % 4; // places values as 0 to 3\r\n    bottomBaseAt = (bottomBaseAt + 4) % 4; // places values as 0 to 3\r\n    const topOrder = [2, 0, 3, 1];\r\n    const bottomOrder = [2, 0, 1, 3];\r\n    let topIndex = topOrder[topBaseAt];\r\n    let bottomIndex = bottomOrder[bottomBaseAt];\r\n    let basePositions = [\r\n        1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1,\r\n        1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1,\r\n    ];\r\n    if (wrap) {\r\n        indices = [2, 3, 0, 2, 0, 1, 4, 5, 6, 4, 6, 7, 9, 10, 11, 9, 11, 8, 12, 14, 15, 12, 13, 14];\r\n        basePositions = [\r\n            -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1,\r\n        ];\r\n        let topFaceBase: any = [\r\n            [1, 1, 1],\r\n            [-1, 1, 1],\r\n            [-1, 1, -1],\r\n            [1, 1, -1],\r\n        ];\r\n        let bottomFaceBase: any = [\r\n            [-1, -1, 1],\r\n            [1, -1, 1],\r\n            [1, -1, -1],\r\n            [-1, -1, -1],\r\n        ];\r\n        const topFaceOrder: any = [17, 18, 19, 16];\r\n        const bottomFaceOrder: any = [22, 23, 20, 21];\r\n        while (topIndex > 0) {\r\n            topFaceBase.unshift(topFaceBase.pop());\r\n            topFaceOrder.unshift(topFaceOrder.pop());\r\n            topIndex--;\r\n        }\r\n        while (bottomIndex > 0) {\r\n            bottomFaceBase.unshift(bottomFaceBase.pop());\r\n            bottomFaceOrder.unshift(bottomFaceOrder.pop());\r\n            bottomIndex--;\r\n        }\r\n        topFaceBase = topFaceBase.flat();\r\n        bottomFaceBase = bottomFaceBase.flat();\r\n        basePositions = basePositions.concat(topFaceBase).concat(bottomFaceBase);\r\n        indices.push(topFaceOrder[0], topFaceOrder[2], topFaceOrder[3], topFaceOrder[0], topFaceOrder[1], topFaceOrder[2]);\r\n        indices.push(bottomFaceOrder[0], bottomFaceOrder[2], bottomFaceOrder[3], bottomFaceOrder[0], bottomFaceOrder[1], bottomFaceOrder[2]);\r\n    }\r\n    const scaleArray = [width / 2, height / 2, depth / 2];\r\n    positions = basePositions.reduce((accumulator: Array<number>, currentValue, currentIndex) => accumulator.concat(currentValue * scaleArray[currentIndex % 3]), []);\r\n\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    const faceUV: Vector4[] = options.faceUV || new Array<Vector4>(6);\r\n    const faceColors = options.faceColors;\r\n    const colors = [];\r\n\r\n    // default face colors and UV if undefined\r\n    for (let f = 0; f < 6; f++) {\r\n        if (faceUV[f] === undefined) {\r\n            faceUV[f] = new Vector4(0, 0, 1, 1);\r\n        }\r\n        if (faceColors && faceColors[f] === undefined) {\r\n            faceColors[f] = new Color4(1, 1, 1, 1);\r\n        }\r\n    }\r\n\r\n    // Create each face in turn.\r\n    for (let index = 0; index < nbFaces; index++) {\r\n        uvs.push(faceUV[index].z, useOpenGLOrientationForUV ? 1.0 - faceUV[index].w : faceUV[index].w);\r\n        uvs.push(faceUV[index].x, useOpenGLOrientationForUV ? 1.0 - faceUV[index].w : faceUV[index].w);\r\n        uvs.push(faceUV[index].x, useOpenGLOrientationForUV ? 1.0 - faceUV[index].y : faceUV[index].y);\r\n        uvs.push(faceUV[index].z, useOpenGLOrientationForUV ? 1.0 - faceUV[index].y : faceUV[index].y);\r\n        if (faceColors) {\r\n            for (let c = 0; c < 4; c++) {\r\n                colors.push(faceColors[index].r, faceColors[index].g, faceColors[index].b, faceColors[index].a);\r\n            }\r\n        }\r\n    }\r\n\r\n    // sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    if (faceColors) {\r\n        const totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\r\n        vertexData.colors = totalColors;\r\n    }\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates the VertexData for a segmented box\r\n * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n * * size sets the width, height and depth of the box to the value of size, optional default 1\r\n * * width sets the width (x direction) of the box, overwrites the width set by size, optional, default size\r\n * * height sets the height (y direction) of the box, overwrites the height set by size, optional, default size\r\n * * depth sets the depth (z direction) of the box, overwrites the depth set by size, optional, default size\r\n * * segments sets the number of segments on the all axis (1 by default)\r\n * * widthSegments sets the number of segments on the x axis (1 by default)\r\n * * heightSegments sets the number of segments on the y axis (1 by default)\r\n * * depthSegments sets the number of segments on the z axis (1 by default)\r\n * @returns the VertexData of the box\r\n */\r\nexport function CreateSegmentedBoxVertexData(options: {\r\n    size?: number;\r\n    width?: number;\r\n    height?: number;\r\n    depth?: number;\r\n    segments?: number;\r\n    widthSegments?: number;\r\n    heightSegments?: number;\r\n    depthSegments?: number;\r\n}): VertexData {\r\n    const width = options.width || options.size || 1;\r\n    const height = options.height || options.size || 1;\r\n    const depth = options.depth || options.size || 1;\r\n    const widthSegments = (options.widthSegments || options.segments || 1) | 0;\r\n    const heightSegments = (options.heightSegments || options.segments || 1) | 0;\r\n    const depthSegments = (options.depthSegments || options.segments || 1) | 0;\r\n    const rotationMatrix = new Matrix();\r\n    const translationMatrix = new Matrix();\r\n    const transformMatrix = new Matrix();\r\n\r\n    const bottomPlane = CreateGroundVertexData({ width: width, height: depth, subdivisionsX: widthSegments, subdivisionsY: depthSegments });\r\n    Matrix.TranslationToRef(0, -height / 2, 0, translationMatrix);\r\n    Matrix.RotationZToRef(Math.PI, rotationMatrix);\r\n    rotationMatrix.multiplyToRef(translationMatrix, transformMatrix);\r\n    bottomPlane.transform(transformMatrix);\r\n\r\n    const topPlane = CreateGroundVertexData({ width: width, height: depth, subdivisionsX: widthSegments, subdivisionsY: depthSegments });\r\n    Matrix.TranslationToRef(0, height / 2, 0, transformMatrix);\r\n    topPlane.transform(transformMatrix);\r\n\r\n    const negXPlane = CreateGroundVertexData({ width: height, height: depth, subdivisionsX: heightSegments, subdivisionsY: depthSegments });\r\n    Matrix.TranslationToRef(-width / 2, 0, 0, translationMatrix);\r\n    Matrix.RotationZToRef(Math.PI / 2, rotationMatrix);\r\n    rotationMatrix.multiplyToRef(translationMatrix, transformMatrix);\r\n    negXPlane.transform(transformMatrix);\r\n\r\n    const posXPlane = CreateGroundVertexData({ width: height, height: depth, subdivisionsX: heightSegments, subdivisionsY: depthSegments });\r\n    Matrix.TranslationToRef(width / 2, 0, 0, translationMatrix);\r\n    Matrix.RotationZToRef(-Math.PI / 2, rotationMatrix);\r\n    rotationMatrix.multiplyToRef(translationMatrix, transformMatrix);\r\n    posXPlane.transform(transformMatrix);\r\n\r\n    const negZPlane = CreateGroundVertexData({ width: width, height: height, subdivisionsX: widthSegments, subdivisionsY: heightSegments });\r\n    Matrix.TranslationToRef(0, 0, -depth / 2, translationMatrix);\r\n    Matrix.RotationXToRef(-Math.PI / 2, rotationMatrix);\r\n    rotationMatrix.multiplyToRef(translationMatrix, transformMatrix);\r\n    negZPlane.transform(transformMatrix);\r\n\r\n    const posZPlane = CreateGroundVertexData({ width: width, height: height, subdivisionsX: widthSegments, subdivisionsY: heightSegments });\r\n    Matrix.TranslationToRef(0, 0, depth / 2, translationMatrix);\r\n    Matrix.RotationXToRef(Math.PI / 2, rotationMatrix);\r\n    rotationMatrix.multiplyToRef(translationMatrix, transformMatrix);\r\n    posZPlane.transform(transformMatrix);\r\n\r\n    // Result\r\n    bottomPlane.merge([topPlane, posXPlane, negXPlane, negZPlane, posZPlane], true);\r\n\r\n    return bottomPlane;\r\n}\r\n\r\n/**\r\n * Creates a box mesh\r\n * * The parameter `size` sets the size (float) of each box side (default 1)\r\n * * You can set some different box dimensions by using the parameters `width`, `height` and `depth` (all by default have the same value of `size`)\r\n * * You can set different colors and different images to each box side by using the parameters `faceColors` (an array of 6 Color3 elements) and `faceUV` (an array of 6 Vector4 elements)\r\n * * Please read this tutorial : https://doc.babylonjs.com/features/featuresDeepDive/materials/using/texturePerBoxFace\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#box\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the box mesh\r\n */\r\nexport function CreateBox(\r\n    name: string,\r\n    options: {\r\n        size?: number;\r\n        width?: number;\r\n        height?: number;\r\n        depth?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        wrap?: boolean;\r\n        topBaseAt?: number;\r\n        bottomBaseAt?: number;\r\n        updatable?: boolean;\r\n    } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const box = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    box._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateBoxVertexData(options);\r\n\r\n    vertexData.applyToMesh(box, options.updatable);\r\n\r\n    return box;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated please use CreateBox directly\r\n */\r\nexport const BoxBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateBox,\r\n};\r\n\r\n// Side effects\r\nVertexData.CreateBox = CreateBoxVertexData;\r\n\r\nMesh.CreateBox = (name: string, size: number, scene: Nullable<Scene> = null, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        size,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateBox(name, options, scene);\r\n};\r\n", "import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\n\r\n/**\r\n * Creates the VertexData for a tiled plane\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set/tiled_plane\r\n * @param options an object used to set the following optional parameters for the tiled plane, required but can be empty\r\n * * pattern a limited pattern arrangement depending on the number\r\n * * size of the box\r\n * * width of the box, overwrites size\r\n * * height of the box, overwrites size\r\n * * tileSize sets the width, height and depth of the tile to the value of size, optional default 1\r\n * * tileWidth sets the width (x direction) of the tile, overwrites the width set by size, optional, default size\r\n * * tileHeight sets the height (y direction) of the tile, overwrites the height set by size, optional, default size\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * alignHorizontal places whole tiles aligned to the center, left or right of a row\r\n * * alignVertical places whole tiles aligned to the center, left or right of a column\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.pattern\r\n * @param options.tileSize\r\n * @param options.tileWidth\r\n * @param options.tileHeight\r\n * @param options.size\r\n * @param options.width\r\n * @param options.height\r\n * @param options.alignHorizontal\r\n * @param options.alignVertical\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @returns the VertexData of the tiled plane\r\n */\r\nexport function CreateTiledPlaneVertexData(options: {\r\n    pattern?: number;\r\n    tileSize?: number;\r\n    tileWidth?: number;\r\n    tileHeight?: number;\r\n    size?: number;\r\n    width?: number;\r\n    height?: number;\r\n    alignHorizontal?: number;\r\n    alignVertical?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n}): VertexData {\r\n    const flipTile = options.pattern || Mesh.NO_FLIP;\r\n    const tileWidth = options.tileWidth || options.tileSize || 1;\r\n    const tileHeight = options.tileHeight || options.tileSize || 1;\r\n    const alignH = options.alignHorizontal || 0;\r\n    const alignV = options.alignVertical || 0;\r\n\r\n    const width = options.width || options.size || 1;\r\n    const tilesX = Math.floor(width / tileWidth);\r\n    let offsetX = width - tilesX * tileWidth;\r\n\r\n    const height = options.height || options.size || 1;\r\n    const tilesY = Math.floor(height / tileHeight);\r\n    let offsetY = height - tilesY * tileHeight;\r\n\r\n    const halfWidth = (tileWidth * tilesX) / 2;\r\n    const halfHeight = (tileHeight * tilesY) / 2;\r\n\r\n    let adjustX = 0;\r\n    let adjustY = 0;\r\n    let startX = 0;\r\n    let startY = 0;\r\n    let endX = 0;\r\n    let endY = 0;\r\n\r\n    //Part Tiles\r\n    if (offsetX > 0 || offsetY > 0) {\r\n        startX = -halfWidth;\r\n        startY = -halfHeight;\r\n        endX = halfWidth;\r\n        endY = halfHeight;\r\n\r\n        switch (alignH) {\r\n            case Mesh.CENTER:\r\n                offsetX /= 2;\r\n                startX -= offsetX;\r\n                endX += offsetX;\r\n                break;\r\n            case Mesh.LEFT:\r\n                endX += offsetX;\r\n                adjustX = -offsetX / 2;\r\n                break;\r\n            case Mesh.RIGHT:\r\n                startX -= offsetX;\r\n                adjustX = offsetX / 2;\r\n                break;\r\n        }\r\n\r\n        switch (alignV) {\r\n            case Mesh.CENTER:\r\n                offsetY /= 2;\r\n                startY -= offsetY;\r\n                endY += offsetY;\r\n                break;\r\n            case Mesh.BOTTOM:\r\n                endY += offsetY;\r\n                adjustY = -offsetY / 2;\r\n                break;\r\n            case Mesh.TOP:\r\n                startY -= offsetY;\r\n                adjustY = offsetY / 2;\r\n                break;\r\n        }\r\n    }\r\n\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvBase = [];\r\n    uvBase[0] = [0, 0, 1, 0, 1, 1, 0, 1];\r\n    uvBase[1] = [0, 0, 1, 0, 1, 1, 0, 1];\r\n    if (flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.ROTATE_ROW) {\r\n        uvBase[1] = [1, 1, 0, 1, 0, 0, 1, 0];\r\n    }\r\n    if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.FLIP_ROW) {\r\n        uvBase[1] = [1, 0, 0, 0, 0, 1, 1, 1];\r\n    }\r\n    if (flipTile === Mesh.FLIP_N_ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n        uvBase[1] = [0, 1, 1, 1, 1, 0, 0, 0];\r\n    }\r\n    let uvs: Array<number> = [];\r\n    const colors = [];\r\n    const indices = [];\r\n    let index = 0;\r\n    for (let y = 0; y < tilesY; y++) {\r\n        for (let x = 0; x < tilesX; x++) {\r\n            positions.push(-halfWidth + x * tileWidth + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\r\n            positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\r\n            positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\r\n            positions.push(-halfWidth + x * tileWidth + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\r\n            indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n            if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_TILE) {\r\n                uvs = uvs.concat(uvBase[((x % 2) + (y % 2)) % 2]);\r\n            } else if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                uvs = uvs.concat(uvBase[y % 2]);\r\n            } else {\r\n                uvs = uvs.concat(uvBase[0]);\r\n            }\r\n            colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n            normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n            index += 4;\r\n        }\r\n    }\r\n\r\n    //Part Tiles\r\n    if (offsetX > 0 || offsetY > 0) {\r\n        const partialBottomRow: boolean = offsetY > 0 && (alignV === Mesh.CENTER || alignV === Mesh.TOP);\r\n        const partialTopRow: boolean = offsetY > 0 && (alignV === Mesh.CENTER || alignV === Mesh.BOTTOM);\r\n        const partialLeftCol: boolean = offsetX > 0 && (alignH === Mesh.CENTER || alignH === Mesh.RIGHT);\r\n        const partialRightCol: boolean = offsetX > 0 && (alignH === Mesh.CENTER || alignH === Mesh.LEFT);\r\n        let uvPart: Array<number> = [];\r\n        let a, b, c, d: number;\r\n\r\n        //corners\r\n        if (partialBottomRow && partialLeftCol) {\r\n            //bottom left corner\r\n            positions.push(startX + adjustX, startY + adjustY, 0);\r\n            positions.push(-halfWidth + adjustX, startY + adjustY, 0);\r\n            positions.push(-halfWidth + adjustX, startY + offsetY + adjustY, 0);\r\n            positions.push(startX + adjustX, startY + offsetY + adjustY, 0);\r\n            indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n            index += 4;\r\n            a = 1 - offsetX / tileWidth;\r\n            b = 1 - offsetY / tileHeight;\r\n            c = 1;\r\n            d = 1;\r\n            uvPart = [a, b, c, b, c, d, a, d];\r\n            if (flipTile === Mesh.ROTATE_ROW) {\r\n                uvPart = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_ROW) {\r\n                uvPart = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                uvPart = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            uvs = uvs.concat(uvPart);\r\n            colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n            normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n        }\r\n\r\n        if (partialBottomRow && partialRightCol) {\r\n            //bottom right corner\r\n            positions.push(halfWidth + adjustX, startY + adjustY, 0);\r\n            positions.push(endX + adjustX, startY + adjustY, 0);\r\n            positions.push(endX + adjustX, startY + offsetY + adjustY, 0);\r\n            positions.push(halfWidth + adjustX, startY + offsetY + adjustY, 0);\r\n            indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n            index += 4;\r\n            a = 0;\r\n            b = 1 - offsetY / tileHeight;\r\n            c = offsetX / tileWidth;\r\n            d = 1;\r\n            uvPart = [a, b, c, b, c, d, a, d];\r\n            if (flipTile === Mesh.ROTATE_ROW || (flipTile === Mesh.ROTATE_TILE && tilesX % 2 === 0)) {\r\n                uvPart = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_ROW || (flipTile === Mesh.FLIP_TILE && tilesX % 2 === 0)) {\r\n                uvPart = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_N_ROTATE_ROW || (flipTile === Mesh.FLIP_N_ROTATE_TILE && tilesX % 2 === 0)) {\r\n                uvPart = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            uvs = uvs.concat(uvPart);\r\n            colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n            normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n        }\r\n\r\n        if (partialTopRow && partialLeftCol) {\r\n            //top left corner\r\n            positions.push(startX + adjustX, halfHeight + adjustY, 0);\r\n            positions.push(-halfWidth + adjustX, halfHeight + adjustY, 0);\r\n            positions.push(-halfWidth + adjustX, endY + adjustY, 0);\r\n            positions.push(startX + adjustX, endY + adjustY, 0);\r\n            indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n            index += 4;\r\n            a = 1 - offsetX / tileWidth;\r\n            b = 0;\r\n            c = 1;\r\n            d = offsetY / tileHeight;\r\n            uvPart = [a, b, c, b, c, d, a, d];\r\n            if ((flipTile === Mesh.ROTATE_ROW && tilesY % 2 === 1) || (flipTile === Mesh.ROTATE_TILE && tilesY % 1 === 0)) {\r\n                uvPart = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if ((flipTile === Mesh.FLIP_ROW && tilesY % 2 === 1) || (flipTile === Mesh.FLIP_TILE && tilesY % 2 === 0)) {\r\n                uvPart = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if ((flipTile === Mesh.FLIP_N_ROTATE_ROW && tilesY % 2 === 1) || (flipTile === Mesh.FLIP_N_ROTATE_TILE && tilesY % 2 === 0)) {\r\n                uvPart = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            uvs = uvs.concat(uvPart);\r\n            colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n            normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n        }\r\n\r\n        if (partialTopRow && partialRightCol) {\r\n            //top right corner\r\n            positions.push(halfWidth + adjustX, halfHeight + adjustY, 0);\r\n            positions.push(endX + adjustX, halfHeight + adjustY, 0);\r\n            positions.push(endX + adjustX, endY + adjustY, 0);\r\n            positions.push(halfWidth + adjustX, endY + adjustY, 0);\r\n            indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n            index += 4;\r\n            a = 0;\r\n            b = 0;\r\n            c = offsetX / tileWidth;\r\n            d = offsetY / tileHeight;\r\n            uvPart = [a, b, c, b, c, d, a, d];\r\n            if ((flipTile === Mesh.ROTATE_ROW && tilesY % 2 === 1) || (flipTile === Mesh.ROTATE_TILE && (tilesY + tilesX) % 2 === 1)) {\r\n                uvPart = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if ((flipTile === Mesh.FLIP_ROW && tilesY % 2 === 1) || (flipTile === Mesh.FLIP_TILE && (tilesY + tilesX) % 2 === 1)) {\r\n                uvPart = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if ((flipTile === Mesh.FLIP_N_ROTATE_ROW && tilesY % 2 === 1) || (flipTile === Mesh.FLIP_N_ROTATE_TILE && (tilesY + tilesX) % 2 === 1)) {\r\n                uvPart = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            uvs = uvs.concat(uvPart);\r\n            colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n            normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n        }\r\n\r\n        //part rows\r\n        if (partialBottomRow) {\r\n            const uvBaseBR = [];\r\n            a = 0;\r\n            b = 1 - offsetY / tileHeight;\r\n            c = 1;\r\n            d = 1;\r\n            uvBaseBR[0] = [a, b, c, b, c, d, a, d];\r\n            uvBaseBR[1] = [a, b, c, b, c, d, a, d];\r\n            if (flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.ROTATE_ROW) {\r\n                uvBaseBR[1] = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.FLIP_ROW) {\r\n                uvBaseBR[1] = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_N_ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                uvBaseBR[1] = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            for (let x = 0; x < tilesX; x++) {\r\n                positions.push(-halfWidth + x * tileWidth + adjustX, startY + adjustY, 0);\r\n                positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, startY + adjustY, 0);\r\n                positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, startY + offsetY + adjustY, 0);\r\n                positions.push(-halfWidth + x * tileWidth + adjustX, startY + offsetY + adjustY, 0);\r\n                indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n                index += 4;\r\n                if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_TILE) {\r\n                    uvs = uvs.concat(uvBaseBR[(x + 1) % 2]);\r\n                } else if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                    uvs = uvs.concat(uvBaseBR[1]);\r\n                } else {\r\n                    uvs = uvs.concat(uvBaseBR[0]);\r\n                }\r\n                colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n                normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n            }\r\n        }\r\n\r\n        if (partialTopRow) {\r\n            const uvBaseTR = [];\r\n            a = 0;\r\n            b = 0;\r\n            c = 1;\r\n            d = offsetY / tileHeight;\r\n            uvBaseTR[0] = [a, b, c, b, c, d, a, d];\r\n            uvBaseTR[1] = [a, b, c, b, c, d, a, d];\r\n            if (flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.ROTATE_ROW) {\r\n                uvBaseTR[1] = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.FLIP_ROW) {\r\n                uvBaseTR[1] = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_N_ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                uvBaseTR[1] = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            for (let x = 0; x < tilesX; x++) {\r\n                positions.push(-halfWidth + x * tileWidth + adjustX, endY - offsetY + adjustY, 0);\r\n                positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, endY - offsetY + adjustY, 0);\r\n                positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, endY + adjustY, 0);\r\n                positions.push(-halfWidth + x * tileWidth + adjustX, endY + adjustY, 0);\r\n                indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n                index += 4;\r\n                if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_TILE) {\r\n                    uvs = uvs.concat(uvBaseTR[(x + tilesY) % 2]);\r\n                } else if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                    uvs = uvs.concat(uvBaseTR[tilesY % 2]);\r\n                } else {\r\n                    uvs = uvs.concat(uvBaseTR[0]);\r\n                }\r\n                colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n                normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n            }\r\n        }\r\n\r\n        if (partialLeftCol) {\r\n            const uvBaseLC = [];\r\n            a = 1 - offsetX / tileWidth;\r\n            b = 0;\r\n            c = 1;\r\n            d = 1;\r\n            uvBaseLC[0] = [a, b, c, b, c, d, a, d];\r\n            uvBaseLC[1] = [a, b, c, b, c, d, a, d];\r\n            if (flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.ROTATE_ROW) {\r\n                uvBaseLC[1] = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.FLIP_ROW) {\r\n                uvBaseLC[1] = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_N_ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                uvBaseLC[1] = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            for (let y = 0; y < tilesY; y++) {\r\n                positions.push(startX + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\r\n                positions.push(startX + offsetX + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\r\n                positions.push(startX + offsetX + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\r\n                positions.push(startX + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\r\n                indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n                index += 4;\r\n                if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_TILE) {\r\n                    uvs = uvs.concat(uvBaseLC[(y + 1) % 2]);\r\n                } else if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                    uvs = uvs.concat(uvBaseLC[y % 2]);\r\n                } else {\r\n                    uvs = uvs.concat(uvBaseLC[0]);\r\n                }\r\n                colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n                normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n            }\r\n        }\r\n\r\n        if (partialRightCol) {\r\n            const uvBaseRC = [];\r\n            a = 0;\r\n            b = 0;\r\n            c = offsetX / tileHeight;\r\n            d = 1;\r\n            uvBaseRC[0] = [a, b, c, b, c, d, a, d];\r\n            uvBaseRC[1] = [a, b, c, b, c, d, a, d];\r\n            if (flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.ROTATE_ROW) {\r\n                uvBaseRC[1] = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.FLIP_ROW) {\r\n                uvBaseRC[1] = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\r\n            }\r\n            if (flipTile === Mesh.FLIP_N_ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                uvBaseRC[1] = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\r\n            }\r\n            for (let y = 0; y < tilesY; y++) {\r\n                positions.push(endX - offsetX + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\r\n                positions.push(endX + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\r\n                positions.push(endX + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\r\n                positions.push(endX - offsetX + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\r\n                indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\r\n                index += 4;\r\n                if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_TILE) {\r\n                    uvs = uvs.concat(uvBaseRC[(y + tilesX) % 2]);\r\n                } else if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\r\n                    uvs = uvs.concat(uvBaseRC[y % 2]);\r\n                } else {\r\n                    uvs = uvs.concat(uvBaseRC[0]);\r\n                }\r\n                colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\r\n                normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\r\n            }\r\n        }\r\n    }\r\n\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    const totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\r\n    vertexData.colors = totalColors;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a tiled plane mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set/tiled_plane\r\n * @param name defines the name of the mesh\r\n * @param options an object used to set the following optional parameters for the tiled plane, required but can be empty\r\n * * pattern a limited pattern arrangement depending on the number\r\n * * size of the box\r\n * * width of the box, overwrites size\r\n * * height of the box, overwrites size\r\n * * tileSize sets the width, height and depth of the tile to the value of size, optional default 1\r\n * * tileWidth sets the width (x direction) of the tile, overwrites the width set by size, optional, default size\r\n * * tileHeight sets the height (y direction) of the tile, overwrites the height set by size, optional, default size\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * alignHorizontal places whole tiles aligned to the center, left or right of a row\r\n * * alignVertical places whole tiles aligned to the center, left or right of a column\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.pattern\r\n * @param options.tileSize\r\n * @param options.tileWidth\r\n * @param options.tileHeight\r\n * @param options.size\r\n * @param options.width\r\n * @param options.height\r\n * @param options.alignHorizontal\r\n * @param options.alignVertical\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.updatable\r\n * @param scene defines the hosting scene\r\n * @returns the box mesh\r\n */\r\nexport function CreateTiledPlane(\r\n    name: string,\r\n    options: {\r\n        pattern?: number;\r\n        tileSize?: number;\r\n        tileWidth?: number;\r\n        tileHeight?: number;\r\n        size?: number;\r\n        width?: number;\r\n        height?: number;\r\n        alignHorizontal?: number;\r\n        alignVertical?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        updatable?: boolean;\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const plane = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    plane._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateTiledPlaneVertexData(options);\r\n\r\n    vertexData.applyToMesh(plane, options.updatable);\r\n\r\n    return plane;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use CreateTiledPlane instead\r\n */\r\nexport const TiledPlaneBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateTiledPlane,\r\n};\r\n\r\nVertexData.CreateTiledPlane = CreateTiledPlaneVertexData;\r\n", "import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, Vector3, Vector4 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { CreateTiledPlaneVertexData } from \"./tiledPlaneBuilder\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\nconst OP_ADD = 1;\r\nconst OP_SUB = -1;\r\n\r\n/**\r\n * Creates the VertexData for a tiled box\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set/tiled_box\r\n * @param options an object used to set the following optional parameters for the tiled box, required but can be empty\r\n * * pattern sets the rotation or reflection pattern for the tiles,\r\n * * size of the box\r\n * * width of the box, overwrites size\r\n * * height of the box, overwrites size\r\n * * depth of the box, overwrites size\r\n * * tileSize sets the size of a tile\r\n * * tileWidth sets the tile width and overwrites tileSize\r\n * * tileHeight sets the tile width and overwrites tileSize\r\n * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n * * faceColors an array of 6 Color4 elements used to set different colors to each box side\r\n * * alignHorizontal places whole tiles aligned to the center, left or right of a row\r\n * * alignVertical places whole tiles aligned to the center, left or right of a column\r\n * @param options.pattern\r\n * @param options.size\r\n * @param options.width\r\n * @param options.height\r\n * @param options.depth\r\n * @param options.tileSize\r\n * @param options.tileWidth\r\n * @param options.tileHeight\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.alignHorizontal\r\n * @param options.alignVertical\r\n * @param options.sideOrientation\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * @returns the VertexData of the TiledBox\r\n */\r\nexport function CreateTiledBoxVertexData(options: {\r\n    pattern?: number;\r\n    size?: number;\r\n    width?: number;\r\n    height?: number;\r\n    depth?: number;\r\n    tileSize?: number;\r\n    tileWidth?: number;\r\n    tileHeight?: number;\r\n    faceUV?: Vector4[];\r\n    faceColors?: Color4[];\r\n    alignHorizontal?: number;\r\n    alignVertical?: number;\r\n    sideOrientation?: number;\r\n}): VertexData {\r\n    const nbFaces = 6;\r\n\r\n    const faceUV: Vector4[] = options.faceUV || new Array<Vector4>(6);\r\n    const faceColors = options.faceColors;\r\n\r\n    const flipTile = options.pattern || Mesh.NO_FLIP;\r\n\r\n    const width = options.width || options.size || 1;\r\n    const height = options.height || options.size || 1;\r\n    const depth = options.depth || options.size || 1;\r\n    const tileWidth = options.tileWidth || options.tileSize || 1;\r\n    const tileHeight = options.tileHeight || options.tileSize || 1;\r\n    const alignH = options.alignHorizontal || 0;\r\n    const alignV = options.alignVertical || 0;\r\n\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // default face colors and UV if undefined\r\n    for (let f = 0; f < nbFaces; f++) {\r\n        if (faceUV[f] === undefined) {\r\n            faceUV[f] = new Vector4(0, 0, 1, 1);\r\n        }\r\n        if (faceColors && faceColors[f] === undefined) {\r\n            faceColors[f] = new Color4(1, 1, 1, 1);\r\n        }\r\n    }\r\n\r\n    const halfWidth = width / 2;\r\n    const halfHeight = height / 2;\r\n    const halfDepth = depth / 2;\r\n\r\n    const faceVertexData: Array<VertexData> = [];\r\n\r\n    for (let f = 0; f < 2; f++) {\r\n        //front and back\r\n        faceVertexData[f] = CreateTiledPlaneVertexData({\r\n            pattern: flipTile,\r\n            tileWidth: tileWidth,\r\n            tileHeight: tileHeight,\r\n            width: width,\r\n            height: height,\r\n            alignVertical: alignV,\r\n            alignHorizontal: alignH,\r\n            sideOrientation: sideOrientation,\r\n        });\r\n    }\r\n\r\n    for (let f = 2; f < 4; f++) {\r\n        //sides\r\n        faceVertexData[f] = CreateTiledPlaneVertexData({\r\n            pattern: flipTile,\r\n            tileWidth: tileWidth,\r\n            tileHeight: tileHeight,\r\n            width: depth,\r\n            height: height,\r\n            alignVertical: alignV,\r\n            alignHorizontal: alignH,\r\n            sideOrientation: sideOrientation,\r\n        });\r\n    }\r\n\r\n    let baseAlignV = alignV;\r\n    if (alignV === Mesh.BOTTOM) {\r\n        baseAlignV = Mesh.TOP;\r\n    } else if (alignV === Mesh.TOP) {\r\n        baseAlignV = Mesh.BOTTOM;\r\n    }\r\n\r\n    for (let f = 4; f < 6; f++) {\r\n        //top and bottom\r\n        faceVertexData[f] = CreateTiledPlaneVertexData({\r\n            pattern: flipTile,\r\n            tileWidth: tileWidth,\r\n            tileHeight: tileHeight,\r\n            width: width,\r\n            height: depth,\r\n            alignVertical: baseAlignV,\r\n            alignHorizontal: alignH,\r\n            sideOrientation: sideOrientation,\r\n        });\r\n    }\r\n\r\n    const positions: Array<number> = [];\r\n    const normals: Array<number> = [];\r\n    let uvs: Array<number> = [];\r\n    let indices: Array<number> = [];\r\n    const colors: Array<number> = [];\r\n    const facePositions: Array<Array<Vector3>> = [];\r\n    const faceNormals: Array<Array<Vector3>> = [];\r\n\r\n    const newFaceUV: Array<Array<number>> = [];\r\n    let lu: number = 0;\r\n\r\n    let li: number = 0;\r\n\r\n    for (let f = 0; f < nbFaces; f++) {\r\n        const len = faceVertexData[f].positions!.length;\r\n        facePositions[f] = [];\r\n        faceNormals[f] = [];\r\n        for (let p = 0; p < len / 3; p++) {\r\n            facePositions[f].push(new Vector3(faceVertexData[f].positions![3 * p], faceVertexData[f].positions![3 * p + 1], faceVertexData[f].positions![3 * p + 2]));\r\n            faceNormals[f].push(new Vector3(faceVertexData[f].normals![3 * p], faceVertexData[f].normals![3 * p + 1], faceVertexData[f].normals![3 * p + 2]));\r\n        }\r\n        // uvs\r\n        lu = faceVertexData[f].uvs!.length;\r\n        newFaceUV[f] = [];\r\n        for (let i = 0; i < lu; i += 2) {\r\n            newFaceUV[f][i] = faceUV[f].x + (faceUV[f].z - faceUV[f].x) * faceVertexData[f].uvs![i];\r\n            newFaceUV[f][i + 1] = faceUV[f].y + (faceUV[f].w - faceUV[f].y) * faceVertexData[f].uvs![i + 1];\r\n\r\n            if (useOpenGLOrientationForUV) {\r\n                newFaceUV[f][i + 1] = 1.0 - newFaceUV[f][i + 1];\r\n            }\r\n        }\r\n        uvs = uvs.concat(newFaceUV[f]);\r\n\r\n        indices = indices.concat(<Array<number>>faceVertexData[f].indices!.map((x: number) => x + li));\r\n        li += facePositions[f].length;\r\n        if (faceColors) {\r\n            const color = faceColors[f];\r\n            for (let p = 0; p < facePositions[f].length; p++) {\r\n                colors.push(color.r, color.g, color.b, color.a);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Define transforms for each face\r\n    const faceTransforms = [\r\n        // FRONT\r\n        { m: Matrix.RotationY(Math.PI), t: new Vector3(0, 0, halfDepth), op: OP_ADD },\r\n        // BACK\r\n        { m: Matrix.Identity(), t: new Vector3(0, 0, halfDepth), op: OP_SUB },\r\n        // RIGHT\r\n        { m: Matrix.RotationY(-Math.PI / 2), t: new Vector3(halfWidth, 0, 0), op: OP_ADD },\r\n        // LEFT\r\n        { m: Matrix.RotationY(Math.PI / 2), t: new Vector3(halfWidth, 0, 0), op: OP_SUB },\r\n        // TOP\r\n        { m: Matrix.RotationX(Math.PI / 2), t: new Vector3(0, halfHeight, 0), op: OP_ADD },\r\n        // BOTTOM\r\n        { m: Matrix.RotationX(-Math.PI / 2), t: new Vector3(0, halfHeight, 0), op: OP_SUB },\r\n    ];\r\n\r\n    // Assemble positions and normals\r\n    for (let f = 0; f < nbFaces; f++) {\r\n        const { m, t, op } = faceTransforms[f];\r\n\r\n        for (const v of facePositions[f]) {\r\n            const p = Vector3.TransformCoordinates(v, m);\r\n            const final = op === OP_ADD ? p.add(t) : p.subtract(t);\r\n            positions.push(final.x, final.y, final.z);\r\n        }\r\n\r\n        for (const n of faceNormals[f]) {\r\n            const nn = Vector3.TransformNormal(n, m);\r\n            normals.push(nn.x, nn.y, nn.z);\r\n        }\r\n    }\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    if (faceColors) {\r\n        const totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\r\n        vertexData.colors = totalColors;\r\n    }\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a tiled box mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set/tiled_box\r\n * @param name defines the name of the mesh\r\n * @param options an object used to set the following optional parameters for the tiled box, required but can be empty\r\n * * pattern sets the rotation or reflection pattern for the tiles,\r\n * * size of the box\r\n * * width of the box, overwrites size\r\n * * height of the box, overwrites size\r\n * * depth of the box, overwrites size\r\n * * tileSize sets the size of a tile\r\n * * tileWidth sets the tile width and overwrites tileSize\r\n * * tileHeight sets the tile width and overwrites tileSize\r\n * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n * * alignHorizontal places whole tiles aligned to the center, left or right of a row\r\n * * alignVertical places whole tiles aligned to the center, left or right of a column\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * @param options.pattern\r\n * @param options.width\r\n * @param options.height\r\n * @param options.depth\r\n * @param options.tileSize\r\n * @param options.tileWidth\r\n * @param options.tileHeight\r\n * @param options.alignHorizontal\r\n * @param options.alignVertical\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.sideOrientation\r\n * @param options.updatable\r\n * @param scene defines the hosting scene\r\n * @returns the box mesh\r\n */\r\nexport function CreateTiledBox(\r\n    name: string,\r\n    options: {\r\n        pattern?: number;\r\n        width?: number;\r\n        height?: number;\r\n        depth?: number;\r\n        tileSize?: number;\r\n        tileWidth?: number;\r\n        tileHeight?: number;\r\n        alignHorizontal?: number;\r\n        alignVertical?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        sideOrientation?: number;\r\n        updatable?: boolean;\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const box = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    box._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateTiledBoxVertexData(options);\r\n\r\n    vertexData.applyToMesh(box, options.updatable);\r\n\r\n    return box;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use CreateTiledBox instead\r\n */\r\nexport const TiledBoxBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateTiledBox,\r\n};\r\n\r\nVertexData.CreateTiledBox = CreateTiledBoxVertexData;\r\n", "import type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Vector3, Matrix } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for an ellipsoid, defaults to a sphere\r\n * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n * * segments sets the number of horizontal strips optional, default 32\r\n * * diameter sets the axes dimensions, diameterX, diameterY and diameterZ to the value of diameter, optional default 1\r\n * * diameterX sets the diameterX (x direction) of the ellipsoid, overwrites the diameterX set by diameter, optional, default diameter\r\n * * diameterY sets the diameterY (y direction) of the ellipsoid, overwrites the diameterY set by diameter, optional, default diameter\r\n * * diameterZ sets the diameterZ (z direction) of the ellipsoid, overwrites the diameterZ set by diameter, optional, default diameter\r\n * * arc a number from 0 to 1, to create an unclosed ellipsoid based on the fraction of the circumference (latitude) given by the arc value, optional, default 1\r\n * * slice a number from 0 to 1, to create an unclosed ellipsoid based on the fraction of the height (latitude) given by the arc value, optional, default 1\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @returns the VertexData of the ellipsoid\r\n */\r\nexport function CreateSphereVertexData(options: {\r\n    segments?: number;\r\n    diameter?: number;\r\n    diameterX?: number;\r\n    diameterY?: number;\r\n    diameterZ?: number;\r\n    arc?: number;\r\n    slice?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n    dedupTopBottomIndices?: boolean;\r\n}): VertexData {\r\n    const segments: number = (options.segments || 32) | 0;\r\n    const diameterX: number = options.diameterX || options.diameter || 1;\r\n    const diameterY: number = options.diameterY || options.diameter || 1;\r\n    const diameterZ: number = options.diameterZ || options.diameter || 1;\r\n    const arc: number = options.arc && (options.arc <= 0 || options.arc > 1) ? 1.0 : options.arc || 1.0;\r\n    const slice: number = options.slice && options.slice <= 0 ? 1.0 : options.slice || 1.0;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n    const dedupTopBottomIndices = !!options.dedupTopBottomIndices;\r\n\r\n    const radius = new Vector3(diameterX / 2, diameterY / 2, diameterZ / 2);\r\n\r\n    const totalZRotationSteps = 2 + segments;\r\n    const totalYRotationSteps = 2 * totalZRotationSteps;\r\n\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n\r\n    for (let zRotationStep = 0; zRotationStep <= totalZRotationSteps; zRotationStep++) {\r\n        const normalizedZ = zRotationStep / totalZRotationSteps;\r\n        const angleZ = normalizedZ * Math.PI * slice;\r\n\r\n        for (let yRotationStep = 0; yRotationStep <= totalYRotationSteps; yRotationStep++) {\r\n            const normalizedY = yRotationStep / totalYRotationSteps;\r\n\r\n            const angleY = normalizedY * Math.PI * 2 * arc;\r\n\r\n            const rotationZ = Matrix.RotationZ(-angleZ);\r\n            const rotationY = Matrix.RotationY(angleY);\r\n            const afterRotZ = Vector3.TransformCoordinates(Vector3.Up(), rotationZ);\r\n            const complete = Vector3.TransformCoordinates(afterRotZ, rotationY);\r\n\r\n            const vertex = complete.multiply(radius);\r\n            const normal = complete.divide(radius).normalize();\r\n\r\n            positions.push(vertex.x, vertex.y, vertex.z);\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            uvs.push(normalizedY, useOpenGLOrientationForUV ? 1.0 - normalizedZ : normalizedZ);\r\n        }\r\n\r\n        if (zRotationStep > 0) {\r\n            const verticesCount = positions.length / 3;\r\n            for (let firstIndex = verticesCount - 2 * (totalYRotationSteps + 1); firstIndex + totalYRotationSteps + 2 < verticesCount; firstIndex++) {\r\n                if (dedupTopBottomIndices) {\r\n                    if (zRotationStep > 1) {\r\n                        indices.push(firstIndex);\r\n                        indices.push(firstIndex + 1);\r\n                        indices.push(firstIndex + totalYRotationSteps + 1);\r\n                    }\r\n                    if (zRotationStep < totalZRotationSteps || slice < 1.0) {\r\n                        indices.push(firstIndex + totalYRotationSteps + 1);\r\n                        indices.push(firstIndex + 1);\r\n                        indices.push(firstIndex + totalYRotationSteps + 2);\r\n                    }\r\n                } else {\r\n                    indices.push(firstIndex);\r\n                    indices.push(firstIndex + 1);\r\n                    indices.push(firstIndex + totalYRotationSteps + 1);\r\n\r\n                    indices.push(firstIndex + totalYRotationSteps + 1);\r\n                    indices.push(firstIndex + 1);\r\n                    indices.push(firstIndex + totalYRotationSteps + 2);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a sphere mesh\r\n * * The parameter `diameter` sets the diameter size (float) of the sphere (default 1)\r\n * * You can set some different sphere dimensions, for instance to build an ellipsoid, by using the parameters `diameterX`, `diameterY` and `diameterZ` (all by default have the same value of `diameter`)\r\n * * The parameter `segments` sets the sphere number of horizontal stripes (positive integer, default 32)\r\n * * You can create an unclosed sphere with the parameter `arc` (positive float, default 1), valued between 0 and 1, what is the ratio of the circumference (latitude) : 2 x PI x ratio\r\n * * You can create an unclosed sphere on its height with the parameter `slice` (positive float, default1), valued between 0 and 1, what is the height ratio (longitude)\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the sphere mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#sphere\r\n */\r\nexport function CreateSphere(\r\n    name: string,\r\n    options: {\r\n        segments?: number;\r\n        diameter?: number;\r\n        diameterX?: number;\r\n        diameterY?: number;\r\n        diameterZ?: number;\r\n        arc?: number;\r\n        slice?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        updatable?: boolean;\r\n    } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const sphere = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    sphere._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateSphereVertexData(options);\r\n\r\n    vertexData.applyToMesh(sphere, options.updatable);\r\n\r\n    return sphere;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use CreateSphere directly\r\n */\r\nexport const SphereBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateSphere,\r\n};\r\n\r\nVertexData.CreateSphere = CreateSphereVertexData;\r\n\r\nMesh.CreateSphere = (name: string, segments: number, diameter: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        segments: segments,\r\n        diameterX: diameter,\r\n        diameterY: diameter,\r\n        diameterZ: diameter,\r\n        sideOrientation: sideOrientation,\r\n        updatable: updatable,\r\n    };\r\n\r\n    return CreateSphere(name, options, scene);\r\n};\r\n", "import { Vector4, Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Axis } from \"../../Maths/math.axis\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a cylinder, cone or prism\r\n * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n * * height sets the height (y direction) of the cylinder, optional, default 2\r\n * * diameterTop sets the diameter of the top of the cone, overwrites diameter,  optional, default diameter\r\n * * diameterBottom sets the diameter of the bottom of the cone, overwrites diameter,  optional, default diameter\r\n * * diameter sets the diameter of the top and bottom of the cone, optional default 1\r\n * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\r\n * * subdivisions` the number of rings along the cylinder height, optional, default 1\r\n * * arc a number from 0 to 1, to create an unclosed cylinder based on the fraction of the circumference given by the arc value, optional, default 1\r\n * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n * * hasRings when true makes each subdivision independently treated as a face for faceUV and faceColors, optional, default false\r\n * * enclose when true closes an open cylinder by adding extra flat faces between the height axis and vertical edges, think cut cake\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @returns the VertexData of the cylinder, cone or prism\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function CreateCylinderVertexData(options: {\r\n    height?: number;\r\n    diameterTop?: number;\r\n    diameterBottom?: number;\r\n    diameter?: number;\r\n    tessellation?: number;\r\n    subdivisions?: number;\r\n    arc?: number;\r\n    faceColors?: Color4[];\r\n    faceUV?: Vector4[];\r\n    hasRings?: boolean;\r\n    enclose?: boolean;\r\n    cap?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n}): VertexData {\r\n    const height: number = options.height || 2;\r\n    let diameterTop: number = options.diameterTop === 0 ? 0 : options.diameterTop || options.diameter || 1;\r\n    let diameterBottom: number = options.diameterBottom === 0 ? 0 : options.diameterBottom || options.diameter || 1;\r\n    diameterTop = diameterTop || 0.00001; // Prevent broken normals\r\n    diameterBottom = diameterBottom || 0.00001; // Prevent broken normals\r\n    const tessellation: number = (options.tessellation || 24) | 0;\r\n    const subdivisions: number = (options.subdivisions || 1) | 0;\r\n    const hasRings: boolean = options.hasRings ? true : false;\r\n    const enclose: boolean = options.enclose ? true : false;\r\n    const cap = options.cap === 0 ? 0 : options.cap || Mesh.CAP_ALL;\r\n    const arc: number = options.arc && (options.arc <= 0 || options.arc > 1) ? 1.0 : options.arc || 1.0;\r\n    const sideOrientation: number = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n    const faceUV: Vector4[] = options.faceUV || new Array<Vector4>(3);\r\n    const faceColors = options.faceColors;\r\n    // default face colors and UV if undefined\r\n    const quadNb: number = arc !== 1 && enclose ? 2 : 0;\r\n    const ringNb: number = hasRings ? subdivisions : 1;\r\n    const surfaceNb: number = 2 + (1 + quadNb) * ringNb;\r\n    let f: number;\r\n\r\n    for (f = 0; f < surfaceNb; f++) {\r\n        if (faceColors && faceColors[f] === undefined) {\r\n            faceColors[f] = new Color4(1, 1, 1, 1);\r\n        }\r\n    }\r\n    for (f = 0; f < surfaceNb; f++) {\r\n        if (faceUV && faceUV[f] === undefined) {\r\n            faceUV[f] = new Vector4(0, 0, 1, 1);\r\n        }\r\n    }\r\n\r\n    const indices: number[] = [];\r\n    const positions: number[] = [];\r\n    const normals: number[] = [];\r\n    const uvs: number[] = [];\r\n    const colors: number[] = [];\r\n\r\n    const angleStep = (Math.PI * 2 * arc) / tessellation;\r\n    let angle: number;\r\n    let h: number;\r\n    let radius: number;\r\n    const tan = (diameterBottom - diameterTop) / 2 / height;\r\n    const ringVertex: Vector3 = Vector3.Zero();\r\n    const ringNormal: Vector3 = Vector3.Zero();\r\n    const ringFirstVertex: Vector3 = Vector3.Zero();\r\n    const ringFirstNormal: Vector3 = Vector3.Zero();\r\n    const quadNormal: Vector3 = Vector3.Zero();\r\n    const y: Vector3 = Axis.Y;\r\n\r\n    // positions, normals, uvs\r\n    let i: number;\r\n    let j: number;\r\n    let r: number;\r\n    let ringIdx: number = 1;\r\n    let s: number = 1; // surface index\r\n    let cs: number = 0;\r\n    let v: number = 0;\r\n\r\n    for (i = 0; i <= subdivisions; i++) {\r\n        h = i / subdivisions;\r\n        radius = (h * (diameterTop - diameterBottom) + diameterBottom) / 2;\r\n        ringIdx = hasRings && i !== 0 && i !== subdivisions ? 2 : 1;\r\n        for (r = 0; r < ringIdx; r++) {\r\n            if (hasRings) {\r\n                s += r;\r\n            }\r\n            if (enclose) {\r\n                s += 2 * r;\r\n            }\r\n            for (j = 0; j <= tessellation; j++) {\r\n                angle = j * angleStep;\r\n\r\n                // position\r\n                ringVertex.x = Math.cos(-angle) * radius;\r\n                ringVertex.y = -height / 2 + h * height;\r\n                ringVertex.z = Math.sin(-angle) * radius;\r\n\r\n                // normal\r\n                if (diameterTop === 0 && i === subdivisions) {\r\n                    // if no top cap, reuse former normals\r\n                    ringNormal.x = normals[normals.length - (tessellation + 1) * 3];\r\n                    ringNormal.y = normals[normals.length - (tessellation + 1) * 3 + 1];\r\n                    ringNormal.z = normals[normals.length - (tessellation + 1) * 3 + 2];\r\n                } else {\r\n                    ringNormal.x = ringVertex.x;\r\n                    ringNormal.z = ringVertex.z;\r\n                    ringNormal.y = Math.sqrt(ringNormal.x * ringNormal.x + ringNormal.z * ringNormal.z) * tan;\r\n                    ringNormal.normalize();\r\n                }\r\n\r\n                // keep first ring vertex values for enclose\r\n                if (j === 0) {\r\n                    ringFirstVertex.copyFrom(ringVertex);\r\n                    ringFirstNormal.copyFrom(ringNormal);\r\n                }\r\n\r\n                positions.push(ringVertex.x, ringVertex.y, ringVertex.z);\r\n                normals.push(ringNormal.x, ringNormal.y, ringNormal.z);\r\n                if (hasRings) {\r\n                    v = cs !== s ? faceUV[s].y : faceUV[s].w;\r\n                } else {\r\n                    v = faceUV[s].y + (faceUV[s].w - faceUV[s].y) * h;\r\n                }\r\n                uvs.push(faceUV[s].x + ((faceUV[s].z - faceUV[s].x) * j) / tessellation, useOpenGLOrientationForUV ? 1 - v : v);\r\n                if (faceColors) {\r\n                    colors.push(faceColors[s].r, faceColors[s].g, faceColors[s].b, faceColors[s].a);\r\n                }\r\n            }\r\n\r\n            // if enclose, add four vertices and their dedicated normals\r\n            if (arc !== 1 && enclose) {\r\n                positions.push(ringVertex.x, ringVertex.y, ringVertex.z);\r\n                positions.push(0, ringVertex.y, 0);\r\n                positions.push(0, ringVertex.y, 0);\r\n                positions.push(ringFirstVertex.x, ringFirstVertex.y, ringFirstVertex.z);\r\n                Vector3.CrossToRef(y, ringNormal, quadNormal);\r\n                quadNormal.normalize();\r\n                normals.push(quadNormal.x, quadNormal.y, quadNormal.z, quadNormal.x, quadNormal.y, quadNormal.z);\r\n                Vector3.CrossToRef(ringFirstNormal, y, quadNormal);\r\n                quadNormal.normalize();\r\n                normals.push(quadNormal.x, quadNormal.y, quadNormal.z, quadNormal.x, quadNormal.y, quadNormal.z);\r\n                if (hasRings) {\r\n                    v = cs !== s ? faceUV[s + 1].y : faceUV[s + 1].w;\r\n                } else {\r\n                    v = faceUV[s + 1].y + (faceUV[s + 1].w - faceUV[s + 1].y) * h;\r\n                }\r\n                uvs.push(faceUV[s + 1].x, useOpenGLOrientationForUV ? 1 - v : v);\r\n                uvs.push(faceUV[s + 1].z, useOpenGLOrientationForUV ? 1 - v : v);\r\n                if (hasRings) {\r\n                    v = cs !== s ? faceUV[s + 2].y : faceUV[s + 2].w;\r\n                } else {\r\n                    v = faceUV[s + 2].y + (faceUV[s + 2].w - faceUV[s + 2].y) * h;\r\n                }\r\n                uvs.push(faceUV[s + 2].x, useOpenGLOrientationForUV ? 1 - v : v);\r\n                uvs.push(faceUV[s + 2].z, useOpenGLOrientationForUV ? 1 - v : v);\r\n                if (faceColors) {\r\n                    colors.push(faceColors[s + 1].r, faceColors[s + 1].g, faceColors[s + 1].b, faceColors[s + 1].a);\r\n                    colors.push(faceColors[s + 1].r, faceColors[s + 1].g, faceColors[s + 1].b, faceColors[s + 1].a);\r\n                    colors.push(faceColors[s + 2].r, faceColors[s + 2].g, faceColors[s + 2].b, faceColors[s + 2].a);\r\n                    colors.push(faceColors[s + 2].r, faceColors[s + 2].g, faceColors[s + 2].b, faceColors[s + 2].a);\r\n                }\r\n            }\r\n            if (cs !== s) {\r\n                cs = s;\r\n            }\r\n        }\r\n    }\r\n\r\n    // indices\r\n    const e: number = arc !== 1 && enclose ? tessellation + 4 : tessellation; // correction of number of iteration if enclose\r\n    i = 0;\r\n    for (s = 0; s < subdivisions; s++) {\r\n        let i0: number = 0;\r\n        let i1: number = 0;\r\n        let i2: number = 0;\r\n        let i3: number = 0;\r\n        for (j = 0; j < tessellation; j++) {\r\n            i0 = i * (e + 1) + j;\r\n            i1 = (i + 1) * (e + 1) + j;\r\n            i2 = i * (e + 1) + (j + 1);\r\n            i3 = (i + 1) * (e + 1) + (j + 1);\r\n            indices.push(i0, i1, i2);\r\n            indices.push(i3, i2, i1);\r\n        }\r\n        if (arc !== 1 && enclose) {\r\n            // if enclose, add two quads\r\n            indices.push(i0 + 2, i1 + 2, i2 + 2);\r\n            indices.push(i3 + 2, i2 + 2, i1 + 2);\r\n            indices.push(i0 + 4, i1 + 4, i2 + 4);\r\n            indices.push(i3 + 4, i2 + 4, i1 + 4);\r\n        }\r\n        i = hasRings ? i + 2 : i + 1;\r\n    }\r\n\r\n    // Caps\r\n    const createCylinderCap = (isTop: boolean) => {\r\n        const radius = isTop ? diameterTop / 2 : diameterBottom / 2;\r\n        if (radius === 0) {\r\n            return;\r\n        }\r\n\r\n        // Cap positions, normals & uvs\r\n        let angle;\r\n        let circleVector;\r\n        let i: number;\r\n        const u: Vector4 = isTop ? faceUV[surfaceNb - 1] : faceUV[0];\r\n        let c: Nullable<Color4> = null;\r\n        if (faceColors) {\r\n            c = isTop ? faceColors[surfaceNb - 1] : faceColors[0];\r\n        }\r\n        // cap center\r\n        const vbase = positions.length / 3;\r\n        const offset = isTop ? height / 2 : -height / 2;\r\n        const center = new Vector3(0, offset, 0);\r\n        positions.push(center.x, center.y, center.z);\r\n        normals.push(0, isTop ? 1 : -1, 0);\r\n        const v = u.y + (u.w - u.y) * 0.5;\r\n        uvs.push(u.x + (u.z - u.x) * 0.5, useOpenGLOrientationForUV ? 1 - v : v);\r\n        if (c) {\r\n            colors.push(c.r, c.g, c.b, c.a);\r\n        }\r\n\r\n        const textureScale = new Vector2(0.5, 0.5);\r\n        for (i = 0; i <= tessellation; i++) {\r\n            angle = (Math.PI * 2 * i * arc) / tessellation;\r\n            const cos = Math.cos(-angle);\r\n            const sin = Math.sin(-angle);\r\n            circleVector = new Vector3(cos * radius, offset, sin * radius);\r\n            const textureCoordinate = new Vector2(cos * textureScale.x + 0.5, sin * textureScale.y + 0.5);\r\n            positions.push(circleVector.x, circleVector.y, circleVector.z);\r\n            normals.push(0, isTop ? 1 : -1, 0);\r\n            const v = u.y + (u.w - u.y) * textureCoordinate.y;\r\n            uvs.push(u.x + (u.z - u.x) * textureCoordinate.x, useOpenGLOrientationForUV ? 1 - v : v);\r\n            if (c) {\r\n                colors.push(c.r, c.g, c.b, c.a);\r\n            }\r\n        }\r\n        // Cap indices\r\n        for (i = 0; i < tessellation; i++) {\r\n            if (!isTop) {\r\n                indices.push(vbase);\r\n                indices.push(vbase + (i + 1));\r\n                indices.push(vbase + (i + 2));\r\n            } else {\r\n                indices.push(vbase);\r\n                indices.push(vbase + (i + 2));\r\n                indices.push(vbase + (i + 1));\r\n            }\r\n        }\r\n    };\r\n\r\n    // add caps to geometry based on cap parameter\r\n    if (cap === Mesh.CAP_START || cap === Mesh.CAP_ALL) {\r\n        createCylinderCap(false);\r\n    }\r\n    if (cap === Mesh.CAP_END || cap === Mesh.CAP_ALL) {\r\n        createCylinderCap(true);\r\n    }\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n    if (faceColors) {\r\n        vertexData.colors = colors;\r\n    }\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a cylinder or a cone mesh\r\n * * The parameter `height` sets the height size (float) of the cylinder/cone (float, default 2).\r\n * * The parameter `diameter` sets the diameter of the top and bottom cap at once (float, default 1).\r\n * * The parameters `diameterTop` and `diameterBottom` overwrite the parameter `diameter` and set respectively the top cap and bottom cap diameter (floats, default 1). The parameter \"diameterBottom\" can't be zero.\r\n * * The parameter `tessellation` sets the number of cylinder sides (positive integer, default 24). Set it to 3 to get a prism for instance.\r\n * * The parameter `subdivisions` sets the number of rings along the cylinder height (positive integer, default 1).\r\n * * The parameter `hasRings` (boolean, default false) makes the subdivisions independent from each other, so they become different faces.\r\n * * The parameter `enclose`  (boolean, default false) adds two extra faces per subdivision to a sliced cylinder to close it around its height axis.\r\n * * The parameter `cap` sets the way the cylinder is capped. Possible values : BABYLON.Mesh.NO_CAP, BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL (default).\r\n * * The parameter `arc` (float, default 1) is the ratio (max 1) to apply to the circumference to slice the cylinder.\r\n * * You can set different colors and different images to each box side by using the parameters `faceColors` (an array of n Color3 elements) and `faceUV` (an array of n Vector4 elements).\r\n * * The value of n is the number of cylinder faces. If the cylinder has only 1 subdivisions, n equals : top face + cylinder surface + bottom face = 3\r\n * * Now, if the cylinder has 5 independent subdivisions (hasRings = true), n equals : top face + 5 stripe surfaces + bottom face = 2 + 5 = 7\r\n * * Finally, if the cylinder has 5 independent subdivisions and is enclose, n equals : top face + 5 x (stripe surface + 2 closing faces) + bottom face = 2 + 5 * 3 = 17\r\n * * Each array (color or UVs) is always ordered the same way : the first element is the bottom cap, the last element is the top cap. The other elements are each a ring surface.\r\n * * If `enclose` is false, a ring surface is one element.\r\n * * If `enclose` is true, a ring surface is 3 successive elements in the array : the tubular surface, then the two closing faces.\r\n * * Example how to set colors and textures on a sliced cylinder : https://www.html5gamedevs.com/topic/17945-creating-a-closed-slice-of-a-cylinder/#comment-106379\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the cylinder mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#cylinder-or-cone\r\n */\r\nexport function CreateCylinder(\r\n    name: string,\r\n    options: {\r\n        height?: number;\r\n        diameterTop?: number;\r\n        diameterBottom?: number;\r\n        diameter?: number;\r\n        tessellation?: number;\r\n        subdivisions?: number;\r\n        arc?: number;\r\n        faceColors?: Color4[];\r\n        faceUV?: Vector4[];\r\n        updatable?: boolean;\r\n        hasRings?: boolean;\r\n        enclose?: boolean;\r\n        cap?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    } = {},\r\n    scene?: Nullable<Scene>\r\n): Mesh {\r\n    const cylinder = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    cylinder._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateCylinderVertexData(options);\r\n\r\n    vertexData.applyToMesh(cylinder, options.updatable);\r\n\r\n    return cylinder;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated Please use CreateCylinder directly\r\n */\r\nexport const CylinderBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateCylinder,\r\n};\r\n\r\nVertexData.CreateCylinder = CreateCylinderVertexData;\r\n\r\nMesh.CreateCylinder = (\r\n    name: string,\r\n    height: number,\r\n    diameterTop: number,\r\n    diameterBottom: number,\r\n    tessellation: number,\r\n    subdivisions: any,\r\n    scene?: Scene,\r\n    updatable?: any,\r\n    sideOrientation?: number\r\n): Mesh => {\r\n    if (scene === undefined || !(scene instanceof Scene)) {\r\n        if (scene !== undefined) {\r\n            sideOrientation = updatable || Mesh.DEFAULTSIDE;\r\n            updatable = scene;\r\n        }\r\n        scene = <Scene>subdivisions;\r\n        subdivisions = 1;\r\n    }\r\n\r\n    const options = {\r\n        height,\r\n        diameterTop,\r\n        diameterBottom,\r\n        tessellation,\r\n        subdivisions,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateCylinder(name, options, scene);\r\n};\r\n", "import type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a torus\r\n * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n * * diameter the diameter of the torus, optional default 1\r\n * * thickness the diameter of the tube forming the torus, optional default 0.5\r\n * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.diameter\r\n * @param options.thickness\r\n * @param options.tessellation\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @returns the VertexData of the torus\r\n */\r\nexport function CreateTorusVertexData(options: { diameter?: number; thickness?: number; tessellation?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }) {\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n\r\n    const diameter = options.diameter || 1;\r\n    const thickness = options.thickness || 0.5;\r\n    const tessellation = (options.tessellation || 16) | 0;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    const stride = tessellation + 1;\r\n\r\n    for (let i = 0; i <= tessellation; i++) {\r\n        const u = i / tessellation;\r\n\r\n        const outerAngle = (i * Math.PI * 2.0) / tessellation - Math.PI / 2.0;\r\n\r\n        const transform = Matrix.Translation(diameter / 2.0, 0, 0).multiply(Matrix.RotationY(outerAngle));\r\n\r\n        for (let j = 0; j <= tessellation; j++) {\r\n            const v = 1 - j / tessellation;\r\n\r\n            const innerAngle = (j * Math.PI * 2.0) / tessellation + Math.PI;\r\n            const dx = Math.cos(innerAngle);\r\n            const dy = Math.sin(innerAngle);\r\n\r\n            // Create a vertex.\r\n            let normal = new Vector3(dx, dy, 0);\r\n            let position = normal.scale(thickness / 2);\r\n            const textureCoordinate = new Vector2(u, v);\r\n\r\n            position = Vector3.TransformCoordinates(position, transform);\r\n            normal = Vector3.TransformNormal(normal, transform);\r\n\r\n            positions.push(position.x, position.y, position.z);\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            uvs.push(textureCoordinate.x, useOpenGLOrientationForUV ? 1.0 - textureCoordinate.y : textureCoordinate.y);\r\n\r\n            // And create indices for two triangles.\r\n            const nextI = (i + 1) % stride;\r\n            const nextJ = (j + 1) % stride;\r\n\r\n            indices.push(i * stride + j);\r\n            indices.push(i * stride + nextJ);\r\n            indices.push(nextI * stride + j);\r\n\r\n            indices.push(i * stride + nextJ);\r\n            indices.push(nextI * stride + nextJ);\r\n            indices.push(nextI * stride + j);\r\n        }\r\n    }\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a torus mesh\r\n * * The parameter `diameter` sets the diameter size (float) of the torus (default 1)\r\n * * The parameter `thickness` sets the diameter size of the tube of the torus (float, default 0.5)\r\n * * The parameter `tessellation` sets the number of torus sides (positive integer, default 16)\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.diameter\r\n * @param options.thickness\r\n * @param options.tessellation\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param scene defines the hosting scene\r\n * @returns the torus mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#torus\r\n */\r\nexport function CreateTorus(\r\n    name: string,\r\n    options: { diameter?: number; thickness?: number; tessellation?: number; updatable?: boolean; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 } = {},\r\n    scene?: Scene\r\n): Mesh {\r\n    const torus = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    torus._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateTorusVertexData(options);\r\n\r\n    vertexData.applyToMesh(torus, options.updatable);\r\n\r\n    return torus;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use CreateTorus instead\r\n */\r\nexport const TorusBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateTorus,\r\n};\r\n\r\nVertexData.CreateTorus = CreateTorusVertexData;\r\n\r\nMesh.CreateTorus = (name: string, diameter: number, thickness: number, tessellation: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        diameter,\r\n        thickness,\r\n        tessellation,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateTorus(name, options, scene);\r\n};\r\n", "import type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\n// based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473\r\n/**\r\n * Creates the VertexData for a TorusKnot\r\n * @param options an object used to set the following optional parameters for the TorusKnot, required but can be empty\r\n * * radius the radius of the torus knot, optional, default 2\r\n * * tube the thickness of the tube, optional, default 0.5\r\n * * radialSegments the number of sides on each tube segments, optional, default 32\r\n * * tubularSegments the number of tubes to decompose the knot into, optional, default 32\r\n * * p the number of windings around the z axis, optional,  default 2\r\n * * q the number of windings around the x axis, optional,  default 3\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.radius\r\n * @param options.tube\r\n * @param options.radialSegments\r\n * @param options.tubularSegments\r\n * @param options.p\r\n * @param options.q\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @returns the VertexData of the Torus Knot\r\n */\r\nexport function CreateTorusKnotVertexData(options: {\r\n    radius?: number;\r\n    tube?: number;\r\n    radialSegments?: number;\r\n    tubularSegments?: number;\r\n    p?: number;\r\n    q?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n}): VertexData {\r\n    const indices: number[] = [];\r\n    const positions: number[] = [];\r\n    const normals: number[] = [];\r\n    const uvs: number[] = [];\r\n\r\n    const radius = options.radius || 2;\r\n    const tube = options.tube || 0.5;\r\n    const radialSegments = options.radialSegments || 32;\r\n    const tubularSegments = options.tubularSegments || 32;\r\n    const p = options.p || 2;\r\n    const q = options.q || 3;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // Helper\r\n    const getPos = (angle: number) => {\r\n        const cu = Math.cos(angle);\r\n        const su = Math.sin(angle);\r\n        const quOverP = (q / p) * angle;\r\n        const cs = Math.cos(quOverP);\r\n\r\n        const tx = radius * (2 + cs) * 0.5 * cu;\r\n        const ty = radius * (2 + cs) * su * 0.5;\r\n        const tz = radius * Math.sin(quOverP) * 0.5;\r\n\r\n        return new Vector3(tx, ty, tz);\r\n    };\r\n\r\n    // Vertices\r\n    let i: number;\r\n    let j: number;\r\n    for (i = 0; i <= radialSegments; i++) {\r\n        const modI = i % radialSegments;\r\n        const u = (modI / radialSegments) * 2 * p * Math.PI;\r\n        const p1 = getPos(u);\r\n        const p2 = getPos(u + 0.01);\r\n        const tang = p2.subtract(p1);\r\n        let n = p2.add(p1);\r\n\r\n        const bitan = Vector3.Cross(tang, n);\r\n        n = Vector3.Cross(bitan, tang);\r\n\r\n        bitan.normalize();\r\n        n.normalize();\r\n\r\n        for (j = 0; j < tubularSegments; j++) {\r\n            const modJ = j % tubularSegments;\r\n            const v = (modJ / tubularSegments) * 2 * Math.PI;\r\n            const cx = -tube * Math.cos(v);\r\n            const cy = tube * Math.sin(v);\r\n\r\n            positions.push(p1.x + cx * n.x + cy * bitan.x);\r\n            positions.push(p1.y + cx * n.y + cy * bitan.y);\r\n            positions.push(p1.z + cx * n.z + cy * bitan.z);\r\n\r\n            uvs.push(i / radialSegments);\r\n            uvs.push(useOpenGLOrientationForUV ? 1.0 - j / tubularSegments : j / tubularSegments);\r\n        }\r\n    }\r\n\r\n    for (i = 0; i < radialSegments; i++) {\r\n        for (j = 0; j < tubularSegments; j++) {\r\n            const jNext = (j + 1) % tubularSegments;\r\n            const a = i * tubularSegments + j;\r\n            const b = (i + 1) * tubularSegments + j;\r\n            const c = (i + 1) * tubularSegments + jNext;\r\n            const d = i * tubularSegments + jNext;\r\n\r\n            indices.push(d);\r\n            indices.push(b);\r\n            indices.push(a);\r\n            indices.push(d);\r\n            indices.push(c);\r\n            indices.push(b);\r\n        }\r\n    }\r\n\r\n    // Normals\r\n    VertexData.ComputeNormals(positions, indices, normals);\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a torus knot mesh\r\n * * The parameter `radius` sets the global radius size (float) of the torus knot (default 2)\r\n * * The parameter `radialSegments` sets the number of sides on each tube segments (positive integer, default 32)\r\n * * The parameter `tubularSegments` sets the number of tubes to decompose the knot into (positive integer, default 32)\r\n * * The parameters `p` and `q` are the number of windings on each axis (positive integers, default 2 and 3)\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.radius\r\n * @param options.tube\r\n * @param options.radialSegments\r\n * @param options.tubularSegments\r\n * @param options.p\r\n * @param options.q\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param scene defines the hosting scene\r\n * @returns the torus knot mesh\r\n * @see  https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#torus-knot\r\n */\r\nexport function CreateTorusKnot(\r\n    name: string,\r\n    options: {\r\n        radius?: number;\r\n        tube?: number;\r\n        radialSegments?: number;\r\n        tubularSegments?: number;\r\n        p?: number;\r\n        q?: number;\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    } = {},\r\n    scene?: Scene\r\n): Mesh {\r\n    const torusKnot = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    torusKnot._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateTorusKnotVertexData(options);\r\n\r\n    vertexData.applyToMesh(torusKnot, options.updatable);\r\n\r\n    return torusKnot;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use CreateTorusKnot instead\r\n */\r\nexport const TorusKnotBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateTorusKnot,\r\n};\r\n\r\nVertexData.CreateTorusKnot = CreateTorusKnotVertexData;\r\n\r\nMesh.CreateTorusKnot = (\r\n    name: string,\r\n    radius: number,\r\n    tube: number,\r\n    radialSegments: number,\r\n    tubularSegments: number,\r\n    p: number,\r\n    q: number,\r\n    scene?: Scene,\r\n    updatable?: boolean,\r\n    sideOrientation?: number\r\n): Mesh => {\r\n    const options = {\r\n        radius,\r\n        tube,\r\n        radialSegments,\r\n        tubularSegments,\r\n        p,\r\n        q,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateTorusKnot(name, options, scene);\r\n};\r\n", "import { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { Matrix, Quaternion } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { Effect, IEffectCreationOptions, IShaderPath } from \"./effect\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { EffectFallbacks } from \"./effectFallbacks\";\r\nimport { WebRequest } from \"../Misc/webRequest\";\r\nimport type { ShaderLanguage } from \"./shaderLanguage\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { TextureSampler } from \"./Textures/textureSampler\";\r\nimport type { StorageBuffer } from \"../Buffers/storageBuffer\";\r\nimport { PushMaterial } from \"./pushMaterial\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { AddClipPlaneUniforms, BindClipPlane, PrepareStringDefinesForClipPlanes } from \"./clipPlaneMaterialHelper\";\r\nimport type { WebGPUEngine } from \"core/Engines/webgpuEngine\";\r\n\r\nimport type { ExternalTexture } from \"./Textures/externalTexture\";\r\nimport {\r\n    BindBonesParameters,\r\n    BindFogParameters,\r\n    BindLogDepth,\r\n    BindMorphTargetParameters,\r\n    BindSceneUniformBuffer,\r\n    PrepareAttributesForBakedVertexAnimation,\r\n    PrepareDefinesAndAttributesForMorphTargets,\r\n    PushAttributesForInstances,\r\n} from \"./materialHelper.functions\";\r\nimport type { IColor3Like, IColor4Like, IVector2Like, IVector3Like, IVector4Like } from \"core/Maths/math.like\";\r\n\r\nconst OnCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\n/**\r\n * Defines the options associated with the creation of a shader material.\r\n */\r\nexport interface IShaderMaterialOptions {\r\n    /**\r\n     * Does the material work in alpha blend mode\r\n     */\r\n    needAlphaBlending: boolean;\r\n\r\n    /**\r\n     * Does the material work in alpha test mode\r\n     */\r\n    needAlphaTesting: boolean;\r\n\r\n    /**\r\n     * The list of attribute names used in the shader\r\n     */\r\n    attributes: string[];\r\n\r\n    /**\r\n     * The list of uniform names used in the shader\r\n     */\r\n    uniforms: string[];\r\n\r\n    /**\r\n     * The list of UBO names used in the shader\r\n     */\r\n    uniformBuffers: string[];\r\n\r\n    /**\r\n     * The list of sampler (texture) names used in the shader\r\n     */\r\n    samplers: string[];\r\n\r\n    /**\r\n     * The list of external texture names used in the shader\r\n     */\r\n    externalTextures: string[];\r\n\r\n    /**\r\n     * The list of sampler object names used in the shader\r\n     */\r\n    samplerObjects: string[];\r\n\r\n    /**\r\n     * The list of storage buffer names used in the shader\r\n     */\r\n    storageBuffers: string[];\r\n\r\n    /**\r\n     * The list of defines used in the shader\r\n     */\r\n    defines: string[];\r\n\r\n    /**\r\n     * Defines if clip planes have to be turned on: true to turn them on, false to turn them off and null to turn them on/off depending on the scene configuration (scene.clipPlaneX)\r\n     */\r\n    useClipPlane: Nullable<boolean>;\r\n\r\n    /**\r\n     * The language the shader is written in (default: GLSL)\r\n     */\r\n    shaderLanguage?: ShaderLanguage;\r\n\r\n    /**\r\n     * Defines additional code to call to prepare the shader code\r\n     */\r\n    extraInitializationsAsync?: () => Promise<void>;\r\n}\r\n\r\n/**\r\n * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\r\n *\r\n * This returned material effects how the mesh will look based on the code in the shaders.\r\n *\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/shaderMaterial\r\n */\r\nexport class ShaderMaterial extends PushMaterial {\r\n    private _shaderPath: IShaderPath | string;\r\n    private _options: IShaderMaterialOptions;\r\n    private _textures: { [name: string]: BaseTexture } = {};\r\n    private _textureArrays: { [name: string]: BaseTexture[] } = {};\r\n    private _externalTextures: { [name: string]: ExternalTexture } = {};\r\n    private _floats: { [name: string]: number } = {};\r\n    private _ints: { [name: string]: number } = {};\r\n    private _uints: { [name: string]: number } = {};\r\n    private _floatsArrays: { [name: string]: number[] } = {};\r\n    private _colors3: { [name: string]: IColor3Like } = {};\r\n    private _colors3Arrays: { [name: string]: number[] } = {};\r\n    private _colors4: { [name: string]: IColor4Like } = {};\r\n    private _colors4Arrays: { [name: string]: number[] } = {};\r\n    private _vectors2: { [name: string]: IVector2Like } = {};\r\n    private _vectors3: { [name: string]: IVector3Like } = {};\r\n    private _vectors4: { [name: string]: IVector4Like } = {};\r\n    private _quaternions: { [name: string]: Quaternion } = {};\r\n    private _quaternionsArrays: { [name: string]: number[] } = {};\r\n    private _matrices: { [name: string]: Matrix } = {};\r\n    private _matrixArrays: { [name: string]: Float32Array | Array<number> } = {};\r\n    private _matrices3x3: { [name: string]: Float32Array | Array<number> } = {};\r\n    private _matrices2x2: { [name: string]: Float32Array | Array<number> } = {};\r\n    private _vectors2Arrays: { [name: string]: number[] } = {};\r\n    private _vectors3Arrays: { [name: string]: number[] } = {};\r\n    private _vectors4Arrays: { [name: string]: number[] } = {};\r\n    private _uniformBuffers: { [name: string]: UniformBuffer } = {};\r\n    private _textureSamplers: { [name: string]: TextureSampler } = {};\r\n    private _storageBuffers: { [name: string]: StorageBuffer } = {};\r\n    private _cachedWorldViewMatrix = new Matrix();\r\n    private _cachedWorldViewProjectionMatrix = new Matrix();\r\n    private _multiview = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _materialHelperNeedsPreviousMatrices = false;\r\n\r\n    /** Define the Url to load snippets */\r\n    public static SnippetUrl = Constants.SnippetUrl;\r\n\r\n    /** Snippet ID if the material was created from the snippet server */\r\n    public snippetId: string;\r\n\r\n    /**\r\n     * Instantiate a new shader material.\r\n     * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\r\n     * This returned material effects how the mesh will look based on the code in the shaders.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/shaderMaterial\r\n     * @param name Define the name of the material in the scene\r\n     * @param scene Define the scene the material belongs to\r\n     * @param shaderPath Defines  the route to the shader code.\r\n     * @param options Define the options used to create the shader\r\n     * @param storeEffectOnSubMeshes true to store effect on submeshes, false to store the effect directly in the material class.\r\n     */\r\n    constructor(name: string, scene: Scene, shaderPath: IShaderPath | string, options: Partial<IShaderMaterialOptions> = {}, storeEffectOnSubMeshes = true) {\r\n        super(name, scene, storeEffectOnSubMeshes);\r\n        this._shaderPath = shaderPath;\r\n\r\n        this._options = {\r\n            needAlphaBlending: false,\r\n            needAlphaTesting: false,\r\n            attributes: [\"position\", \"normal\", \"uv\"],\r\n            uniforms: [\"worldViewProjection\"],\r\n            uniformBuffers: [],\r\n            samplers: [],\r\n            externalTextures: [],\r\n            samplerObjects: [],\r\n            storageBuffers: [],\r\n            defines: [],\r\n            useClipPlane: false,\r\n            ...options,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the shader path used to define the shader code\r\n     * It can be modified to trigger a new compilation\r\n     */\r\n    public get shaderPath() {\r\n        return this._shaderPath;\r\n    }\r\n\r\n    /**\r\n     * Sets the shader path used to define the shader code\r\n     * It can be modified to trigger a new compilation\r\n     */\r\n    public set shaderPath(shaderPath: IShaderPath | string) {\r\n        this._shaderPath = shaderPath;\r\n    }\r\n\r\n    /**\r\n     * Gets the options used to compile the shader.\r\n     * They can be modified to trigger a new compilation\r\n     */\r\n    public get options(): IShaderMaterialOptions {\r\n        return this._options;\r\n    }\r\n\r\n    /**\r\n     * is multiview set to true?\r\n     */\r\n    public get isMultiview(): boolean {\r\n        return this._multiview;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"ShaderMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"ShaderMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material will require alpha blending\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public override needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0 || this._options.needAlphaBlending;\r\n    }\r\n\r\n    /**\r\n     * Specifies if this material should be rendered in alpha test mode\r\n     * @returns a boolean specifying if an alpha test is needed.\r\n     */\r\n    public override needAlphaTesting(): boolean {\r\n        return this._options.needAlphaTesting;\r\n    }\r\n\r\n    private _checkUniform(uniformName: string): void {\r\n        if (this._options.uniforms.indexOf(uniformName) === -1) {\r\n            this._options.uniforms.push(uniformName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a texture in the shader.\r\n     * @param name Define the name of the uniform samplers as defined in the shader\r\n     * @param texture Define the texture to bind to this sampler\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTexture(name: string, texture: BaseTexture): ShaderMaterial {\r\n        if (this._options.samplers.indexOf(name) === -1) {\r\n            this._options.samplers.push(name);\r\n        }\r\n        this._textures[name] = texture;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a texture from the material.\r\n     * @param name Define the name of the texture to remove\r\n     */\r\n    public removeTexture(name: string): void {\r\n        delete this._textures[name];\r\n    }\r\n\r\n    /**\r\n     * Set a texture array in the shader.\r\n     * @param name Define the name of the uniform sampler array as defined in the shader\r\n     * @param textures Define the list of textures to bind to this sampler\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTextureArray(name: string, textures: BaseTexture[]): ShaderMaterial {\r\n        if (this._options.samplers.indexOf(name) === -1) {\r\n            this._options.samplers.push(name);\r\n        }\r\n\r\n        this._checkUniform(name);\r\n\r\n        this._textureArrays[name] = textures;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set an internal texture in the shader.\r\n     * @param name Define the name of the uniform samplers as defined in the shader\r\n     * @param texture Define the texture to bind to this sampler\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setExternalTexture(name: string, texture: ExternalTexture): ShaderMaterial {\r\n        if (this._options.externalTextures.indexOf(name) === -1) {\r\n            this._options.externalTextures.push(name);\r\n        }\r\n        this._externalTextures[name] = texture;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a float in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setFloat(name: string, value: number): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._floats[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a int in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setInt(name: string, value: number): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._ints[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a unsigned int in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setUInt(name: string, value: number): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._uints[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set an array of floats in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setFloats(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._floatsArrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 in the shader from a Color3.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor3(name: string, value: IColor3Like): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 array in the shader from a IColor3Like array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor3Array(name: string, value: IColor3Like[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors3Arrays[name] = value.reduce((arr: number[], color) => {\r\n            arr.push(color.r, color.g, color.b);\r\n            return arr;\r\n        }, []);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 in the shader from a Color4.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor4(name: string, value: IColor4Like): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors4[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 array in the shader from a IColor4Like array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor4Array(name: string, value: IColor4Like[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors4Arrays[name] = value.reduce((arr: number[], color) => {\r\n            arr.push(color.r, color.g, color.b, color.a);\r\n            return arr;\r\n        }, []);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec2 in the shader from a Vector2.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector2(name: string, value: IVector2Like): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors2[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 in the shader from a Vector3.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector3(name: string, value: IVector3Like): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 in the shader from a Vector4.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector4(name: string, value: IVector4Like): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors4[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 in the shader from a Quaternion.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setQuaternion(name: string, value: Quaternion): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._quaternions[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 array in the shader from a Quaternion array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setQuaternionArray(name: string, value: Quaternion[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._quaternionsArrays[name] = value.reduce((arr, quaternion) => {\r\n            quaternion.toArray(arr, arr.length);\r\n            return arr;\r\n        }, []);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat4 in the shader from a Matrix.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix(name: string, value: Matrix): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._matrices[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a float32Array in the shader from a matrix array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrices(name: string, value: Matrix[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n\r\n        const float32Array = new Float32Array(value.length * 16);\r\n\r\n        for (let index = 0; index < value.length; index++) {\r\n            const matrix = value[index];\r\n\r\n            matrix.copyToArray(float32Array, index * 16);\r\n        }\r\n\r\n        this._matrixArrays[name] = float32Array;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat3 in the shader from a Float32Array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix3x3(name: string, value: Float32Array | Array<number>): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._matrices3x3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat2 in the shader from a Float32Array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix2x2(name: string, value: Float32Array | Array<number>): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._matrices2x2[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec2 array in the shader from a number array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setArray2(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors2Arrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 array in the shader from a number array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setArray3(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors3Arrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 array in the shader from a number array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setArray4(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors4Arrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a uniform buffer in the shader\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param buffer Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setUniformBuffer(name: string, buffer: UniformBuffer): ShaderMaterial {\r\n        if (this._options.uniformBuffers.indexOf(name) === -1) {\r\n            this._options.uniformBuffers.push(name);\r\n        }\r\n        this._uniformBuffers[name] = buffer;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a texture sampler in the shader\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param sampler Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTextureSampler(name: string, sampler: TextureSampler): ShaderMaterial {\r\n        if (this._options.samplerObjects.indexOf(name) === -1) {\r\n            this._options.samplerObjects.push(name);\r\n        }\r\n        this._textureSamplers[name] = sampler;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a storage buffer in the shader\r\n     * @param name Define the name of the storage buffer as defined in the shader\r\n     * @param buffer Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setStorageBuffer(name: string, buffer: StorageBuffer): ShaderMaterial {\r\n        if (this._options.storageBuffers.indexOf(name) === -1) {\r\n            this._options.storageBuffers.push(name);\r\n        }\r\n        this._storageBuffers[name] = buffer;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds, removes, or replaces the specified shader define and value.\r\n     * * setDefine(\"MY_DEFINE\", true); // enables a boolean define\r\n     * * setDefine(\"MY_DEFINE\", \"0.5\"); // adds \"#define MY_DEFINE 0.5\" to the shader (or sets and replaces the value of any existing define with that name)\r\n     * * setDefine(\"MY_DEFINE\", false); // disables and removes the define\r\n     * Note if the active defines do change, the shader will be recompiled and this can be expensive.\r\n     * @param define the define name e.g., \"OUTPUT_TO_SRGB\" or \"#define OUTPUT_TO_SRGB\". If the define was passed into the constructor already, the version used should match that, and in either case, it should not include any appended value.\r\n     * @param value either the value of the define (e.g. a numerical value) or for booleans, true if the define should be enabled or false if it should be disabled\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setDefine(define: string, value: boolean | string): ShaderMaterial {\r\n        // First remove any existing define with this name.\r\n        const defineName = define.trimEnd() + \" \";\r\n        const existingDefineIdx = this.options.defines.findIndex((x) => x === define || x.startsWith(defineName));\r\n        if (existingDefineIdx >= 0) {\r\n            this.options.defines.splice(existingDefineIdx, 1);\r\n        }\r\n\r\n        // Then add the new define value. (If it's a boolean value and false, don't add it.)\r\n        if (typeof value !== \"boolean\" || value) {\r\n            this.options.defines.push(defineName + value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        return this.isReady(mesh, useInstances, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Checks if the material is ready to render the requested mesh\r\n     * @param mesh Define the mesh to render\r\n     * @param useInstances Define whether or not the material is used with instances\r\n     * @param subMesh defines which submesh to render\r\n     * @returns true if ready, otherwise false\r\n     */\r\n    public override isReady(mesh?: AbstractMesh, useInstances?: boolean, subMesh?: SubMesh): boolean {\r\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\r\n\r\n        if (this.isFrozen) {\r\n            const drawWrapper = storeEffectOnSubMeshes ? subMesh._drawWrapper : this._drawWrapper;\r\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        // Instances\r\n        const defines = [];\r\n        const attribs = [];\r\n        let fallbacks: Nullable<EffectFallbacks> = null;\r\n\r\n        let shaderName = this._shaderPath,\r\n            uniforms = this._options.uniforms,\r\n            uniformBuffers = this._options.uniformBuffers,\r\n            samplers = this._options.samplers;\r\n\r\n        // global multiview\r\n        if (engine.getCaps().multiview && scene.activeCamera && scene.activeCamera.outputRenderTarget && scene.activeCamera.outputRenderTarget.getViewCount() > 1) {\r\n            this._multiview = true;\r\n            defines.push(\"#define MULTIVIEW\");\r\n            if (uniforms.indexOf(\"viewProjection\") !== -1 && uniforms.indexOf(\"viewProjectionR\") === -1) {\r\n                uniforms.push(\"viewProjectionR\");\r\n            }\r\n        }\r\n\r\n        for (let index = 0; index < this._options.defines.length; index++) {\r\n            const defineToAdd = this._options.defines[index].indexOf(\"#define\") === 0 ? this._options.defines[index] : `#define ${this._options.defines[index]}`;\r\n            defines.push(defineToAdd);\r\n        }\r\n\r\n        for (let index = 0; index < this._options.attributes.length; index++) {\r\n            attribs.push(this._options.attributes[index]);\r\n        }\r\n\r\n        if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorKind)) {\r\n            if (attribs.indexOf(VertexBuffer.ColorKind) === -1) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n            defines.push(\"#define VERTEXCOLOR\");\r\n        }\r\n\r\n        if (useInstances) {\r\n            defines.push(\"#define INSTANCES\");\r\n            PushAttributesForInstances(attribs, this._materialHelperNeedsPreviousMatrices);\r\n            if (mesh?.hasThinInstances) {\r\n                defines.push(\"#define THIN_INSTANCES\");\r\n                if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorInstanceKind)) {\r\n                    attribs.push(VertexBuffer.ColorInstanceKind);\r\n                    defines.push(\"#define INSTANCESCOLOR\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bones\r\n        if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n            attribs.push(VertexBuffer.MatricesIndicesKind);\r\n            attribs.push(VertexBuffer.MatricesWeightsKind);\r\n            if (mesh.numBoneInfluencers > 4) {\r\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\r\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\r\n            }\r\n\r\n            const skeleton = mesh.skeleton;\r\n\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\r\n            fallbacks = new EffectFallbacks();\r\n            fallbacks.addCPUSkinningFallback(0, mesh);\r\n\r\n            if (skeleton.isUsingTextureForMatrices) {\r\n                defines.push(\"#define BONETEXTURE\");\r\n\r\n                if (uniforms.indexOf(\"boneTextureWidth\") === -1) {\r\n                    uniforms.push(\"boneTextureWidth\");\r\n                }\r\n\r\n                if (this._options.samplers.indexOf(\"boneSampler\") === -1) {\r\n                    this._options.samplers.push(\"boneSampler\");\r\n                }\r\n            } else {\r\n                defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\r\n\r\n                if (uniforms.indexOf(\"mBones\") === -1) {\r\n                    uniforms.push(\"mBones\");\r\n                }\r\n            }\r\n        } else {\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Morph\r\n        let numInfluencers = 0;\r\n        const manager = mesh ? (<Mesh>mesh).morphTargetManager : null;\r\n        if (manager) {\r\n            const uv = defines.indexOf(\"#define UV1\") !== -1;\r\n            const uv2 = defines.indexOf(\"#define UV2\") !== -1;\r\n            const tangent = defines.indexOf(\"#define TANGENT\") !== -1;\r\n            const normal = defines.indexOf(\"#define NORMAL\") !== -1;\r\n            const color = defines.indexOf(\"#define VERTEXCOLOR\") !== -1;\r\n            numInfluencers = PrepareDefinesAndAttributesForMorphTargets(\r\n                manager,\r\n                defines,\r\n                attribs,\r\n                mesh!,\r\n                true, // usePositionMorph\r\n                normal, // useNormalMorph\r\n                tangent, // useTangentMorph\r\n                uv, // useUVMorph\r\n                uv2, // useUV2Morph\r\n                color // useColorMorph\r\n            );\r\n            if (manager.isUsingTextureForTargets) {\r\n                if (uniforms.indexOf(\"morphTargetTextureIndices\") === -1) {\r\n                    uniforms.push(\"morphTargetTextureIndices\");\r\n                }\r\n\r\n                if (this._options.samplers.indexOf(\"morphTargets\") === -1) {\r\n                    this._options.samplers.push(\"morphTargets\");\r\n                }\r\n            }\r\n            if (numInfluencers > 0) {\r\n                uniforms = uniforms.slice();\r\n                uniforms.push(\"morphTargetInfluences\");\r\n                uniforms.push(\"morphTargetCount\");\r\n                uniforms.push(\"morphTargetTextureInfo\");\r\n                uniforms.push(\"morphTargetTextureIndices\");\r\n            }\r\n        } else {\r\n            defines.push(\"#define NUM_MORPH_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Baked Vertex Animation\r\n        if (mesh) {\r\n            const bvaManager = (<AbstractMesh>mesh).bakedVertexAnimationManager;\r\n\r\n            if (bvaManager && bvaManager.isEnabled) {\r\n                defines.push(\"#define BAKED_VERTEX_ANIMATION_TEXTURE\");\r\n                if (uniforms.indexOf(\"bakedVertexAnimationSettings\") === -1) {\r\n                    uniforms.push(\"bakedVertexAnimationSettings\");\r\n                }\r\n                if (uniforms.indexOf(\"bakedVertexAnimationTextureSizeInverted\") === -1) {\r\n                    uniforms.push(\"bakedVertexAnimationTextureSizeInverted\");\r\n                }\r\n                if (uniforms.indexOf(\"bakedVertexAnimationTime\") === -1) {\r\n                    uniforms.push(\"bakedVertexAnimationTime\");\r\n                }\r\n\r\n                if (this._options.samplers.indexOf(\"bakedVertexAnimationTexture\") === -1) {\r\n                    this._options.samplers.push(\"bakedVertexAnimationTexture\");\r\n                }\r\n            }\r\n\r\n            PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\r\n        }\r\n\r\n        // Textures\r\n        for (const name in this._textures) {\r\n            if (!this._textures[name].isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // Alpha test\r\n        if (mesh && this.needAlphaTestingForMesh(mesh)) {\r\n            defines.push(\"#define ALPHATEST\");\r\n        }\r\n\r\n        // Clip planes\r\n        if (this._options.useClipPlane !== false) {\r\n            AddClipPlaneUniforms(uniforms);\r\n\r\n            PrepareStringDefinesForClipPlanes(this, scene, defines);\r\n        }\r\n\r\n        // Fog\r\n        if (scene.fogEnabled && mesh?.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            defines.push(\"#define FOG\");\r\n            if (uniforms.indexOf(\"view\") === -1) {\r\n                uniforms.push(\"view\");\r\n            }\r\n            if (uniforms.indexOf(\"vFogInfos\") === -1) {\r\n                uniforms.push(\"vFogInfos\");\r\n            }\r\n            if (uniforms.indexOf(\"vFogColor\") === -1) {\r\n                uniforms.push(\"vFogColor\");\r\n            }\r\n        }\r\n\r\n        // Misc\r\n        if (this._useLogarithmicDepth) {\r\n            defines.push(\"#define LOGARITHMICDEPTH\");\r\n            if (uniforms.indexOf(\"logarithmicDepthConstant\") === -1) {\r\n                uniforms.push(\"logarithmicDepthConstant\");\r\n            }\r\n        }\r\n\r\n        if (this.customShaderNameResolve) {\r\n            uniforms = uniforms.slice();\r\n            uniformBuffers = uniformBuffers.slice();\r\n            samplers = samplers.slice();\r\n            shaderName = this.customShaderNameResolve(this.name, uniforms, uniformBuffers, samplers, defines, attribs);\r\n        }\r\n\r\n        const renderingMesh = subMesh ? subMesh.getRenderingMesh() : mesh;\r\n        if (renderingMesh && this.useVertexPulling) {\r\n            defines.push(\"#define USE_VERTEX_PULLING\");\r\n\r\n            const indexBuffer = renderingMesh.geometry?.getIndexBuffer();\r\n            if (indexBuffer) {\r\n                defines.push(\"#define VERTEX_PULLING_USE_INDEX_BUFFER\");\r\n                if (indexBuffer.is32Bits) {\r\n                    defines.push(\"#define VERTEX_PULLING_INDEX_BUFFER_32BITS\");\r\n                }\r\n            }\r\n        }\r\n\r\n        const drawWrapper = storeEffectOnSubMeshes ? subMesh._getDrawWrapper(undefined, true) : this._drawWrapper;\r\n        const previousEffect = drawWrapper?.effect ?? null;\r\n        const previousDefines = drawWrapper?.defines ?? null;\r\n        const join = defines.join(\"\\n\");\r\n\r\n        let effect = previousEffect;\r\n        if (previousDefines !== join) {\r\n            effect = engine.createEffect(\r\n                shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousMorphTargets: numInfluencers },\r\n                    shaderLanguage: this._options.shaderLanguage,\r\n                    extraInitializationsAsync: this._options.extraInitializationsAsync,\r\n                },\r\n                engine\r\n            );\r\n\r\n            if (storeEffectOnSubMeshes) {\r\n                subMesh.setEffect(effect, join, this._materialContext);\r\n            } else if (drawWrapper) {\r\n                drawWrapper.setEffect(effect, join);\r\n            }\r\n\r\n            if (this._onEffectCreatedObservable) {\r\n                OnCreatedEffectParameters.effect = effect;\r\n                OnCreatedEffectParameters.subMesh = subMesh ?? mesh?.subMeshes[0] ?? null;\r\n                this._onEffectCreatedObservable.notifyObservers(OnCreatedEffectParameters);\r\n            }\r\n        }\r\n\r\n        drawWrapper!._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        if (!effect?.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        if (previousEffect !== effect) {\r\n            scene.resetCachedMaterial();\r\n        }\r\n\r\n        drawWrapper!._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Binds the world matrix to the material\r\n     * @param world defines the world transformation matrix\r\n     * @param effectOverride - If provided, use this effect instead of internal effect\r\n     */\r\n    public override bindOnlyWorldMatrix(world: Matrix, effectOverride?: Nullable<Effect>): void {\r\n        const effect = effectOverride ?? this.getEffect();\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        const uniforms = this._options.uniforms;\r\n        if (uniforms.indexOf(\"world\") !== -1) {\r\n            effect.setMatrix(\"world\", world);\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        if (uniforms.indexOf(\"worldView\") !== -1) {\r\n            world.multiplyToRef(scene.getViewMatrix(), this._cachedWorldViewMatrix);\r\n            effect.setMatrix(\"worldView\", this._cachedWorldViewMatrix);\r\n        }\r\n\r\n        if (uniforms.indexOf(\"worldViewProjection\") !== -1) {\r\n            world.multiplyToRef(scene.getTransformMatrix(), this._cachedWorldViewProjectionMatrix);\r\n            effect.setMatrix(\"worldViewProjection\", this._cachedWorldViewProjectionMatrix);\r\n        }\r\n\r\n        if (uniforms.indexOf(\"view\") !== -1) {\r\n            effect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to this material by preparing the effect and shader to draw\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        this.bind(world, mesh, subMesh._drawWrapperOverride?.effect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Binds the material to the mesh\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh to bind the material to\r\n     * @param effectOverride - If provided, use this effect instead of internal effect\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public override bind(world: Matrix, mesh?: AbstractMesh, effectOverride?: Nullable<Effect>, subMesh?: SubMesh): void {\r\n        // Std values\r\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\r\n        const effect = effectOverride ?? (storeEffectOnSubMeshes ? subMesh.effect : this.getEffect());\r\n\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        const scene = this.getScene();\r\n\r\n        this._activeEffect = effect;\r\n\r\n        this.bindOnlyWorldMatrix(world, effectOverride);\r\n\r\n        const uniformBuffers = this._options.uniformBuffers;\r\n\r\n        let useSceneUBO = false;\r\n\r\n        if (effect && uniformBuffers && uniformBuffers.length > 0 && scene.getEngine().supportsUniformBuffers) {\r\n            for (let i = 0; i < uniformBuffers.length; ++i) {\r\n                const bufferName = uniformBuffers[i];\r\n                switch (bufferName) {\r\n                    case \"Mesh\":\r\n                        if (mesh) {\r\n                            mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n                            mesh.transferToEffect(world);\r\n                        }\r\n                        break;\r\n                    case \"Scene\":\r\n                        BindSceneUniformBuffer(effect, scene.getSceneUniformBuffer());\r\n                        scene.finalizeSceneUbo();\r\n                        useSceneUBO = true;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const mustRebind = mesh && storeEffectOnSubMeshes ? this._mustRebind(scene, effect, subMesh, mesh.visibility) : scene.getCachedMaterial() !== this;\r\n\r\n        if (effect && mustRebind) {\r\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"view\") !== -1) {\r\n                effect.setMatrix(\"view\", scene.getViewMatrix());\r\n            }\r\n\r\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"projection\") !== -1) {\r\n                effect.setMatrix(\"projection\", scene.getProjectionMatrix());\r\n            }\r\n\r\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"viewProjection\") !== -1) {\r\n                effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n                if (this._multiview) {\r\n                    effect.setMatrix(\"viewProjectionR\", scene._transformMatrixR);\r\n                }\r\n            }\r\n\r\n            if (scene.activeCamera && this._options.uniforms.indexOf(\"cameraPosition\") !== -1) {\r\n                effect.setVector3(\"cameraPosition\", scene.activeCamera.globalPosition);\r\n            }\r\n\r\n            // Bones\r\n            BindBonesParameters(mesh, effect);\r\n\r\n            // Clip plane\r\n            BindClipPlane(effect, this, scene);\r\n\r\n            // Misc\r\n            if (this._useLogarithmicDepth) {\r\n                BindLogDepth(storeEffectOnSubMeshes ? subMesh.materialDefines : effect.defines, effect, scene);\r\n            }\r\n\r\n            // Fog\r\n            if (mesh) {\r\n                BindFogParameters(scene, mesh, effect);\r\n            }\r\n\r\n            let name: string;\r\n            // Texture\r\n            for (name in this._textures) {\r\n                effect.setTexture(name, this._textures[name]);\r\n            }\r\n\r\n            // Texture arrays\r\n            for (name in this._textureArrays) {\r\n                effect.setTextureArray(name, this._textureArrays[name]);\r\n            }\r\n\r\n            // Int\r\n            for (name in this._ints) {\r\n                effect.setInt(name, this._ints[name]);\r\n            }\r\n\r\n            // UInt\r\n            for (name in this._uints) {\r\n                effect.setUInt(name, this._uints[name]);\r\n            }\r\n\r\n            // Float\r\n            for (name in this._floats) {\r\n                effect.setFloat(name, this._floats[name]);\r\n            }\r\n\r\n            // Floats\r\n            for (name in this._floatsArrays) {\r\n                effect.setArray(name, this._floatsArrays[name]);\r\n            }\r\n\r\n            // Color3\r\n            for (name in this._colors3) {\r\n                effect.setColor3(name, this._colors3[name]);\r\n            }\r\n\r\n            // Color3Array\r\n            for (name in this._colors3Arrays) {\r\n                effect.setArray3(name, this._colors3Arrays[name]);\r\n            }\r\n\r\n            // Color4\r\n            for (name in this._colors4) {\r\n                const color = this._colors4[name];\r\n                effect.setFloat4(name, color.r, color.g, color.b, color.a);\r\n            }\r\n\r\n            // Color4Array\r\n            for (name in this._colors4Arrays) {\r\n                effect.setArray4(name, this._colors4Arrays[name]);\r\n            }\r\n\r\n            // Vector2\r\n            for (name in this._vectors2) {\r\n                effect.setVector2(name, this._vectors2[name]);\r\n            }\r\n\r\n            // Vector3\r\n            for (name in this._vectors3) {\r\n                effect.setVector3(name, this._vectors3[name]);\r\n            }\r\n\r\n            // Vector4\r\n            for (name in this._vectors4) {\r\n                effect.setVector4(name, this._vectors4[name]);\r\n            }\r\n\r\n            // Quaternion\r\n            for (name in this._quaternions) {\r\n                effect.setQuaternion(name, this._quaternions[name]);\r\n            }\r\n\r\n            // Matrix\r\n            for (name in this._matrices) {\r\n                effect.setMatrix(name, this._matrices[name]);\r\n            }\r\n\r\n            // MatrixArray\r\n            for (name in this._matrixArrays) {\r\n                effect.setMatrices(name, this._matrixArrays[name]);\r\n            }\r\n\r\n            // Matrix 3x3\r\n            for (name in this._matrices3x3) {\r\n                effect.setMatrix3x3(name, this._matrices3x3[name]);\r\n            }\r\n\r\n            // Matrix 2x2\r\n            for (name in this._matrices2x2) {\r\n                effect.setMatrix2x2(name, this._matrices2x2[name]);\r\n            }\r\n\r\n            // Vector2Array\r\n            for (name in this._vectors2Arrays) {\r\n                effect.setArray2(name, this._vectors2Arrays[name]);\r\n            }\r\n\r\n            // Vector3Array\r\n            for (name in this._vectors3Arrays) {\r\n                effect.setArray3(name, this._vectors3Arrays[name]);\r\n            }\r\n\r\n            // Vector4Array\r\n            for (name in this._vectors4Arrays) {\r\n                effect.setArray4(name, this._vectors4Arrays[name]);\r\n            }\r\n\r\n            // QuaternionArray\r\n            for (name in this._quaternionsArrays) {\r\n                effect.setArray4(name, this._quaternionsArrays[name]);\r\n            }\r\n\r\n            // Uniform buffers\r\n            for (name in this._uniformBuffers) {\r\n                const buffer = this._uniformBuffers[name].getBuffer();\r\n                if (buffer) {\r\n                    effect.bindUniformBuffer(buffer, name);\r\n                }\r\n            }\r\n\r\n            const engineWebGPU = scene.getEngine() as WebGPUEngine;\r\n\r\n            // External texture\r\n            const setExternalTexture = engineWebGPU.setExternalTexture;\r\n            if (setExternalTexture) {\r\n                for (name in this._externalTextures) {\r\n                    setExternalTexture.call(engineWebGPU, name, this._externalTextures[name]);\r\n                }\r\n            }\r\n\r\n            // Samplers\r\n            const setTextureSampler = engineWebGPU.setTextureSampler;\r\n            if (setTextureSampler) {\r\n                for (name in this._textureSamplers) {\r\n                    setTextureSampler.call(engineWebGPU, name, this._textureSamplers[name]);\r\n                }\r\n            }\r\n\r\n            // Storage buffers\r\n            const setStorageBuffer = engineWebGPU.setStorageBuffer;\r\n            if (setStorageBuffer) {\r\n                for (name in this._storageBuffers) {\r\n                    setStorageBuffer.call(engineWebGPU, name, this._storageBuffers[name]);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (effect && mesh && (mustRebind || !this.isFrozen)) {\r\n            // Morph targets\r\n            BindMorphTargetParameters(mesh, effect);\r\n            if (mesh.morphTargetManager && mesh.morphTargetManager.isUsingTextureForTargets) {\r\n                mesh.morphTargetManager._bind(effect);\r\n            }\r\n\r\n            const bvaManager = (<AbstractMesh>mesh).bakedVertexAnimationManager;\r\n\r\n            if (bvaManager && bvaManager.isEnabled) {\r\n                const drawWrapper = storeEffectOnSubMeshes ? subMesh._drawWrapper : this._drawWrapper;\r\n                mesh.bakedVertexAnimationManager?.bind(effect, !!drawWrapper._wasPreviouslyUsingInstances);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, effect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Gets the active textures from the material\r\n     * @returns an array of textures\r\n     */\r\n    public override getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        for (const name in this._textures) {\r\n            activeTextures.push(this._textures[name]);\r\n        }\r\n\r\n        for (const name in this._textureArrays) {\r\n            const array = this._textureArrays[name];\r\n            for (let index = 0; index < array.length; index++) {\r\n                activeTextures.push(array[index]);\r\n            }\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses a texture\r\n     * @param texture defines the texture to check against the material\r\n     * @returns a boolean specifying if the material uses the texture\r\n     */\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        for (const name in this._textures) {\r\n            if (this._textures[name] === texture) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        for (const name in this._textureArrays) {\r\n            const array = this._textureArrays[name];\r\n            for (let index = 0; index < array.length; index++) {\r\n                if (array[index] === texture) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @returns the cloned material\r\n     */\r\n    public override clone(name: string): ShaderMaterial {\r\n        const result = SerializationHelper.Clone(() => new ShaderMaterial(name, this.getScene(), this._shaderPath, this._options, this._storeEffectOnSubMeshes), this);\r\n\r\n        result.name = name;\r\n        result.id = name;\r\n\r\n        // Shader code path\r\n        if (typeof result._shaderPath === \"object\") {\r\n            result._shaderPath = { ...result._shaderPath };\r\n        }\r\n\r\n        // Options\r\n        this._options = { ...this._options };\r\n\r\n        const keys = Object.keys(this._options) as Array<keyof IShaderMaterialOptions>;\r\n\r\n        for (const propName of keys) {\r\n            const propValue = this._options[propName];\r\n            if (Array.isArray(propValue)) {\r\n                (<string[]>this._options[propName]) = propValue.slice(0);\r\n            }\r\n        }\r\n\r\n        // Stencil\r\n        this.stencil.copyTo(result.stencil);\r\n\r\n        // Texture\r\n        for (const key in this._textures) {\r\n            result.setTexture(key, this._textures[key]);\r\n        }\r\n\r\n        // TextureArray\r\n        for (const key in this._textureArrays) {\r\n            result.setTextureArray(key, this._textureArrays[key]);\r\n        }\r\n\r\n        // External texture\r\n        for (const key in this._externalTextures) {\r\n            result.setExternalTexture(key, this._externalTextures[key]);\r\n        }\r\n\r\n        // Int\r\n        for (const key in this._ints) {\r\n            result.setInt(key, this._ints[key]);\r\n        }\r\n\r\n        // UInt\r\n        for (const key in this._uints) {\r\n            result.setUInt(key, this._uints[key]);\r\n        }\r\n\r\n        // Float\r\n        for (const key in this._floats) {\r\n            result.setFloat(key, this._floats[key]);\r\n        }\r\n\r\n        // Floats\r\n        for (const key in this._floatsArrays) {\r\n            result.setFloats(key, this._floatsArrays[key]);\r\n        }\r\n\r\n        // Color3\r\n        for (const key in this._colors3) {\r\n            result.setColor3(key, this._colors3[key]);\r\n        }\r\n\r\n        // Color3Array\r\n        for (const key in this._colors3Arrays) {\r\n            result._colors3Arrays[key] = this._colors3Arrays[key];\r\n        }\r\n\r\n        // Color4\r\n        for (const key in this._colors4) {\r\n            result.setColor4(key, this._colors4[key]);\r\n        }\r\n\r\n        // Color4Array\r\n        for (const key in this._colors4Arrays) {\r\n            result._colors4Arrays[key] = this._colors4Arrays[key];\r\n        }\r\n\r\n        // Vector2\r\n        for (const key in this._vectors2) {\r\n            result.setVector2(key, this._vectors2[key]);\r\n        }\r\n\r\n        // Vector3\r\n        for (const key in this._vectors3) {\r\n            result.setVector3(key, this._vectors3[key]);\r\n        }\r\n\r\n        // Vector4\r\n        for (const key in this._vectors4) {\r\n            result.setVector4(key, this._vectors4[key]);\r\n        }\r\n\r\n        // Quaternion\r\n        for (const key in this._quaternions) {\r\n            result.setQuaternion(key, this._quaternions[key]);\r\n        }\r\n\r\n        // QuaternionArray\r\n        for (const key in this._quaternionsArrays) {\r\n            result._quaternionsArrays[key] = this._quaternionsArrays[key];\r\n        }\r\n\r\n        // Matrix\r\n        for (const key in this._matrices) {\r\n            result.setMatrix(key, this._matrices[key]);\r\n        }\r\n\r\n        // MatrixArray\r\n        for (const key in this._matrixArrays) {\r\n            result._matrixArrays[key] = this._matrixArrays[key].slice();\r\n        }\r\n\r\n        // Matrix 3x3\r\n        for (const key in this._matrices3x3) {\r\n            result.setMatrix3x3(key, this._matrices3x3[key]);\r\n        }\r\n\r\n        // Matrix 2x2\r\n        for (const key in this._matrices2x2) {\r\n            result.setMatrix2x2(key, this._matrices2x2[key]);\r\n        }\r\n\r\n        // Vector2Array\r\n        for (const key in this._vectors2Arrays) {\r\n            result.setArray2(key, this._vectors2Arrays[key]);\r\n        }\r\n\r\n        // Vector3Array\r\n        for (const key in this._vectors3Arrays) {\r\n            result.setArray3(key, this._vectors3Arrays[key]);\r\n        }\r\n\r\n        // Vector4Array\r\n        for (const key in this._vectors4Arrays) {\r\n            result.setArray4(key, this._vectors4Arrays[key]);\r\n        }\r\n\r\n        // Uniform buffers\r\n        for (const key in this._uniformBuffers) {\r\n            result.setUniformBuffer(key, this._uniformBuffers[key]);\r\n        }\r\n\r\n        // Samplers\r\n        for (const key in this._textureSamplers) {\r\n            result.setTextureSampler(key, this._textureSamplers[key]);\r\n        }\r\n\r\n        // Storag buffers\r\n        for (const key in this._storageBuffers) {\r\n            result.setStorageBuffer(key, this._storageBuffers[key]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\r\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\r\n     */\r\n    public override dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, notBoundToMesh?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            let name: string;\r\n            for (name in this._textures) {\r\n                this._textures[name].dispose();\r\n            }\r\n\r\n            for (name in this._textureArrays) {\r\n                const array = this._textureArrays[name];\r\n                for (let index = 0; index < array.length; index++) {\r\n                    array[index].dispose();\r\n                }\r\n            }\r\n        }\r\n\r\n        this._textures = {};\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\r\n    }\r\n\r\n    /**\r\n     * Serializes this material in a JSON representation\r\n     * @returns the serialized material object\r\n     */\r\n    public override serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.ShaderMaterial\";\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        serializationObject.options = this._options;\r\n        serializationObject.shaderPath = this._shaderPath;\r\n        serializationObject.storeEffectOnSubMeshes = this._storeEffectOnSubMeshes;\r\n\r\n        let name: string;\r\n\r\n        // Stencil\r\n        serializationObject.stencil = this.stencil.serialize();\r\n\r\n        // Texture\r\n        serializationObject.textures = {};\r\n        for (name in this._textures) {\r\n            serializationObject.textures[name] = this._textures[name].serialize();\r\n        }\r\n\r\n        // Texture arrays\r\n        serializationObject.textureArrays = {};\r\n        for (name in this._textureArrays) {\r\n            serializationObject.textureArrays[name] = [];\r\n            const array = this._textureArrays[name];\r\n            for (let index = 0; index < array.length; index++) {\r\n                serializationObject.textureArrays[name].push(array[index].serialize());\r\n            }\r\n        }\r\n\r\n        // Int\r\n        serializationObject.ints = {};\r\n        for (name in this._ints) {\r\n            serializationObject.ints[name] = this._ints[name];\r\n        }\r\n\r\n        // UInt\r\n        serializationObject.uints = {};\r\n        for (name in this._uints) {\r\n            serializationObject.uints[name] = this._uints[name];\r\n        }\r\n\r\n        // Float\r\n        serializationObject.floats = {};\r\n        for (name in this._floats) {\r\n            serializationObject.floats[name] = this._floats[name];\r\n        }\r\n\r\n        // Floats\r\n        serializationObject.floatsArrays = {};\r\n        for (name in this._floatsArrays) {\r\n            serializationObject.floatsArrays[name] = this._floatsArrays[name];\r\n        }\r\n\r\n        // Color3\r\n        serializationObject.colors3 = {};\r\n        for (name in this._colors3) {\r\n            const color3 = this._colors3[name];\r\n            serializationObject.colors3[name] = [color3.r, color3.g, color3.b];\r\n        }\r\n\r\n        // Color3 array\r\n        serializationObject.colors3Arrays = {};\r\n        for (name in this._colors3Arrays) {\r\n            serializationObject.colors3Arrays[name] = this._colors3Arrays[name];\r\n        }\r\n\r\n        // Color4\r\n        serializationObject.colors4 = {};\r\n        for (name in this._colors4) {\r\n            const color4 = this._colors4[name];\r\n            serializationObject.colors4[name] = [color4.r, color4.g, color4.b, color4.a];\r\n        }\r\n\r\n        // Color4 array\r\n        serializationObject.colors4Arrays = {};\r\n        for (name in this._colors4Arrays) {\r\n            serializationObject.colors4Arrays[name] = this._colors4Arrays[name];\r\n        }\r\n\r\n        // Vector2\r\n        serializationObject.vectors2 = {};\r\n        for (name in this._vectors2) {\r\n            const v2 = this._vectors2[name];\r\n            serializationObject.vectors2[name] = [v2.x, v2.y];\r\n        }\r\n\r\n        // Vector3\r\n        serializationObject.vectors3 = {};\r\n        for (name in this._vectors3) {\r\n            const v3 = this._vectors3[name];\r\n            serializationObject.vectors3[name] = [v3.x, v3.y, v3.z];\r\n        }\r\n\r\n        // Vector4\r\n        serializationObject.vectors4 = {};\r\n        for (name in this._vectors4) {\r\n            const v4 = this._vectors4[name];\r\n            serializationObject.vectors4[name] = [v4.x, v4.y, v4.z, v4.w];\r\n        }\r\n\r\n        // Quaternion\r\n        serializationObject.quaternions = {};\r\n        for (name in this._quaternions) {\r\n            serializationObject.quaternions[name] = this._quaternions[name].asArray();\r\n        }\r\n\r\n        // Matrix\r\n        serializationObject.matrices = {};\r\n        for (name in this._matrices) {\r\n            serializationObject.matrices[name] = this._matrices[name].asArray();\r\n        }\r\n\r\n        // MatrixArray\r\n        serializationObject.matrixArray = {};\r\n        for (name in this._matrixArrays) {\r\n            serializationObject.matrixArray[name] = this._matrixArrays[name];\r\n        }\r\n\r\n        // Matrix 3x3\r\n        serializationObject.matrices3x3 = {};\r\n        for (name in this._matrices3x3) {\r\n            serializationObject.matrices3x3[name] = this._matrices3x3[name];\r\n        }\r\n\r\n        // Matrix 2x2\r\n        serializationObject.matrices2x2 = {};\r\n        for (name in this._matrices2x2) {\r\n            serializationObject.matrices2x2[name] = this._matrices2x2[name];\r\n        }\r\n\r\n        // Vector2Array\r\n        serializationObject.vectors2Arrays = {};\r\n        for (name in this._vectors2Arrays) {\r\n            serializationObject.vectors2Arrays[name] = this._vectors2Arrays[name];\r\n        }\r\n\r\n        // Vector3Array\r\n        serializationObject.vectors3Arrays = {};\r\n        for (name in this._vectors3Arrays) {\r\n            serializationObject.vectors3Arrays[name] = this._vectors3Arrays[name];\r\n        }\r\n\r\n        // Vector4Array\r\n        serializationObject.vectors4Arrays = {};\r\n        for (name in this._vectors4Arrays) {\r\n            serializationObject.vectors4Arrays[name] = this._vectors4Arrays[name];\r\n        }\r\n\r\n        // QuaternionArray\r\n        serializationObject.quaternionsArrays = {};\r\n        for (name in this._quaternionsArrays) {\r\n            serializationObject.quaternionsArrays[name] = this._quaternionsArrays[name];\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a shader material from parsed shader material data\r\n     * @param source defines the JSON representation of the material\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a new material\r\n     */\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): ShaderMaterial {\r\n        const material = SerializationHelper.Parse(\r\n            () => new ShaderMaterial(source.name, scene, source.shaderPath, source.options, source.storeEffectOnSubMeshes),\r\n            source,\r\n            scene,\r\n            rootUrl\r\n        );\r\n\r\n        let name: string;\r\n\r\n        // Stencil\r\n        if (source.stencil) {\r\n            material.stencil.parse(source.stencil, scene, rootUrl);\r\n        }\r\n\r\n        // Texture\r\n        for (name in source.textures) {\r\n            material.setTexture(name, <BaseTexture>Texture.Parse(source.textures[name], scene, rootUrl));\r\n        }\r\n\r\n        // Texture arrays\r\n        for (name in source.textureArrays) {\r\n            const array = source.textureArrays[name];\r\n            const textureArray: BaseTexture[] = [];\r\n\r\n            for (let index = 0; index < array.length; index++) {\r\n                textureArray.push(<BaseTexture>Texture.Parse(array[index], scene, rootUrl));\r\n            }\r\n            material.setTextureArray(name, textureArray);\r\n        }\r\n\r\n        // Int\r\n        for (name in source.ints) {\r\n            material.setInt(name, source.ints[name]);\r\n        }\r\n\r\n        // UInt\r\n        for (name in source.uints) {\r\n            material.setUInt(name, source.uints[name]);\r\n        }\r\n\r\n        // Float\r\n        for (name in source.floats) {\r\n            material.setFloat(name, source.floats[name]);\r\n        }\r\n\r\n        // Floats\r\n        for (name in source.floatsArrays) {\r\n            material.setFloats(name, source.floatsArrays[name]);\r\n        }\r\n\r\n        // Color3\r\n        for (name in source.colors3) {\r\n            const color = source.colors3[name];\r\n            material.setColor3(name, { r: color[0], g: color[1], b: color[2] });\r\n        }\r\n\r\n        // Color3 arrays\r\n        for (name in source.colors3Arrays) {\r\n            const colors: IColor3Like[] = source.colors3Arrays[name]\r\n                .reduce((arr: Array<Array<number>>, num: number, i: number) => {\r\n                    if (i % 3 === 0) {\r\n                        arr.push([num]);\r\n                    } else {\r\n                        arr[arr.length - 1].push(num);\r\n                    }\r\n                    return arr;\r\n                }, [])\r\n                .map((color: ArrayLike<number>) => ({ r: color[0], g: color[1], b: color[2] }));\r\n            material.setColor3Array(name, colors);\r\n        }\r\n\r\n        // Color4\r\n        for (name in source.colors4) {\r\n            const color = source.colors4[name];\r\n            material.setColor4(name, { r: color[0], g: color[1], b: color[2], a: color[3] });\r\n        }\r\n\r\n        // Color4 arrays\r\n        for (name in source.colors4Arrays) {\r\n            const colors: IColor4Like[] = source.colors4Arrays[name]\r\n                .reduce((arr: Array<Array<number>>, num: number, i: number) => {\r\n                    if (i % 4 === 0) {\r\n                        arr.push([num]);\r\n                    } else {\r\n                        arr[arr.length - 1].push(num);\r\n                    }\r\n                    return arr;\r\n                }, [])\r\n                .map((color: ArrayLike<number>) => ({ r: color[0], g: color[1], b: color[2], a: color[3] }));\r\n            material.setColor4Array(name, colors);\r\n        }\r\n\r\n        // Vector2\r\n        for (name in source.vectors2) {\r\n            const vector = source.vectors2[name];\r\n            material.setVector2(name, { x: vector[0], y: vector[1] });\r\n        }\r\n\r\n        // Vector3\r\n        for (name in source.vectors3) {\r\n            const vector = source.vectors3[name];\r\n            material.setVector3(name, { x: vector[0], y: vector[1], z: vector[2] });\r\n        }\r\n\r\n        // Vector4\r\n        for (name in source.vectors4) {\r\n            const vector = source.vectors4[name];\r\n            material.setVector4(name, { x: vector[0], y: vector[1], z: vector[2], w: vector[3] });\r\n        }\r\n\r\n        // Quaternion\r\n        for (name in source.quaternions) {\r\n            material.setQuaternion(name, Quaternion.FromArray(source.quaternions[name]));\r\n        }\r\n\r\n        // Matrix\r\n        for (name in source.matrices) {\r\n            material.setMatrix(name, Matrix.FromArray(source.matrices[name]));\r\n        }\r\n\r\n        // MatrixArray\r\n        for (name in source.matrixArray) {\r\n            material._matrixArrays[name] = new Float32Array(source.matrixArray[name]);\r\n        }\r\n\r\n        // Matrix 3x3\r\n        for (name in source.matrices3x3) {\r\n            material.setMatrix3x3(name, source.matrices3x3[name]);\r\n        }\r\n\r\n        // Matrix 2x2\r\n        for (name in source.matrices2x2) {\r\n            material.setMatrix2x2(name, source.matrices2x2[name]);\r\n        }\r\n\r\n        // Vector2Array\r\n        for (name in source.vectors2Arrays) {\r\n            material.setArray2(name, source.vectors2Arrays[name]);\r\n        }\r\n\r\n        // Vector3Array\r\n        for (name in source.vectors3Arrays) {\r\n            material.setArray3(name, source.vectors3Arrays[name]);\r\n        }\r\n\r\n        // Vector4Array\r\n        for (name in source.vectors4Arrays) {\r\n            material.setArray4(name, source.vectors4Arrays[name]);\r\n        }\r\n\r\n        // QuaternionArray\r\n        for (name in source.quaternionsArrays) {\r\n            material.setArray4(name, source.quaternionsArrays[name]);\r\n        }\r\n\r\n        return material;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ShaderMaterial from a snippet saved in a remote file\r\n     * @param name defines the name of the ShaderMaterial to create (can be null or empty to use the one from the json data)\r\n     * @param url defines the url to load from\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a promise that will resolve to the new ShaderMaterial\r\n     */\r\n    public static async ParseFromFileAsync(name: Nullable<string>, url: string, scene: Scene, rootUrl = \"\"): Promise<ShaderMaterial> {\r\n        return await new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        const serializationObject = JSON.parse(request.responseText);\r\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\r\n\r\n                        if (name) {\r\n                            output.name = name;\r\n                        }\r\n\r\n                        resolve(output);\r\n                    } else {\r\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                        reject(\"Unable to load the ShaderMaterial\");\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", url);\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a ShaderMaterial from a snippet saved by the Inspector\r\n     * @param snippetId defines the snippet to load\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a promise that will resolve to the new ShaderMaterial\r\n     */\r\n    public static async ParseFromSnippetAsync(snippetId: string, scene: Scene, rootUrl = \"\"): Promise<ShaderMaterial> {\r\n        return await new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        const snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\r\n                        const serializationObject = JSON.parse(snippet.shaderMaterial);\r\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\r\n\r\n                        output.snippetId = snippetId;\r\n\r\n                        resolve(output);\r\n                    } else {\r\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                        reject(\"Unable to load the snippet \" + snippetId);\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a ShaderMaterial from a snippet saved by the Inspector\r\n     * @deprecated Please use ParseFromSnippetAsync instead\r\n     * @param snippetId defines the snippet to load\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a promise that will resolve to the new ShaderMaterial\r\n     */\r\n    public static CreateFromSnippetAsync = ShaderMaterial.ParseFromSnippetAsync;\r\n}\r\n\r\nRegisterClass(\"BABYLON.ShaderMaterial\", ShaderMaterial);\r\n", "import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport type { Node } from \"../node\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { InstancedMesh } from \"../Meshes/instancedMesh\";\r\nimport { Material } from \"../Materials/material\";\r\nimport type { IShaderMaterialOptions } from \"../Materials/shaderMaterial\";\r\nimport { ShaderMaterial } from \"../Materials/shaderMaterial\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { MeshCreationOptions } from \"./mesh\";\r\nimport { ShaderLanguage } from \"core/Materials/shaderLanguage\";\r\n\r\nMesh._LinesMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n    return LinesMesh.Parse(parsedMesh, scene);\r\n};\r\n\r\n/**\r\n * Line mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n */\r\nexport class LinesMesh extends Mesh {\r\n    /**\r\n     * Force all the LineMeshes to compile their default color material to glsl even on WebGPU engines.\r\n     * False by default. This is mostly meant for backward compatibility.\r\n     */\r\n    public static ForceGLSL = false;\r\n\r\n    /**\r\n     * Color of the line (Default: White)\r\n     */\r\n    public color = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Alpha of the line (Default: 1)\r\n     */\r\n    public alpha = 1;\r\n\r\n    /**\r\n     * The intersection Threshold is the margin applied when intersection a segment of the LinesMesh with a Ray.\r\n     * This margin is expressed in world space coordinates, so its value may vary.\r\n     * Default value is 0.1\r\n     */\r\n    public intersectionThreshold: number;\r\n\r\n    private _isShaderMaterial(shader: Nullable<Material>): shader is ShaderMaterial {\r\n        if (!shader) {\r\n            return false;\r\n        }\r\n\r\n        return shader.getClassName() === \"ShaderMaterial\";\r\n    }\r\n\r\n    private _color4: Color4;\r\n\r\n    /** Shader language used by the material */\r\n    protected _shaderLanguage = ShaderLanguage.GLSL;\r\n\r\n    private _ownsMaterial: boolean = false;\r\n\r\n    /**\r\n     * Creates a new LinesMesh\r\n     * @param name defines the name\r\n     * @param scene defines the hosting scene\r\n     * @param parent defines the parent mesh if any\r\n     * @param source defines the optional source LinesMesh used to clone data from\r\n     * @param doNotCloneChildren When cloning, skip cloning child meshes of source, default False.\r\n     * When false, achieved by calling a clone(), also passing False.\r\n     * This will make creation of children, recursive.\r\n     * @param useVertexColor defines if this LinesMesh supports vertex color\r\n     * @param useVertexAlpha defines if this LinesMesh supports vertex alpha\r\n     * @param material material to use to draw the line. If not provided, will create a new one\r\n     */\r\n    constructor(\r\n        name: string,\r\n        scene: Nullable<Scene> = null,\r\n        parent: Nullable<Node> = null,\r\n        source: Nullable<LinesMesh> = null,\r\n        doNotCloneChildren?: boolean,\r\n        /**\r\n         * If vertex color should be applied to the mesh\r\n         */\r\n        public readonly useVertexColor?: boolean,\r\n        /**\r\n         * If vertex alpha should be applied to the mesh\r\n         */\r\n        public readonly useVertexAlpha?: boolean,\r\n        material?: Material\r\n    ) {\r\n        super(name, scene, parent, source, doNotCloneChildren);\r\n\r\n        if (source) {\r\n            this.color = source.color.clone();\r\n            this.alpha = source.alpha;\r\n            this.useVertexColor = source.useVertexColor;\r\n            this.useVertexAlpha = source.useVertexAlpha;\r\n        }\r\n\r\n        this.intersectionThreshold = 0.1;\r\n\r\n        const defines: string[] = [];\r\n        const options: Partial<IShaderMaterialOptions> = {\r\n            attributes: [VertexBuffer.PositionKind],\r\n            uniforms: [\"world\", \"viewProjection\"],\r\n            needAlphaBlending: true,\r\n            defines: defines,\r\n            useClipPlane: null,\r\n            shaderLanguage: ShaderLanguage.GLSL,\r\n        };\r\n\r\n        if (!this.useVertexAlpha) {\r\n            options.needAlphaBlending = false;\r\n        } else {\r\n            options.defines!.push(\"#define VERTEXALPHA\");\r\n        }\r\n\r\n        if (!this.useVertexColor) {\r\n            options.uniforms!.push(\"color\");\r\n            this._color4 = new Color4();\r\n        } else {\r\n            options.defines!.push(\"#define VERTEXCOLOR\");\r\n            options.attributes!.push(VertexBuffer.ColorKind);\r\n        }\r\n\r\n        if (material) {\r\n            this.material = material;\r\n        } else {\r\n            const engine = this.getScene().getEngine();\r\n\r\n            if (engine.isWebGPU && !LinesMesh.ForceGLSL) {\r\n                this._shaderLanguage = ShaderLanguage.WGSL;\r\n            }\r\n\r\n            options.shaderLanguage = this._shaderLanguage;\r\n            options.extraInitializationsAsync = async () => {\r\n                if (this._shaderLanguage === ShaderLanguage.WGSL) {\r\n                    await Promise.all([import(\"../ShadersWGSL/color.vertex\"), import(\"../ShadersWGSL/color.fragment\")]);\r\n                } else {\r\n                    await Promise.all([import(\"../Shaders/color.vertex\"), import(\"../Shaders/color.fragment\")]);\r\n                }\r\n            };\r\n\r\n            const material = new ShaderMaterial(\"colorShader\", this.getScene(), \"color\", options, false);\r\n            material.doNotSerialize = true;\r\n\r\n            this._ownsMaterial = true;\r\n            this._setInternalMaterial(material);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns the string \"LineMesh\"\r\n     */\r\n    public override getClassName(): string {\r\n        return \"LinesMesh\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override get material(): Nullable<Material> {\r\n        return this._internalAbstractMeshDataInfo._material as Material;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override set material(value: Nullable<Material>) {\r\n        const currentMaterial = this.material;\r\n        if (currentMaterial === value) {\r\n            return;\r\n        }\r\n\r\n        const shouldDispose = currentMaterial && this._ownsMaterial;\r\n        this._ownsMaterial = false;\r\n        this._setInternalMaterial(value);\r\n\r\n        if (shouldDispose) {\r\n            currentMaterial?.dispose();\r\n        }\r\n    }\r\n\r\n    private _setInternalMaterial(material: Nullable<Material>) {\r\n        this._setMaterial(material);\r\n        if (this.material) {\r\n            this.material.fillMode = Material.LineListDrawMode;\r\n            (this.material as any).disableLighting = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override get checkCollisions(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public override set checkCollisions(value: boolean) {\r\n        // Just ignore it\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _bind(_subMesh: SubMesh, colorEffect: Effect): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        // VBOs\r\n        const indexToBind = this.isUnIndexed ? null : this._geometry.getIndexBuffer();\r\n        if (!this._userInstancedBuffersStorage || this.hasThinInstances) {\r\n            this._geometry._bind(colorEffect, indexToBind);\r\n        } else {\r\n            this._geometry._bind(colorEffect, indexToBind, this._userInstancedBuffersStorage.vertexBuffers, this._userInstancedBuffersStorage.vertexArrayObjects);\r\n        }\r\n\r\n        // Color\r\n        if (!this.useVertexColor && this._isShaderMaterial(this.material)) {\r\n            const { r, g, b } = this.color;\r\n            this._color4.set(r, g, b, this.alpha);\r\n            this.material.setColor4(\"color\", this._color4);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _draw(subMesh: SubMesh, fillMode: number, instancesCount?: number): Mesh {\r\n        if (!this._geometry || !this._geometry.getVertexBuffers() || (!this._unIndexed && !this._geometry.getIndexBuffer())) {\r\n            return this;\r\n        }\r\n\r\n        const engine = this.getScene().getEngine();\r\n\r\n        // Draw order\r\n\r\n        if (this._unIndexed) {\r\n            engine.drawArraysType(Material.LineListDrawMode, subMesh.verticesStart, subMesh.verticesCount, instancesCount);\r\n        } else {\r\n            engine.drawElementsType(Material.LineListDrawMode, subMesh.indexStart, subMesh.indexCount, instancesCount);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the line mesh (this disposes of the automatically created material if not instructed otherwise).\r\n     * @param doNotRecurse If children should be disposed\r\n     * @param disposeMaterialAndTextures This parameter is used to force disposing the material in case it is not the default one\r\n     * @param doNotDisposeMaterial If the material should not be disposed (default: false, meaning the material might be disposed)\r\n     */\r\n    public override dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false, doNotDisposeMaterial?: boolean): void {\r\n        if (!doNotDisposeMaterial) {\r\n            if (this._ownsMaterial) {\r\n                this.material?.dispose(false, false, true);\r\n            } else if (disposeMaterialAndTextures) {\r\n                this.material?.dispose(false, false, true);\r\n            }\r\n        }\r\n\r\n        super.dispose(doNotRecurse);\r\n    }\r\n\r\n    /**\r\n     * Returns a new LineMesh object cloned from the current one.\r\n     * @param name defines the cloned mesh name\r\n     * @param newParent defines the new mesh parent\r\n     * @param doNotCloneChildren if set to true, none of the mesh children are cloned (false by default)\r\n     * @returns the new mesh\r\n     */\r\n    public override clone(name: string, newParent: Nullable<Node> | MeshCreationOptions = null, doNotCloneChildren?: boolean): LinesMesh {\r\n        if (newParent && (newParent as Node)._addToSceneRootNodes === undefined) {\r\n            const createOptions = newParent as MeshCreationOptions;\r\n            createOptions.source = this;\r\n\r\n            return new LinesMesh(name, this.getScene(), createOptions.parent, createOptions.source as Nullable<LinesMesh>, createOptions.doNotCloneChildren);\r\n        }\r\n\r\n        return new LinesMesh(name, this.getScene(), newParent as Nullable<Node>, this, doNotCloneChildren);\r\n    }\r\n\r\n    /**\r\n     * Creates a new InstancedLinesMesh object from the mesh model.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\r\n     * @param name defines the name of the new instance\r\n     * @returns a new InstancedLinesMesh\r\n     */\r\n    public override createInstance(name: string): InstancedLinesMesh {\r\n        const instance = new InstancedLinesMesh(name, this);\r\n\r\n        if (this.instancedBuffers) {\r\n            instance.instancedBuffers = {};\r\n\r\n            for (const key in this.instancedBuffers) {\r\n                instance.instancedBuffers[key] = this.instancedBuffers[key];\r\n            }\r\n        }\r\n\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * Serializes this ground mesh\r\n     * @param serializationObject object to write serialization to\r\n     */\r\n    public override serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.color = this.color.asArray();\r\n        serializationObject.alpha = this.alpha;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized ground mesh\r\n     * @param parsedMesh the serialized mesh\r\n     * @param scene the scene to create the ground mesh in\r\n     * @returns the created ground mesh\r\n     */\r\n    public static override Parse(parsedMesh: any, scene: Scene): LinesMesh {\r\n        const result = new LinesMesh(parsedMesh.name, scene);\r\n\r\n        result.color = Color3.FromArray(parsedMesh.color);\r\n        result.alpha = parsedMesh.alpha;\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates an instance based on a source LinesMesh\r\n */\r\nexport class InstancedLinesMesh extends InstancedMesh {\r\n    /**\r\n     * The intersection Threshold is the margin applied when intersection a segment of the LinesMesh with a Ray.\r\n     * This margin is expressed in world space coordinates, so its value may vary.\r\n     * Initialized with the intersectionThreshold value of the source LinesMesh\r\n     */\r\n    public intersectionThreshold: number;\r\n\r\n    constructor(name: string, source: LinesMesh) {\r\n        super(name, source);\r\n        this.intersectionThreshold = source.intersectionThreshold;\r\n    }\r\n\r\n    /**\r\n     * @returns the string \"InstancedLinesMesh\".\r\n     */\r\n    public override getClassName(): string {\r\n        return \"InstancedLinesMesh\";\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { Color4 } from \"../../Maths/math.color\";\r\nimport { _CreationDataStorage, Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { FloatArray, Nullable } from \"../../types\";\r\nimport { LinesMesh } from \"../../Meshes/linesMesh\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport { Logger } from \"../../Misc/logger\";\r\n\r\nimport type { Material } from \"../../Materials/material\";\r\n\r\n/**\r\n * Creates the VertexData of the LineSystem\r\n * @param options an object used to set the following optional parameters for the LineSystem, required but can be empty\r\n *  - lines an array of lines, each line being an array of successive Vector3\r\n *  - colors an array of line colors, each of the line colors being an array of successive Color4, one per line point\r\n * @returns the VertexData of the LineSystem\r\n */\r\nexport function CreateLineSystemVertexData(options: { lines: Vector3[][]; colors?: Nullable<Color4[][]> }): VertexData {\r\n    const indices = [];\r\n    const positions = [];\r\n    const lines = options.lines;\r\n    const colors = options.colors;\r\n    const vertexColors = [];\r\n    let idx = 0;\r\n\r\n    for (let l = 0; l < lines.length; l++) {\r\n        const points = lines[l];\r\n        for (let index = 0; index < points.length; index++) {\r\n            const { x, y, z } = points[index];\r\n            positions.push(x, y, z);\r\n            if (colors) {\r\n                const color = colors[l];\r\n                const { r, g, b, a } = color[index];\r\n                vertexColors.push(r, g, b, a);\r\n            }\r\n            if (index > 0) {\r\n                indices.push(idx - 1);\r\n                indices.push(idx);\r\n            }\r\n            idx++;\r\n        }\r\n    }\r\n    const vertexData = new VertexData();\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    if (colors) {\r\n        vertexData.colors = vertexColors;\r\n    }\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Create the VertexData for a DashedLines\r\n * @param options an object used to set the following optional parameters for the DashedLines, required but can be empty\r\n *  - points an array successive Vector3\r\n *  - dashSize the size of the dashes relative to the dash number, optional, default 3\r\n *  - gapSize the size of the gap between two successive dashes relative to the dash number, optional, default 1\r\n *  - dashNb the intended total number of dashes, optional, default 200\r\n * @returns the VertexData for the DashedLines\r\n */\r\nexport function CreateDashedLinesVertexData(options: { points: Vector3[]; dashSize?: number; gapSize?: number; dashNb?: number }): VertexData {\r\n    const dashSize = options.dashSize || 3;\r\n    const gapSize = options.gapSize || 1;\r\n    const dashNb = options.dashNb || 200;\r\n    const points = options.points;\r\n\r\n    const positions: number[] = [];\r\n    const indices: number[] = [];\r\n\r\n    const curvect = Vector3.Zero();\r\n    let lg = 0;\r\n    let nb = 0;\r\n    let shft = 0;\r\n    let dashshft = 0;\r\n    let curshft = 0;\r\n    let idx = 0;\r\n    let i = 0;\r\n    for (i = 0; i < points.length - 1; i++) {\r\n        points[i + 1].subtractToRef(points[i], curvect);\r\n        lg += curvect.length();\r\n    }\r\n    shft = lg / dashNb;\r\n    dashshft = (dashSize * shft) / (dashSize + gapSize);\r\n    for (i = 0; i < points.length - 1; i++) {\r\n        points[i + 1].subtractToRef(points[i], curvect);\r\n        nb = Math.floor(curvect.length() / shft);\r\n        curvect.normalize();\r\n        for (let j = 0; j < nb; j++) {\r\n            curshft = shft * j;\r\n            positions.push(points[i].x + curshft * curvect.x, points[i].y + curshft * curvect.y, points[i].z + curshft * curvect.z);\r\n            positions.push(points[i].x + (curshft + dashshft) * curvect.x, points[i].y + (curshft + dashshft) * curvect.y, points[i].z + (curshft + dashshft) * curvect.z);\r\n            indices.push(idx, idx + 1);\r\n            idx += 2;\r\n        }\r\n    }\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n    vertexData.positions = positions;\r\n    vertexData.indices = indices;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a line system mesh. A line system is a pool of many lines gathered in a single mesh\r\n * * A line system mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of lines as an input parameter\r\n * * Like every other parametric shape, it is dynamically updatable by passing an existing instance of LineSystem to this static function\r\n * * The parameter `lines` is an array of lines, each line being an array of successive Vector3\r\n * * The optional parameter `instance` is an instance of an existing LineSystem object to be updated with the passed `lines` parameter\r\n * * The optional parameter `colors` is an array of line colors, each line colors being an array of successive Color4, one per line point\r\n * * The optional parameter `useVertexAlpha` is to be set to `false` (default `true`) when you don't need the alpha blending (faster)\r\n * * The optional parameter `material` is the material to use to draw the lines if provided. If not, a default material will be created\r\n * * Updating a simple Line mesh, you just need to update every line in the `lines` array : https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#lines-and-dashedlines\r\n * * When updating an instance, remember that only line point positions can change, not the number of points, neither the number of lines\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#line-system\r\n * @param name defines the name of the new line system\r\n * @param options defines the options used to create the line system\r\n * @param scene defines the hosting scene\r\n * @returns a new line system mesh\r\n */\r\nexport function CreateLineSystem(\r\n    name: string,\r\n    options: { lines: Vector3[][]; updatable?: boolean; instance?: Nullable<LinesMesh>; colors?: Nullable<Color4[][]>; useVertexAlpha?: boolean; material?: Material },\r\n    scene: Nullable<Scene> = null\r\n): LinesMesh {\r\n    const instance = options.instance;\r\n    const lines = options.lines;\r\n    const colors = options.colors;\r\n\r\n    if (instance) {\r\n        // lines update\r\n        const positions = instance.getVerticesData(VertexBuffer.PositionKind)!;\r\n        let vertexColor;\r\n        let lineColors;\r\n        if (colors) {\r\n            vertexColor = instance.getVerticesData(VertexBuffer.ColorKind)!;\r\n        }\r\n        let i = 0;\r\n        let c = 0;\r\n        for (let l = 0; l < lines.length; l++) {\r\n            const points = lines[l];\r\n            for (let p = 0; p < points.length; p++) {\r\n                positions[i] = points[p].x;\r\n                positions[i + 1] = points[p].y;\r\n                positions[i + 2] = points[p].z;\r\n                if (colors && vertexColor) {\r\n                    lineColors = colors[l];\r\n                    vertexColor[c] = lineColors[p].r;\r\n                    vertexColor[c + 1] = lineColors[p].g;\r\n                    vertexColor[c + 2] = lineColors[p].b;\r\n                    vertexColor[c + 3] = lineColors[p].a;\r\n                    c += 4;\r\n                }\r\n                i += 3;\r\n            }\r\n        }\r\n        instance.updateVerticesData(VertexBuffer.PositionKind, positions, false, false);\r\n        if (colors && vertexColor) {\r\n            instance.updateVerticesData(VertexBuffer.ColorKind, vertexColor, false, false);\r\n        }\r\n        instance.refreshBoundingInfo();\r\n        return instance;\r\n    }\r\n\r\n    // line system creation\r\n    const useVertexColor = colors ? true : false;\r\n    const lineSystem = new LinesMesh(name, scene, null, undefined, undefined, useVertexColor, options.useVertexAlpha, options.material);\r\n    const vertexData = CreateLineSystemVertexData(options);\r\n    vertexData.applyToMesh(lineSystem, options.updatable);\r\n    return lineSystem;\r\n}\r\n\r\n/**\r\n * Creates a line mesh\r\n * A line mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of points as an input parameter\r\n * * Like every other parametric shape, it is dynamically updatable by passing an existing instance of LineMesh to this static function\r\n * * The parameter `points` is an array successive Vector3\r\n * * The optional parameter `instance` is an instance of an existing LineMesh object to be updated with the passed `points` parameter : https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#lines-and-dashedlines\r\n * * The optional parameter `colors` is an array of successive Color4, one per line point\r\n * * The optional parameter `useVertexAlpha` is to be set to `false` (default `true`) when you don't need alpha blending (faster)\r\n * * The optional parameter `material` is the material to use to draw the lines if provided. If not, a default material will be created\r\n * * When updating an instance, remember that only point positions can change, not the number of points\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#lines\r\n * @param name defines the name of the new line system\r\n * @param options defines the options used to create the line system\r\n * @param scene defines the hosting scene\r\n * @returns a new line mesh\r\n */\r\nexport function CreateLines(\r\n    name: string,\r\n    options: { points: Vector3[]; updatable?: boolean; instance?: Nullable<LinesMesh>; colors?: Color4[]; useVertexAlpha?: boolean; material?: Material },\r\n    scene: Nullable<Scene> = null\r\n): LinesMesh {\r\n    const colors = options.colors ? [options.colors] : null;\r\n    const lines = CreateLineSystem(\r\n        name,\r\n        { lines: [options.points], updatable: options.updatable, instance: options.instance, colors: colors, useVertexAlpha: options.useVertexAlpha, material: options.material },\r\n        scene\r\n    );\r\n    return lines;\r\n}\r\n\r\n/**\r\n * Creates a dashed line mesh\r\n * * A dashed line mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of points as an input parameter\r\n * * Like every other parametric shape, it is dynamically updatable by passing an existing instance of LineMesh to this static function\r\n * * The parameter `points` is an array successive Vector3\r\n * * The parameter `dashNb` is the intended total number of dashes (positive integer, default 200)\r\n * * The parameter `dashSize` is the size of the dashes relatively the dash number (positive float, default 3)\r\n * * The parameter `gapSize` is the size of the gap between two successive dashes relatively the dash number (positive float, default 1)\r\n * * The optional parameter `instance` is an instance of an existing LineMesh object to be updated with the passed `points` parameter : https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#lines-and-dashedlines\r\n * * The optional parameter `useVertexAlpha` is to be set to `false` (default `true`) when you don't need the alpha blending (faster)\r\n * * The optional parameter `material` is the material to use to draw the lines if provided. If not, a default material will be created\r\n * * When updating an instance, remember that only point positions can change, not the number of points\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the dashed line mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#dashed-lines\r\n */\r\nexport function CreateDashedLines(\r\n    name: string,\r\n    options: { points: Vector3[]; dashSize?: number; gapSize?: number; dashNb?: number; updatable?: boolean; instance?: LinesMesh; useVertexAlpha?: boolean; material?: Material },\r\n    scene: Nullable<Scene> = null\r\n): LinesMesh {\r\n    const points = options.points;\r\n    const instance = options.instance;\r\n    const gapSize = options.gapSize || 1;\r\n    const dashSize = options.dashSize || 3;\r\n\r\n    if (instance) {\r\n        //  dashed lines update\r\n        const positionFunction = (positions: FloatArray): void => {\r\n            const curvect = Vector3.Zero();\r\n            const nbSeg = positions.length / 6;\r\n            let lg = 0;\r\n            let nb = 0;\r\n            let shft = 0;\r\n            let dashshft = 0;\r\n            let curshft = 0;\r\n            let p = 0;\r\n            let i = 0;\r\n            let j = 0;\r\n            for (i = 0; i < points.length - 1; i++) {\r\n                points[i + 1].subtractToRef(points[i], curvect);\r\n                lg += curvect.length();\r\n            }\r\n            shft = lg / nbSeg;\r\n            const dashSize = instance._creationDataStorage!.dashSize;\r\n            const gapSize = instance._creationDataStorage!.gapSize;\r\n            dashshft = (dashSize * shft) / (dashSize + gapSize);\r\n            for (i = 0; i < points.length - 1; i++) {\r\n                points[i + 1].subtractToRef(points[i], curvect);\r\n                nb = Math.floor(curvect.length() / shft);\r\n                curvect.normalize();\r\n                j = 0;\r\n                while (j < nb && p < positions.length) {\r\n                    curshft = shft * j;\r\n                    positions[p] = points[i].x + curshft * curvect.x;\r\n                    positions[p + 1] = points[i].y + curshft * curvect.y;\r\n                    positions[p + 2] = points[i].z + curshft * curvect.z;\r\n                    positions[p + 3] = points[i].x + (curshft + dashshft) * curvect.x;\r\n                    positions[p + 4] = points[i].y + (curshft + dashshft) * curvect.y;\r\n                    positions[p + 5] = points[i].z + (curshft + dashshft) * curvect.z;\r\n                    p += 6;\r\n                    j++;\r\n                }\r\n            }\r\n            while (p < positions.length) {\r\n                positions[p] = points[i].x;\r\n                positions[p + 1] = points[i].y;\r\n                positions[p + 2] = points[i].z;\r\n                p += 3;\r\n            }\r\n        };\r\n        if (options.dashNb || options.dashSize || options.gapSize || options.useVertexAlpha || options.material) {\r\n            Logger.Warn(\"You have used an option other than points with the instance option. Please be aware that these other options will be ignored.\");\r\n        }\r\n        instance.updateMeshPositions(positionFunction, false);\r\n        return instance;\r\n    }\r\n    // dashed lines creation\r\n    const dashedLines = new LinesMesh(name, scene, null, undefined, undefined, undefined, options.useVertexAlpha, options.material);\r\n    const vertexData = CreateDashedLinesVertexData(options);\r\n    vertexData.applyToMesh(dashedLines, options.updatable);\r\n\r\n    dashedLines._creationDataStorage = new _CreationDataStorage();\r\n    dashedLines._creationDataStorage.dashSize = dashSize;\r\n    dashedLines._creationDataStorage.gapSize = gapSize;\r\n    return dashedLines;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the functions directly from the module\r\n */\r\nexport const LinesBuilder = {\r\n    CreateDashedLines,\r\n    CreateLineSystem,\r\n    CreateLines,\r\n};\r\n\r\nVertexData.CreateLineSystem = CreateLineSystemVertexData;\r\nVertexData.CreateDashedLines = CreateDashedLinesVertexData;\r\n\r\nMesh.CreateLines = (name: string, points: Vector3[], scene: Nullable<Scene> = null, updatable: boolean = false, instance: Nullable<LinesMesh> = null): LinesMesh => {\r\n    const options = {\r\n        points,\r\n        updatable,\r\n        instance,\r\n    };\r\n    return CreateLines(name, options, scene);\r\n};\r\n\r\nMesh.CreateDashedLines = (\r\n    name: string,\r\n    points: Vector3[],\r\n    dashSize: number,\r\n    gapSize: number,\r\n    dashNb: number,\r\n    scene: Nullable<Scene> = null,\r\n    updatable?: boolean,\r\n    instance?: LinesMesh\r\n): LinesMesh => {\r\n    const options = {\r\n        points,\r\n        dashSize,\r\n        gapSize,\r\n        dashNb,\r\n        updatable,\r\n        instance,\r\n    };\r\n    return CreateDashedLines(name, options, scene);\r\n};\r\n", "import { Logger } from \"../Misc/logger\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Vector3, Vector2 } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Path2 } from \"../Maths/math.path\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let earcut: any;\r\n/**\r\n * Vector2 wth index property\r\n */\r\nclass IndexedVector2 extends Vector2 {\r\n    constructor(\r\n        original: Vector2,\r\n        /** Index of the vector2 */\r\n        public index: number\r\n    ) {\r\n        super(original.x, original.y);\r\n    }\r\n}\r\n\r\n/**\r\n * Defines points to create a polygon\r\n */\r\nclass PolygonPoints {\r\n    elements = [] as IndexedVector2[];\r\n\r\n    add(originalPoints: Array<Vector2>): Array<IndexedVector2> {\r\n        const result: IndexedVector2[] = [];\r\n        for (const point of originalPoints) {\r\n            const newPoint = new IndexedVector2(point, this.elements.length);\r\n            result.push(newPoint);\r\n            this.elements.push(newPoint);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    computeBounds(): { min: Vector2; max: Vector2; width: number; height: number } {\r\n        const lmin = new Vector2(this.elements[0].x, this.elements[0].y);\r\n        const lmax = new Vector2(this.elements[0].x, this.elements[0].y);\r\n\r\n        for (const point of this.elements) {\r\n            // x\r\n            if (point.x < lmin.x) {\r\n                lmin.x = point.x;\r\n            } else if (point.x > lmax.x) {\r\n                lmax.x = point.x;\r\n            }\r\n\r\n            // y\r\n            if (point.y < lmin.y) {\r\n                lmin.y = point.y;\r\n            } else if (point.y > lmax.y) {\r\n                lmax.y = point.y;\r\n            }\r\n        }\r\n\r\n        return {\r\n            min: lmin,\r\n            max: lmax,\r\n            width: lmax.x - lmin.x,\r\n            height: lmax.y - lmin.y,\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Polygon\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#non-regular-polygon\r\n */\r\nexport class Polygon {\r\n    /**\r\n     * Creates a rectangle\r\n     * @param xmin bottom X coord\r\n     * @param ymin bottom Y coord\r\n     * @param xmax top X coord\r\n     * @param ymax top Y coord\r\n     * @returns points that make the resulting rectangle\r\n     */\r\n    static Rectangle(xmin: number, ymin: number, xmax: number, ymax: number): Vector2[] {\r\n        return [new Vector2(xmin, ymin), new Vector2(xmax, ymin), new Vector2(xmax, ymax), new Vector2(xmin, ymax)];\r\n    }\r\n\r\n    /**\r\n     * Creates a circle\r\n     * @param radius radius of circle\r\n     * @param cx scale in x\r\n     * @param cy scale in y\r\n     * @param numberOfSides number of sides that make up the circle\r\n     * @returns points that make the resulting circle\r\n     */\r\n    static Circle(radius: number, cx: number = 0, cy: number = 0, numberOfSides: number = 32): Vector2[] {\r\n        const result: Vector2[] = [];\r\n\r\n        let angle = 0;\r\n        const increment = (Math.PI * 2) / numberOfSides;\r\n\r\n        for (let i = 0; i < numberOfSides; i++) {\r\n            result.push(new Vector2(cx + Math.cos(angle) * radius, cy + Math.sin(angle) * radius));\r\n            angle -= increment;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a polygon from input string\r\n     * @param input Input polygon data\r\n     * @returns the parsed points\r\n     */\r\n    static Parse(input: string): Vector2[] {\r\n        const floats = input\r\n            .split(/[^-+eE.\\d]+/)\r\n            .map(parseFloat)\r\n            .filter((val) => !isNaN(val));\r\n        let i: number;\r\n        const result = [];\r\n        for (i = 0; i < (floats.length & 0x7ffffffe); i += 2) {\r\n            result.push(new Vector2(floats[i], floats[i + 1]));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Starts building a polygon from x and y coordinates\r\n     * @param x x coordinate\r\n     * @param y y coordinate\r\n     * @returns the started path2\r\n     */\r\n    static StartingAt(x: number, y: number): Path2 {\r\n        return Path2.StartingAt(x, y);\r\n    }\r\n}\r\n\r\n/**\r\n * Builds a polygon\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param/polyMeshBuilder\r\n */\r\nexport class PolygonMeshBuilder {\r\n    private _points = new PolygonPoints();\r\n    private _outlinepoints = new PolygonPoints();\r\n    private _holes = new Array<PolygonPoints>();\r\n\r\n    private _name: string;\r\n    private _scene: Nullable<Scene>;\r\n\r\n    private _epoints: number[] = new Array<number>();\r\n    private _eholes: number[] = new Array<number>();\r\n\r\n    private _addToepoint(points: Vector2[]) {\r\n        for (const p of points) {\r\n            this._epoints.push(p.x, p.y);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Babylon reference to the earcut plugin.\r\n     */\r\n    public bjsEarcut: any;\r\n\r\n    /**\r\n     * Creates a PolygonMeshBuilder\r\n     * @param name name of the builder\r\n     * @param contours Path of the polygon\r\n     * @param scene scene to add to when creating the mesh\r\n     * @param earcutInjection can be used to inject your own earcut reference\r\n     */\r\n    constructor(name: string, contours: Path2 | Vector2[] | any, scene?: Scene, earcutInjection = earcut) {\r\n        this.bjsEarcut = earcutInjection;\r\n        this._name = name;\r\n        this._scene = scene || EngineStore.LastCreatedScene;\r\n\r\n        let points: Vector2[];\r\n        if (contours instanceof Path2) {\r\n            points = contours.getPoints();\r\n        } else {\r\n            points = <Vector2[]>contours;\r\n        }\r\n\r\n        this._addToepoint(points);\r\n\r\n        this._points.add(points);\r\n        this._outlinepoints.add(points);\r\n\r\n        if (typeof this.bjsEarcut === \"undefined\") {\r\n            Logger.Warn(\"Earcut was not found, the polygon will not be built.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a hole within the polygon\r\n     * @param hole Array of points defining the hole\r\n     * @returns this\r\n     */\r\n    addHole(hole: Vector2[]): PolygonMeshBuilder {\r\n        this._points.add(hole);\r\n        const holepoints = new PolygonPoints();\r\n        holepoints.add(hole);\r\n        this._holes.push(holepoints);\r\n\r\n        this._eholes.push(this._epoints.length / 2);\r\n        this._addToepoint(hole);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates the polygon\r\n     * @param updatable If the mesh should be updatable\r\n     * @param depth The depth of the mesh created\r\n     * @param smoothingThreshold Dot product threshold for smoothed normals\r\n     * @returns the created mesh\r\n     */\r\n    build(updatable: boolean = false, depth: number = 0, smoothingThreshold: number = 2): Mesh {\r\n        const result = new Mesh(this._name, this._scene);\r\n\r\n        const vertexData = this.buildVertexData(depth, smoothingThreshold);\r\n\r\n        result.setVerticesData(VertexBuffer.PositionKind, <number[]>vertexData.positions, updatable);\r\n        result.setVerticesData(VertexBuffer.NormalKind, <number[]>vertexData.normals, updatable);\r\n        result.setVerticesData(VertexBuffer.UVKind, <number[]>vertexData.uvs, updatable);\r\n        result.setIndices(<number[]>vertexData.indices);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates the polygon\r\n     * @param depth The depth of the mesh created\r\n     * @param smoothingThreshold Dot product threshold for smoothed normals\r\n     * @returns the created VertexData\r\n     */\r\n    buildVertexData(depth: number = 0, smoothingThreshold: number = 2): VertexData {\r\n        const result = new VertexData();\r\n\r\n        const normals: number[] = [];\r\n        const positions: number[] = [];\r\n        const uvs: number[] = [];\r\n\r\n        const bounds = this._points.computeBounds();\r\n        for (const p of this._points.elements) {\r\n            normals.push(0, 1.0, 0);\r\n            positions.push(p.x, 0, p.y);\r\n            uvs.push((p.x - bounds.min.x) / bounds.width, (p.y - bounds.min.y) / bounds.height);\r\n        }\r\n\r\n        const indices: number[] = [];\r\n\r\n        const res = this.bjsEarcut(this._epoints, this._eholes, 2);\r\n\r\n        for (let i = 0; i < res.length; i++) {\r\n            indices.push(res[i]);\r\n        }\r\n\r\n        if (depth > 0) {\r\n            const positionscount = positions.length / 3; //get the current pointcount\r\n\r\n            for (const p of this._points.elements) {\r\n                //add the elements at the depth\r\n                normals.push(0, -1.0, 0);\r\n                positions.push(p.x, -depth, p.y);\r\n                uvs.push(1 - (p.x - bounds.min.x) / bounds.width, 1 - (p.y - bounds.min.y) / bounds.height);\r\n            }\r\n\r\n            const totalCount = indices.length;\r\n            for (let i = 0; i < totalCount; i += 3) {\r\n                const i0 = indices[i + 0];\r\n                const i1 = indices[i + 1];\r\n                const i2 = indices[i + 2];\r\n\r\n                indices.push(i2 + positionscount);\r\n                indices.push(i1 + positionscount);\r\n                indices.push(i0 + positionscount);\r\n            }\r\n\r\n            //Add the sides\r\n            this._addSide(positions, normals, uvs, indices, bounds, this._outlinepoints, depth, false, smoothingThreshold);\r\n\r\n            for (const hole of this._holes) {\r\n                this._addSide(positions, normals, uvs, indices, bounds, hole, depth, true, smoothingThreshold);\r\n            }\r\n        }\r\n\r\n        result.indices = indices;\r\n        result.positions = positions;\r\n        result.normals = normals;\r\n        result.uvs = uvs;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Adds a side to the polygon\r\n     * @param positions points that make the polygon\r\n     * @param normals normals of the polygon\r\n     * @param uvs uvs of the polygon\r\n     * @param indices indices of the polygon\r\n     * @param bounds bounds of the polygon\r\n     * @param points points of the polygon\r\n     * @param depth depth of the polygon\r\n     * @param flip flip of the polygon\r\n     * @param smoothingThreshold\r\n     */\r\n    private _addSide(positions: any[], normals: any[], uvs: any[], indices: any[], bounds: any, points: PolygonPoints, depth: number, flip: boolean, smoothingThreshold: number) {\r\n        let startIndex: number = positions.length / 3;\r\n        let ulength: number = 0;\r\n        for (let i: number = 0; i < points.elements.length; i++) {\r\n            const p: IndexedVector2 = points.elements[i];\r\n            const p1: IndexedVector2 = points.elements[(i + 1) % points.elements.length];\r\n\r\n            positions.push(p.x, 0, p.y);\r\n            positions.push(p.x, -depth, p.y);\r\n            positions.push(p1.x, 0, p1.y);\r\n            positions.push(p1.x, -depth, p1.y);\r\n\r\n            const p0: IndexedVector2 = points.elements[(i + points.elements.length - 1) % points.elements.length];\r\n            const p2: IndexedVector2 = points.elements[(i + 2) % points.elements.length];\r\n\r\n            let vc = new Vector3(-(p1.y - p.y), 0, p1.x - p.x);\r\n            let vp = new Vector3(-(p.y - p0.y), 0, p.x - p0.x);\r\n            let vn = new Vector3(-(p2.y - p1.y), 0, p2.x - p1.x);\r\n\r\n            if (!flip) {\r\n                vc = vc.scale(-1);\r\n                vp = vp.scale(-1);\r\n                vn = vn.scale(-1);\r\n            }\r\n\r\n            const vcNorm = vc.normalizeToNew();\r\n            let vpNorm = vp.normalizeToNew();\r\n            let vnNorm = vn.normalizeToNew();\r\n\r\n            const dotp = Vector3.Dot(vpNorm, vcNorm);\r\n            if (dotp > smoothingThreshold) {\r\n                if (dotp < Epsilon - 1) {\r\n                    vpNorm = new Vector3(p.x, 0, p.y).subtract(new Vector3(p1.x, 0, p1.y)).normalize();\r\n                } else {\r\n                    // cheap average weighed by side length\r\n                    vpNorm = vp.add(vc).normalize();\r\n                }\r\n            } else {\r\n                vpNorm = vcNorm;\r\n            }\r\n\r\n            const dotn = Vector3.Dot(vn, vc);\r\n            if (dotn > smoothingThreshold) {\r\n                if (dotn < Epsilon - 1) {\r\n                    // back to back\r\n                    vnNorm = new Vector3(p1.x, 0, p1.y).subtract(new Vector3(p.x, 0, p.y)).normalize();\r\n                } else {\r\n                    // cheap average weighed by side length\r\n                    vnNorm = vn.add(vc).normalize();\r\n                }\r\n            } else {\r\n                vnNorm = vcNorm;\r\n            }\r\n\r\n            uvs.push(ulength / bounds.width, 0);\r\n            uvs.push(ulength / bounds.width, 1);\r\n            ulength += vc.length();\r\n            uvs.push(ulength / bounds.width, 0);\r\n            uvs.push(ulength / bounds.width, 1);\r\n\r\n            normals.push(vpNorm.x, vpNorm.y, vpNorm.z);\r\n            normals.push(vpNorm.x, vpNorm.y, vpNorm.z);\r\n            normals.push(vnNorm.x, vnNorm.y, vnNorm.z);\r\n            normals.push(vnNorm.x, vnNorm.y, vnNorm.z);\r\n\r\n            if (!flip) {\r\n                indices.push(startIndex);\r\n                indices.push(startIndex + 1);\r\n                indices.push(startIndex + 2);\r\n\r\n                indices.push(startIndex + 1);\r\n                indices.push(startIndex + 3);\r\n                indices.push(startIndex + 2);\r\n            } else {\r\n                indices.push(startIndex);\r\n                indices.push(startIndex + 2);\r\n                indices.push(startIndex + 1);\r\n\r\n                indices.push(startIndex + 1);\r\n                indices.push(startIndex + 2);\r\n                indices.push(startIndex + 3);\r\n            }\r\n            startIndex += 4;\r\n        }\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Vector2, Vector4 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { PolygonMeshBuilder } from \"../polygonMesh\";\r\nimport type { FloatArray, IndicesArray, Nullable } from \"../../types\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\ndeclare let earcut: any;\r\n\r\n/**\r\n * Creates the VertexData for an irregular Polygon in the XoZ plane using a mesh built by polygonTriangulation.build()\r\n * All parameters are provided by CreatePolygon as needed\r\n * @param polygon a mesh built from polygonTriangulation.build()\r\n * @param sideOrientation takes the values Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * @param fUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n * @param fColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n * @param frontUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * @param backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param wrp a boolean, default false, when true and fUVs used texture is wrapped around all sides, when false texture is applied side\r\n * @returns the VertexData of the Polygon\r\n */\r\nexport function CreatePolygonVertexData(polygon: Mesh, sideOrientation: number, fUV?: Vector4[], fColors?: Color4[], frontUVs?: Vector4, backUVs?: Vector4, wrp?: boolean) {\r\n    const faceUV: Vector4[] = fUV || new Array<Vector4>(3);\r\n    const faceColors = fColors;\r\n    const colors = [];\r\n    const wrap: boolean = wrp || false;\r\n\r\n    // default face colors and UV if undefined\r\n    for (let f = 0; f < 3; f++) {\r\n        if (faceUV[f] === undefined) {\r\n            faceUV[f] = new Vector4(0, 0, 1, 1);\r\n        }\r\n        if (faceColors && faceColors[f] === undefined) {\r\n            faceColors[f] = new Color4(1, 1, 1, 1);\r\n        }\r\n    }\r\n\r\n    const positions = <FloatArray>polygon.getVerticesData(VertexBuffer.PositionKind);\r\n    const normals = <FloatArray>polygon.getVerticesData(VertexBuffer.NormalKind);\r\n    const uvs = <FloatArray>polygon.getVerticesData(VertexBuffer.UVKind);\r\n    const indices = <IndicesArray>polygon.getIndices();\r\n    const startIndex = positions.length / 9;\r\n    let disp = 0;\r\n    let distX = 0;\r\n    let distZ = 0;\r\n    let dist = 0;\r\n    let totalLen = 0;\r\n    const cumulate = [0];\r\n    if (wrap) {\r\n        for (let idx = startIndex; idx < positions.length / 3; idx += 4) {\r\n            distX = positions[3 * (idx + 2)] - positions[3 * idx];\r\n            distZ = positions[3 * (idx + 2) + 2] - positions[3 * idx + 2];\r\n            dist = Math.sqrt(distX * distX + distZ * distZ);\r\n            totalLen += dist;\r\n            cumulate.push(totalLen);\r\n        }\r\n    }\r\n    // set face colours and textures\r\n    let idx: number = 0;\r\n    let face: number = 0;\r\n    for (let index = 0; index < normals.length; index += 3) {\r\n        //Edge Face  no. 1\r\n        if (Math.abs(normals[index + 1]) < 0.001) {\r\n            face = 1;\r\n        }\r\n        //Top Face  no. 0\r\n        if (Math.abs(normals[index + 1] - 1) < 0.001) {\r\n            face = 0;\r\n        }\r\n        //Bottom Face  no. 2\r\n        if (Math.abs(normals[index + 1] + 1) < 0.001) {\r\n            face = 2;\r\n        }\r\n        idx = index / 3;\r\n        if (face === 1) {\r\n            disp = idx - startIndex;\r\n            if (disp % 4 < 1.5) {\r\n                if (wrap) {\r\n                    uvs[2 * idx] = faceUV[face].x + ((faceUV[face].z - faceUV[face].x) * cumulate[Math.floor(disp / 4)]) / totalLen;\r\n                } else {\r\n                    uvs[2 * idx] = faceUV[face].x;\r\n                }\r\n            } else {\r\n                if (wrap) {\r\n                    uvs[2 * idx] = faceUV[face].x + ((faceUV[face].z - faceUV[face].x) * cumulate[Math.floor(disp / 4) + 1]) / totalLen;\r\n                } else {\r\n                    uvs[2 * idx] = faceUV[face].z;\r\n                }\r\n            }\r\n            if (disp % 2 === 0) {\r\n                uvs[2 * idx + 1] = useOpenGLOrientationForUV ? 1.0 - faceUV[face].w : faceUV[face].w;\r\n            } else {\r\n                uvs[2 * idx + 1] = useOpenGLOrientationForUV ? 1.0 - faceUV[face].y : faceUV[face].y;\r\n            }\r\n        } else {\r\n            uvs[2 * idx] = (1 - uvs[2 * idx]) * faceUV[face].x + uvs[2 * idx] * faceUV[face].z;\r\n            uvs[2 * idx + 1] = (1 - uvs[2 * idx + 1]) * faceUV[face].y + uvs[2 * idx + 1] * faceUV[face].w;\r\n\r\n            if (useOpenGLOrientationForUV) {\r\n                uvs[2 * idx + 1] = 1.0 - uvs[2 * idx + 1];\r\n            }\r\n        }\r\n        if (faceColors) {\r\n            colors.push(faceColors[face].r, faceColors[face].g, faceColors[face].b, faceColors[face].a);\r\n        }\r\n    }\r\n\r\n    // sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, frontUVs, backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    if (faceColors) {\r\n        const totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\r\n        vertexData.colors = totalColors;\r\n    }\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a polygon mesh\r\n * The polygon's shape will depend on the input parameters and is constructed parallel to a ground mesh\r\n * * The parameter `shape` is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors\r\n * * You can set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4)\r\n * * Remember you can only change the shape positions, not their number when updating a polygon\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @param earcutInjection can be used to inject your own earcut reference\r\n * @returns the polygon mesh\r\n */\r\nexport function CreatePolygon(\r\n    name: string,\r\n    options: {\r\n        shape: Vector3[];\r\n        holes?: Vector3[][];\r\n        depth?: number;\r\n        smoothingThreshold?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        wrap?: boolean;\r\n    },\r\n    scene: Nullable<Scene> = null,\r\n    earcutInjection = earcut\r\n): Mesh {\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    const shape = options.shape;\r\n    const holes = options.holes || [];\r\n    const depth = options.depth || 0;\r\n    const smoothingThreshold = options.smoothingThreshold || 2;\r\n    const contours: Array<Vector2> = [];\r\n    let hole: Array<Vector2> = [];\r\n\r\n    for (let i = 0; i < shape.length; i++) {\r\n        contours[i] = new Vector2(shape[i].x, shape[i].z);\r\n    }\r\n    const epsilon = 0.00000001;\r\n    if (contours[0].equalsWithEpsilon(contours[contours.length - 1], epsilon)) {\r\n        contours.pop();\r\n    }\r\n\r\n    const polygonTriangulation = new PolygonMeshBuilder(name, contours, scene || EngineStore.LastCreatedScene!, earcutInjection);\r\n    for (let hNb = 0; hNb < holes.length; hNb++) {\r\n        hole = [];\r\n        for (let hPoint = 0; hPoint < holes[hNb].length; hPoint++) {\r\n            hole.push(new Vector2(holes[hNb][hPoint].x, holes[hNb][hPoint].z));\r\n        }\r\n        polygonTriangulation.addHole(hole);\r\n    }\r\n    //updatability is set during applyToMesh; setting to true in triangulation build produces errors\r\n    const polygon = polygonTriangulation.build(false, depth, smoothingThreshold);\r\n    polygon._originalBuilderSideOrientation = options.sideOrientation;\r\n    const vertexData = CreatePolygonVertexData(polygon, options.sideOrientation, options.faceUV, options.faceColors, options.frontUVs, options.backUVs, options.wrap);\r\n    vertexData.applyToMesh(polygon, options.updatable);\r\n\r\n    return polygon;\r\n}\r\n\r\n/**\r\n * Creates an extruded polygon mesh, with depth in the Y direction.\r\n * * You can set different colors and different images to the top, bottom and extruded side by using the parameters `faceColors` (an array of 3 Color3 elements) and `faceUV` (an array of 3 Vector4 elements)\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/texturePerBoxFace\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @param earcutInjection can be used to inject your own earcut reference\r\n * @returns the polygon mesh\r\n */\r\nexport function ExtrudePolygon(\r\n    name: string,\r\n    options: {\r\n        shape: Vector3[];\r\n        holes?: Vector3[][];\r\n        depth?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        wrap?: boolean;\r\n    },\r\n    scene: Nullable<Scene> = null,\r\n    earcutInjection = earcut\r\n): Mesh {\r\n    return CreatePolygon(name, options, scene, earcutInjection);\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the functions directly from the module\r\n */\r\nexport const PolygonBuilder = {\r\n    ExtrudePolygon,\r\n    CreatePolygon,\r\n};\r\n\r\nVertexData.CreatePolygon = CreatePolygonVertexData;\r\nMesh.CreatePolygon = (name: string, shape: Vector3[], scene: Scene, holes?: Vector3[][], updatable?: boolean, sideOrientation?: number, earcutInjection = earcut): Mesh => {\r\n    const options = {\r\n        shape: shape,\r\n        holes: holes,\r\n        updatable: updatable,\r\n        sideOrientation: sideOrientation,\r\n    };\r\n    return CreatePolygon(name, options, scene, earcutInjection);\r\n};\r\n\r\nMesh.ExtrudePolygon = (\r\n    name: string,\r\n    shape: Vector3[],\r\n    depth: number,\r\n    scene: Scene,\r\n    holes?: Vector3[][],\r\n    updatable?: boolean,\r\n    sideOrientation?: number,\r\n    earcutInjection = earcut\r\n): Mesh => {\r\n    const options = {\r\n        shape: shape,\r\n        holes: holes,\r\n        depth: depth,\r\n        updatable: updatable,\r\n        sideOrientation: sideOrientation,\r\n    };\r\n    return ExtrudePolygon(name, options, scene, earcutInjection);\r\n};\r\n", "import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Vector3, TmpVectors, Matrix } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { CreateRibbon } from \"./ribbonBuilder\";\r\nimport { Path3D } from \"../../Maths/math.path\";\r\n\r\n/**\r\n * Creates an extruded shape mesh. The extrusion is a parametric shape. It has no predefined shape. Its final shape will depend on the input parameters.\r\n * * The parameter `shape` is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be extruded along the Z axis.\r\n * * The parameter `path` is a required array of successive Vector3. This is the axis curve the shape is extruded along.\r\n * * The parameter `rotation` (float, default 0 radians) is the angle value to rotate the shape each step (each path point), from the former step (so rotation added each step) along the curve.\r\n * * The parameter `scale` (float, default 1) is the value to scale the shape.\r\n * * The parameter `closeShape` (boolean, default false) closes the shape when true, since v5.0.0.\r\n * * The parameter `closePath` (boolean, default false) closes the path when true and no caps, since v5.0.0.\r\n * * The parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\r\n * * The optional parameter `instance` is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters : https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#extruded-shape\r\n * * Remember you can only change the shape or path point positions, not their number when updating an extruded shape.\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture.\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n * * The optional parameter `firstNormal` (Vector3) defines the direction of the first normal of the supplied path. Consider using this for any path that is straight, and particular for paths in the xy plane.\r\n * * The optional `adjustFrame` (boolean, default false) will cause the internally generated Path3D tangents, normals, and binormals to be adjusted so that a) they are always well-defined, and b) they do not reverse from one path point to the next. This prevents the extruded shape from being flipped and/or rotated with resulting mesh self-intersections. This is primarily useful for straight paths that can reverse direction.\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the extruded shape mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#extruded-shapes\r\n */\r\nexport function ExtrudeShape(\r\n    name: string,\r\n    options: {\r\n        shape: Vector3[];\r\n        path: Vector3[];\r\n        scale?: number;\r\n        rotation?: number;\r\n        closeShape?: boolean;\r\n        closePath?: boolean;\r\n        cap?: number;\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        instance?: Mesh;\r\n        invertUV?: boolean;\r\n        firstNormal?: Vector3;\r\n        adjustFrame?: boolean;\r\n        capFunction?: Nullable<{ (shapePath: Vector3[]): Vector3[] }>;\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const path = options.path;\r\n    const shape = options.shape;\r\n    const scale = options.scale || 1;\r\n    const rotation = options.rotation || 0;\r\n    const cap = options.cap === 0 ? 0 : options.cap || Mesh.NO_CAP;\r\n    const updatable = options.updatable;\r\n    const sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    const instance = options.instance || null;\r\n    const invertUV = options.invertUV || false;\r\n    const closeShape = options.closeShape || false;\r\n    const closePath = options.closePath || false;\r\n    const capFunction = options.capFunction || null;\r\n\r\n    return ExtrudeShapeGeneric(\r\n        name,\r\n        shape,\r\n        path,\r\n        scale,\r\n        rotation,\r\n        null,\r\n        null,\r\n        closePath,\r\n        closeShape,\r\n        cap,\r\n        false,\r\n        scene,\r\n        updatable ? true : false,\r\n        sideOrientation,\r\n        instance,\r\n        invertUV,\r\n        options.frontUVs || null,\r\n        options.backUVs || null,\r\n        options.firstNormal || null,\r\n        options.adjustFrame ? true : false,\r\n        capFunction\r\n    );\r\n}\r\n\r\n/**\r\n * Creates an custom extruded shape mesh.\r\n * The custom extrusion is a parametric shape. It has no predefined shape. Its final shape will depend on the input parameters.\r\n * * The parameter `shape` is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be extruded along the Z axis.\r\n * * The parameter `path` is a required array of successive Vector3. This is the axis curve the shape is extruded along.\r\n * * The parameter `rotationFunction` (JS function) is a custom Javascript function called on each path point. This function is passed the position i of the point in the path and the distance of this point from the beginning of the path\r\n * * It must returns a float value that will be the rotation in radians applied to the shape on each path point.\r\n * * The parameter `scaleFunction` (JS function) is a custom Javascript function called on each path point. This function is passed the position i of the point in the path and the distance of this point from the beginning of the path\r\n * * It must returns a float value that will be the scale value applied to the shape on each path point\r\n * * The parameter `closeShape` (boolean, default false) closes the shape when true, since v5.0.0.\r\n * * The parameter `closePath` (boolean, default false) closes the path when true and no caps, since v5.0.0.\r\n * * The parameter `ribbonClosePath` (boolean, default false) forces the extrusion underlying ribbon to close all the paths in its `pathArray` - depreciated in favor of closeShape\r\n * * The parameter `ribbonCloseArray` (boolean, default false) forces the extrusion underlying ribbon to close its `pathArray` - depreciated in favor of closePath\r\n * * The parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\r\n * * The optional parameter `instance` is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters : https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#extruded-shape\r\n * * Remember you can only change the shape or path point positions, not their number when updating an extruded shape\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * * The optional parameter `firstNormal` (Vector3) defines the direction of the first normal of the supplied path. It should be supplied when the path is in the xy plane, and particularly if these sections are straight, because the underlying Path3D object will pick a normal in the xy plane that causes the extrusion to be collapsed into the plane. This should be used for any path that is straight.\r\n * * The optional `adjustFrame` (boolean, default false) will cause the internally generated Path3D tangents, normals, and binormals to be adjusted so that a) they are always well-defined, and b) they do not reverse from one path point to the next. This prevents the extruded shape from being flipped and/or rotated with resulting mesh self-intersections. This is primarily useful for straight paths that can reverse direction.\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the custom extruded shape mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#custom-extruded-shapes\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#extruded-shapes\r\n */\r\nexport function ExtrudeShapeCustom(\r\n    name: string,\r\n    options: {\r\n        shape: Vector3[];\r\n        path: Vector3[];\r\n        scaleFunction?: Nullable<{ (i: number, distance: number): number }>;\r\n        rotationFunction?: Nullable<{ (i: number, distance: number): number }>;\r\n        ribbonCloseArray?: boolean;\r\n        ribbonClosePath?: boolean;\r\n        closeShape?: boolean;\r\n        closePath?: boolean;\r\n        cap?: number;\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        instance?: Mesh;\r\n        invertUV?: boolean;\r\n        firstNormal?: Vector3;\r\n        adjustFrame?: boolean;\r\n        capFunction?: Nullable<{ (shapePath: Vector3[]): Vector3[] }>;\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const path = options.path;\r\n    const shape = options.shape;\r\n    const scaleFunction =\r\n        options.scaleFunction ||\r\n        (() => {\r\n            return 1;\r\n        });\r\n    const rotationFunction =\r\n        options.rotationFunction ||\r\n        (() => {\r\n            return 0;\r\n        });\r\n    const ribbonCloseArray = options.closePath || options.ribbonCloseArray || false;\r\n    const ribbonClosePath = options.closeShape || options.ribbonClosePath || false;\r\n    const cap = options.cap === 0 ? 0 : options.cap || Mesh.NO_CAP;\r\n    const updatable = options.updatable;\r\n    const firstNormal = options.firstNormal || null;\r\n    const adjustFrame = options.adjustFrame || false;\r\n    const sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    const instance = options.instance;\r\n    const invertUV = options.invertUV || false;\r\n    const capFunction = options.capFunction || null;\r\n    return ExtrudeShapeGeneric(\r\n        name,\r\n        shape,\r\n        path,\r\n        null,\r\n        null,\r\n        scaleFunction,\r\n        rotationFunction,\r\n        ribbonCloseArray,\r\n        ribbonClosePath,\r\n        cap,\r\n        true,\r\n        scene,\r\n        updatable ? true : false,\r\n        sideOrientation,\r\n        instance || null,\r\n        invertUV,\r\n        options.frontUVs || null,\r\n        options.backUVs || null,\r\n        firstNormal,\r\n        adjustFrame,\r\n        capFunction || null\r\n    );\r\n}\r\n\r\nfunction ExtrudeShapeGeneric(\r\n    name: string,\r\n    shape: Vector3[],\r\n    curve: Vector3[],\r\n    scale: Nullable<number>,\r\n    rotation: Nullable<number>,\r\n    scaleFunction: Nullable<{ (i: number, distance: number): number }>,\r\n    rotateFunction: Nullable<{ (i: number, distance: number): number }>,\r\n    rbCA: boolean,\r\n    rbCP: boolean,\r\n    cap: number,\r\n    custom: boolean,\r\n    scene: Nullable<Scene>,\r\n    updtbl: boolean,\r\n    side: number,\r\n    instance: Nullable<Mesh>,\r\n    invertUV: boolean,\r\n    frontUVs: Nullable<Vector4>,\r\n    backUVs: Nullable<Vector4>,\r\n    firstNormal: Nullable<Vector3>,\r\n    adjustFrame: boolean,\r\n    capFunction: Nullable<{ (shapePath: Vector3[]): Vector3[] }>\r\n): Mesh {\r\n    // extrusion geometry\r\n    const extrusionPathArray = (\r\n        shape: Vector3[],\r\n        curve: Vector3[],\r\n        path3D: Path3D,\r\n        shapePaths: Vector3[][],\r\n        scale: Nullable<number>,\r\n        rotation: Nullable<number>,\r\n        scaleFunction: Nullable<{ (i: number, distance: number): number }>,\r\n        rotateFunction: Nullable<{ (i: number, distance: number): number }>,\r\n        cap: number,\r\n        custom: boolean,\r\n        adjustFrame: boolean\r\n    ) => {\r\n        const tangents = path3D.getTangents();\r\n        const normals = path3D.getNormals();\r\n        const binormals = path3D.getBinormals();\r\n        const distances = path3D.getDistances();\r\n        if (adjustFrame) {\r\n            /* fix tangents,normals, binormals */\r\n            for (let i = 0; i < tangents.length; i++) {\r\n                if (tangents[i].x == 0 && tangents[i].y == 0 && tangents[i].z == 0) {\r\n                    tangents[i].copyFrom(tangents[i - 1]);\r\n                }\r\n                if (normals[i].x == 0 && normals[i].y == 0 && normals[i].z == 0) {\r\n                    normals[i].copyFrom(normals[i - 1]);\r\n                }\r\n                if (binormals[i].x == 0 && binormals[i].y == 0 && binormals[i].z == 0) {\r\n                    binormals[i].copyFrom(binormals[i - 1]);\r\n                }\r\n                if (i > 0) {\r\n                    let v = tangents[i - 1];\r\n                    if (Vector3.Dot(v, tangents[i]) < 0) {\r\n                        tangents[i].scaleInPlace(-1);\r\n                    }\r\n                    v = normals[i - 1];\r\n                    if (Vector3.Dot(v, normals[i]) < 0) {\r\n                        normals[i].scaleInPlace(-1);\r\n                    }\r\n                    v = binormals[i - 1];\r\n                    if (Vector3.Dot(v, binormals[i]) < 0) {\r\n                        binormals[i].scaleInPlace(-1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let angle = 0;\r\n        const returnScale = () => {\r\n            return scale !== null ? scale : 1;\r\n        };\r\n        const returnRotation = () => {\r\n            return rotation !== null ? rotation : 0;\r\n        };\r\n        const rotate: { (i: number, distance: number): number } = custom && rotateFunction ? rotateFunction : returnRotation;\r\n        const scl: { (i: number, distance: number): number } = custom && scaleFunction ? scaleFunction : returnScale;\r\n        let index = cap === Mesh.NO_CAP || cap === Mesh.CAP_END ? 0 : 2;\r\n        const rotationMatrix: Matrix = TmpVectors.Matrix[0];\r\n\r\n        for (let i = 0; i < curve.length; i++) {\r\n            const shapePath: Vector3[] = [];\r\n            const angleStep = rotate(i, distances[i]);\r\n            const scaleRatio = scl(i, distances[i]);\r\n            Matrix.RotationAxisToRef(tangents[i], angle, rotationMatrix);\r\n            for (let p = 0; p < shape.length; p++) {\r\n                const planed = tangents[i].scale(shape[p].z).add(normals[i].scale(shape[p].x)).add(binormals[i].scale(shape[p].y));\r\n                const rotated = Vector3.Zero();\r\n                Vector3.TransformCoordinatesToRef(planed, rotationMatrix, rotated);\r\n                rotated.scaleInPlace(scaleRatio).addInPlace(curve[i]);\r\n                shapePath[p] = rotated;\r\n            }\r\n            shapePaths[index] = shapePath;\r\n            angle += angleStep;\r\n            index++;\r\n        }\r\n        // cap\r\n        const defaultCapPath = (shapePath: Vector3[]) => {\r\n            const pointCap = Array<Vector3>();\r\n            const barycenter = Vector3.Zero();\r\n            let i: number;\r\n            for (i = 0; i < shapePath.length; i++) {\r\n                barycenter.addInPlace(shapePath[i]);\r\n            }\r\n            barycenter.scaleInPlace(1.0 / shapePath.length);\r\n            for (i = 0; i < shapePath.length; i++) {\r\n                pointCap.push(barycenter);\r\n            }\r\n            return pointCap;\r\n        };\r\n        const capPath = capFunction || defaultCapPath;\r\n        switch (cap) {\r\n            case Mesh.NO_CAP:\r\n                break;\r\n            case Mesh.CAP_START:\r\n                shapePaths[0] = capPath(shapePaths[2]);\r\n                shapePaths[1] = shapePaths[2];\r\n                break;\r\n            case Mesh.CAP_END:\r\n                shapePaths[index] = shapePaths[index - 1];\r\n                shapePaths[index + 1] = capPath(shapePaths[index - 1]);\r\n                break;\r\n            case Mesh.CAP_ALL:\r\n                shapePaths[0] = capPath(shapePaths[2]);\r\n                shapePaths[1] = shapePaths[2];\r\n                shapePaths[index] = shapePaths[index - 1];\r\n                shapePaths[index + 1] = capPath(shapePaths[index - 1]);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return shapePaths;\r\n    };\r\n    let path3D;\r\n    let pathArray;\r\n    if (instance) {\r\n        // instance update\r\n        const storage = instance._creationDataStorage!;\r\n        path3D = firstNormal ? storage.path3D.update(curve, firstNormal) : storage.path3D.update(curve);\r\n        pathArray = extrusionPathArray(shape, curve, storage.path3D, storage.pathArray, scale, rotation, scaleFunction, rotateFunction, storage.cap, custom, adjustFrame);\r\n        instance = CreateRibbon(\"\", { pathArray, closeArray: false, closePath: false, offset: 0, updatable: false, sideOrientation: 0, instance }, scene || undefined);\r\n\r\n        return instance;\r\n    }\r\n    // extruded shape creation\r\n    path3D = firstNormal ? new Path3D(curve, firstNormal) : new Path3D(curve);\r\n    const newShapePaths = new Array<Array<Vector3>>();\r\n    cap = cap < 0 || cap > 3 ? 0 : cap;\r\n    pathArray = extrusionPathArray(shape, curve, path3D, newShapePaths, scale, rotation, scaleFunction, rotateFunction, cap, custom, adjustFrame);\r\n    const extrudedGeneric = CreateRibbon(\r\n        name,\r\n        {\r\n            pathArray: pathArray,\r\n            closeArray: rbCA,\r\n            closePath: rbCP,\r\n            updatable: updtbl,\r\n            sideOrientation: side,\r\n            invertUV: invertUV,\r\n            frontUVs: frontUVs || undefined,\r\n            backUVs: backUVs || undefined,\r\n        },\r\n        scene\r\n    );\r\n    extrudedGeneric._creationDataStorage!.pathArray = pathArray;\r\n    extrudedGeneric._creationDataStorage!.path3D = path3D;\r\n    extrudedGeneric._creationDataStorage!.cap = cap;\r\n\r\n    return extrudedGeneric;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated please use the functions directly from the module\r\n */\r\nexport const ShapeBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    ExtrudeShape,\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    ExtrudeShapeCustom,\r\n};\r\n\r\nMesh.ExtrudeShape = (\r\n    name: string,\r\n    shape: Vector3[],\r\n    path: Vector3[],\r\n    scale: number,\r\n    rotation: number,\r\n    cap: number,\r\n    scene: Nullable<Scene> = null,\r\n    updatable?: boolean,\r\n    sideOrientation?: number,\r\n    instance?: Mesh\r\n): Mesh => {\r\n    const options = {\r\n        shape: shape,\r\n        path: path,\r\n        scale: scale,\r\n        rotation: rotation,\r\n        cap: cap === 0 ? 0 : cap || Mesh.NO_CAP,\r\n        sideOrientation: sideOrientation,\r\n        instance: instance,\r\n        updatable: updatable,\r\n    };\r\n\r\n    return ExtrudeShape(name, options, scene);\r\n};\r\n\r\nMesh.ExtrudeShapeCustom = (\r\n    name: string,\r\n    shape: Vector3[],\r\n    path: Vector3[],\r\n    scaleFunction: Nullable<{ (i: number, distance: number): number }>,\r\n    rotationFunction: Nullable<{ (i: number, distance: number): number }>,\r\n    ribbonCloseArray: boolean,\r\n    ribbonClosePath: boolean,\r\n    cap: number,\r\n    scene: Scene,\r\n    updatable?: boolean,\r\n    sideOrientation?: number,\r\n    instance?: Mesh\r\n): Mesh => {\r\n    const options = {\r\n        shape: shape,\r\n        path: path,\r\n        scaleFunction: scaleFunction,\r\n        rotationFunction: rotationFunction,\r\n        ribbonCloseArray: ribbonCloseArray,\r\n        ribbonClosePath: ribbonClosePath,\r\n        cap: cap === 0 ? 0 : cap || Mesh.NO_CAP,\r\n        sideOrientation: sideOrientation,\r\n        instance: instance,\r\n        updatable: updatable,\r\n    };\r\n\r\n    return ExtrudeShapeCustom(name, options, scene);\r\n};\r\n", "import type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { CreateRibbon } from \"./ribbonBuilder\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/**\r\n * Creates lathe mesh.\r\n * The lathe is a shape with a symmetry axis : a 2D model shape is rotated around this axis to design the lathe\r\n * * The parameter `shape` is a required array of successive Vector3. This array depicts the shape to be rotated in its local space : the shape must be designed in the xOy plane and will be rotated around the Y axis. It's usually a 2D shape, so the Vector3 z coordinates are often set to zero\r\n * * The parameter `radius` (positive float, default 1) is the radius value of the lathe\r\n * * The parameter `tessellation` (positive integer, default 64) is the side number of the lathe\r\n * * The parameter `clip` (positive integer, default 0) is the number of sides to not create without effecting the general shape of the sides\r\n * * The parameter `arc` (positive float, default 1) is the ratio of the lathe. 0.5 builds for instance half a lathe, so an opened shape\r\n * * The parameter `closed` (boolean, default true) opens/closes the lathe circumference. This should be set to false when used with the parameter \"arc\"\r\n * * The parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the lathe mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#lathe\r\n */\r\nexport function CreateLathe(\r\n    name: string,\r\n    options: {\r\n        shape: Vector3[];\r\n        radius?: number;\r\n        tessellation?: number;\r\n        clip?: number;\r\n        arc?: number;\r\n        closed?: boolean;\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        cap?: number;\r\n        invertUV?: boolean;\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const arc: number = options.arc ? (options.arc <= 0 || options.arc > 1 ? 1.0 : options.arc) : 1.0;\r\n    const closed: boolean = options.closed === undefined ? true : options.closed;\r\n    const shape = options.shape;\r\n    const radius = options.radius || 1;\r\n    const tessellation = options.tessellation || 64;\r\n    const clip = options.clip || 0;\r\n    const updatable = options.updatable;\r\n    const sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    const cap = options.cap || Mesh.NO_CAP;\r\n    const pi2 = Math.PI * 2;\r\n    const paths = [];\r\n    const invertUV = options.invertUV || false;\r\n\r\n    let i = 0;\r\n    let p = 0;\r\n    const step = (pi2 / tessellation) * arc;\r\n    let rotated;\r\n    let path: Array<Vector3>;\r\n    for (i = 0; i <= tessellation - clip; i++) {\r\n        path = [];\r\n        if (cap == Mesh.CAP_START || cap == Mesh.CAP_ALL) {\r\n            path.push(new Vector3(0, shape[0].y, 0));\r\n            path.push(new Vector3(Math.cos(i * step) * shape[0].x * radius, shape[0].y, Math.sin(i * step) * shape[0].x * radius));\r\n        }\r\n        for (p = 0; p < shape.length; p++) {\r\n            rotated = new Vector3(Math.cos(i * step) * shape[p].x * radius, shape[p].y, Math.sin(i * step) * shape[p].x * radius);\r\n            path.push(rotated);\r\n        }\r\n        if (cap == Mesh.CAP_END || cap == Mesh.CAP_ALL) {\r\n            path.push(new Vector3(Math.cos(i * step) * shape[shape.length - 1].x * radius, shape[shape.length - 1].y, Math.sin(i * step) * shape[shape.length - 1].x * radius));\r\n            path.push(new Vector3(0, shape[shape.length - 1].y, 0));\r\n        }\r\n        paths.push(path);\r\n    }\r\n\r\n    // lathe ribbon\r\n    const lathe = CreateRibbon(\r\n        name,\r\n        { pathArray: paths, closeArray: closed, sideOrientation: sideOrientation, updatable: updatable, invertUV: invertUV, frontUVs: options.frontUVs, backUVs: options.backUVs },\r\n        scene\r\n    );\r\n    return lathe;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function direction from the module\r\n */\r\nexport const LatheBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateLathe,\r\n};\r\n\r\nMesh.CreateLathe = (name: string, shape: Vector3[], radius: number, tessellation: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        shape: shape,\r\n        radius: radius,\r\n        tessellation: tessellation,\r\n        sideOrientation: sideOrientation,\r\n        updatable: updatable,\r\n    };\r\n\r\n    return CreateLathe(name, options, scene);\r\n};\r\n", "import type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Plane } from \"../../Maths/math.plane\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a Plane\r\n * @param options an object used to set the following optional parameters for the plane, required but can be empty\r\n * * size sets the width and height of the plane to the value of size, optional default 1\r\n * * width sets the width (x direction) of the plane, overwrites the width set by size, optional, default size\r\n * * height sets the height (y direction) of the plane, overwrites the height set by size, optional, default size\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @returns the VertexData of the box\r\n */\r\nexport function CreatePlaneVertexData(options: { size?: number; width?: number; height?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }): VertexData {\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n\r\n    const width: number = options.width !== undefined ? options.width : options.size !== undefined ? options.size : 1;\r\n    const height: number = options.height !== undefined ? options.height : options.size !== undefined ? options.size : 1;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // Vertices\r\n    const halfWidth = width / 2.0;\r\n    const halfHeight = height / 2.0;\r\n\r\n    positions.push(-halfWidth, -halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(0.0, useOpenGLOrientationForUV ? 1.0 : 0.0);\r\n\r\n    positions.push(halfWidth, -halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(1.0, useOpenGLOrientationForUV ? 1.0 : 0.0);\r\n\r\n    positions.push(halfWidth, halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(1.0, useOpenGLOrientationForUV ? 0.0 : 1.0);\r\n\r\n    positions.push(-halfWidth, halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(0.0, useOpenGLOrientationForUV ? 0.0 : 1.0);\r\n\r\n    // Indices\r\n    indices.push(0);\r\n    indices.push(1);\r\n    indices.push(2);\r\n\r\n    indices.push(0);\r\n    indices.push(2);\r\n    indices.push(3);\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a plane mesh\r\n * * The parameter `size` sets the size (float) of both sides of the plane at once (default 1)\r\n * * You can set some different plane dimensions by using the parameters `width` and `height` (both by default have the same value of `size`)\r\n * * The parameter `sourcePlane` is a Plane instance. It builds a mesh plane from a Math plane\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the plane mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#plane\r\n */\r\nexport function CreatePlane(\r\n    name: string,\r\n    options: { size?: number; width?: number; height?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4; updatable?: boolean; sourcePlane?: Plane } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const plane = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    plane._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreatePlaneVertexData(options);\r\n\r\n    vertexData.applyToMesh(plane, options.updatable);\r\n\r\n    if (options.sourcePlane) {\r\n        plane.translate(options.sourcePlane.normal, -options.sourcePlane.d);\r\n        plane.setDirection(options.sourcePlane.normal.scale(-1));\r\n    }\r\n\r\n    return plane;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const PlaneBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreatePlane,\r\n};\r\n\r\nVertexData.CreatePlane = CreatePlaneVertexData;\r\nMesh.CreatePlane = (name: string, size: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        size,\r\n        width: size,\r\n        height: size,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreatePlane(name, options, scene);\r\n};\r\n", "import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Vector3, TmpVectors, Matrix } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { CreateRibbon } from \"./ribbonBuilder\";\r\nimport { Path3D } from \"../../Maths/math.path\";\r\n\r\n/**\r\n * Creates a tube mesh.\r\n * The tube is a parametric shape. It has no predefined shape. Its final shape will depend on the input parameters\r\n * * The parameter `path` is a required array of successive Vector3. It is the curve used as the axis of the tube\r\n * * The parameter `radius` (positive float, default 1) sets the tube radius size\r\n * * The parameter `tessellation` (positive float, default 64) is the number of sides on the tubular surface\r\n * * The parameter `radiusFunction` (javascript function, default null) is a vanilla javascript function. If it is not null, it overrides the parameter `radius`\r\n * * This function is called on each point of the tube path and is passed the index `i` of the i-th point and the distance of this point from the first point of the path. It must return a radius value (positive float)\r\n * * The parameter `arc` (positive float, maximum 1, default 1) is the ratio to apply to the tube circumference : 2 x PI x arc\r\n * * The parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\r\n * * The optional parameter `instance` is an instance of an existing Tube object to be updated with the passed `pathArray` parameter. The `path`Array HAS to have the SAME number of points as the previous one: https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#tube\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created. The NUMBER of points CAN'T CHANGE, only their positions.\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.path\r\n * @param options.radius\r\n * @param options.tessellation\r\n * @param options.radiusFunction\r\n * @param options.cap\r\n * @param options.arc\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.instance\r\n * @param options.invertUV\r\n * @param scene defines the hosting scene\r\n * @returns the tube mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#tube\r\n */\r\nexport function CreateTube(\r\n    name: string,\r\n    options: {\r\n        path: Vector3[];\r\n        radius?: number;\r\n        tessellation?: number;\r\n        radiusFunction?: { (i: number, distance: number): number };\r\n        cap?: number;\r\n        arc?: number;\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        instance?: Mesh;\r\n        invertUV?: boolean;\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const path = options.path;\r\n    let instance = options.instance;\r\n    let radius = 1.0;\r\n\r\n    if (options.radius !== undefined) {\r\n        radius = options.radius;\r\n    } else if (instance) {\r\n        radius = instance._creationDataStorage!.radius;\r\n    }\r\n\r\n    const tessellation = options.tessellation || 64 | 0;\r\n    const radiusFunction = options.radiusFunction || null;\r\n    let cap = options.cap || Mesh.NO_CAP;\r\n    const invertUV = options.invertUV || false;\r\n    const updatable = options.updatable;\r\n    const sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    options.arc = options.arc && (options.arc <= 0.0 || options.arc > 1.0) ? 1.0 : options.arc || 1.0;\r\n\r\n    // tube geometry\r\n    const tubePathArray = (\r\n        path: Vector3[],\r\n        path3D: Path3D,\r\n        circlePaths: Vector3[][],\r\n        radius: number,\r\n        tessellation: number,\r\n        radiusFunction: Nullable<{ (i: number, distance: number): number }>,\r\n        cap: number,\r\n        arc: number\r\n    ) => {\r\n        const tangents = path3D.getTangents();\r\n        const normals = path3D.getNormals();\r\n        const distances = path3D.getDistances();\r\n        const pi2 = Math.PI * 2;\r\n        const step = (pi2 / tessellation) * arc;\r\n        const returnRadius: { (i: number, distance: number): number } = () => radius;\r\n        const radiusFunctionFinal: { (i: number, distance: number): number } = radiusFunction || returnRadius;\r\n\r\n        let circlePath: Vector3[];\r\n        let rad: number;\r\n        let normal: Vector3;\r\n        let rotated: Vector3;\r\n        const rotationMatrix: Matrix = TmpVectors.Matrix[0];\r\n        let index = cap === Mesh.NO_CAP || cap === Mesh.CAP_END ? 0 : 2;\r\n        for (let i = 0; i < path.length; i++) {\r\n            rad = radiusFunctionFinal(i, distances[i]); // current radius\r\n            circlePath = Array<Vector3>(); // current circle array\r\n            normal = normals[i]; // current normal\r\n            for (let t = 0; t < tessellation; t++) {\r\n                Matrix.RotationAxisToRef(tangents[i], step * t, rotationMatrix);\r\n                rotated = circlePath[t] ? circlePath[t] : Vector3.Zero();\r\n                Vector3.TransformCoordinatesToRef(normal, rotationMatrix, rotated);\r\n                rotated.scaleInPlace(rad).addInPlace(path[i]);\r\n                circlePath[t] = rotated;\r\n            }\r\n            circlePaths[index] = circlePath;\r\n            index++;\r\n        }\r\n        // cap\r\n        const capPath = (nbPoints: number, pathIndex: number): Array<Vector3> => {\r\n            const pointCap = Array<Vector3>();\r\n            for (let i = 0; i < nbPoints; i++) {\r\n                pointCap.push(path[pathIndex]);\r\n            }\r\n            return pointCap;\r\n        };\r\n        switch (cap) {\r\n            case Mesh.NO_CAP:\r\n                break;\r\n            case Mesh.CAP_START:\r\n                circlePaths[0] = capPath(tessellation, 0);\r\n                circlePaths[1] = circlePaths[2].slice(0);\r\n                break;\r\n            case Mesh.CAP_END:\r\n                circlePaths[index] = circlePaths[index - 1].slice(0);\r\n                circlePaths[index + 1] = capPath(tessellation, path.length - 1);\r\n                break;\r\n            case Mesh.CAP_ALL:\r\n                circlePaths[0] = capPath(tessellation, 0);\r\n                circlePaths[1] = circlePaths[2].slice(0);\r\n                circlePaths[index] = circlePaths[index - 1].slice(0);\r\n                circlePaths[index + 1] = capPath(tessellation, path.length - 1);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return circlePaths;\r\n    };\r\n\r\n    let path3D;\r\n    let pathArray;\r\n    if (instance) {\r\n        // tube update\r\n        const storage = instance._creationDataStorage!;\r\n        const arc = options.arc || storage.arc;\r\n        path3D = storage.path3D.update(path);\r\n        pathArray = tubePathArray(path, path3D, storage.pathArray, radius, storage.tessellation, radiusFunction, storage.cap, arc);\r\n        instance = CreateRibbon(\"\", { pathArray: pathArray, instance: instance });\r\n        // Update mode, no need to recreate the storage.\r\n        storage.path3D = path3D;\r\n        storage.pathArray = pathArray;\r\n        storage.arc = arc;\r\n        storage.radius = radius;\r\n\r\n        return instance;\r\n    }\r\n\r\n    // tube creation\r\n    path3D = <any>new Path3D(path);\r\n    const newPathArray = new Array<Array<Vector3>>();\r\n    cap = cap < 0 || cap > 3 ? 0 : cap;\r\n    pathArray = tubePathArray(path, path3D, newPathArray, radius, tessellation, radiusFunction, cap, options.arc);\r\n    const tube = CreateRibbon(\r\n        name,\r\n        {\r\n            pathArray: pathArray,\r\n            closePath: true,\r\n            closeArray: false,\r\n            updatable: updatable,\r\n            sideOrientation: sideOrientation,\r\n            invertUV: invertUV,\r\n            frontUVs: options.frontUVs,\r\n            backUVs: options.backUVs,\r\n        },\r\n        scene\r\n    );\r\n    tube._creationDataStorage!.pathArray = pathArray;\r\n    tube._creationDataStorage!.path3D = path3D;\r\n    tube._creationDataStorage!.tessellation = tessellation;\r\n    tube._creationDataStorage!.cap = cap;\r\n    tube._creationDataStorage!.arc = options.arc;\r\n    tube._creationDataStorage!.radius = radius;\r\n\r\n    return tube;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use CreateTube directly\r\n */\r\nexport const TubeBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateTube,\r\n};\r\n\r\nMesh.CreateTube = (\r\n    name: string,\r\n    path: Vector3[],\r\n    radius: number,\r\n    tessellation: number,\r\n    radiusFunction: { (i: number, distance: number): number },\r\n    cap: number,\r\n    scene: Scene,\r\n    updatable?: boolean,\r\n    sideOrientation?: number,\r\n    instance?: Mesh\r\n): Mesh => {\r\n    const options = {\r\n        path: path,\r\n        radius: radius,\r\n        tessellation: tessellation,\r\n        radiusFunction: radiusFunction,\r\n        arc: 1,\r\n        cap: cap,\r\n        updatable: updatable,\r\n        sideOrientation: sideOrientation,\r\n        instance: instance,\r\n    };\r\n    return CreateTube(name, options, scene);\r\n};\r\n", "import type { Scene } from \"../../scene\";\r\nimport { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\n// inspired from // http://stemkoski.github.io/Three.js/Polyhedra.html\r\n/**\r\n * Creates the VertexData for a Polyhedron\r\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n * * type provided types are:\r\n *  * 0 : Tetrahedron, 1 : Octahedron, 2 : Dodecahedron, 3 : Icosahedron, 4 : Rhombicuboctahedron, 5 : Triangular Prism, 6 : Pentagonal Prism, 7 : Hexagonal Prism, 8 : Square Pyramid (J1)\r\n *  * 9 : Pentagonal Pyramid (J2), 10 : Triangular Dipyramid (J12), 11 : Pentagonal Dipyramid (J13), 12 : Elongated Square Dipyramid (J15), 13 : Elongated Pentagonal Dipyramid (J16), 14 : Elongated Pentagonal Cupola (J20)\r\n * * size the size of the IcoSphere, optional default 1\r\n * * sizeX allows stretching in the x direction, optional, default size\r\n * * sizeY allows stretching in the y direction, optional, default size\r\n * * sizeZ allows stretching in the z direction, optional, default size\r\n * * custom a number that overwrites the type to create from an extended set of polyhedron from https://www.babylonjs-playground.com/#21QRSK#15 with minimised editor\r\n * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n * * flat when true creates a flat shaded mesh, optional, default true\r\n * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @returns the VertexData of the Polyhedron\r\n */\r\nexport function CreatePolyhedronVertexData(options: {\r\n    type?: number;\r\n    size?: number;\r\n    sizeX?: number;\r\n    sizeY?: number;\r\n    sizeZ?: number;\r\n    custom?: any;\r\n    faceUV?: Vector4[];\r\n    faceColors?: Color4[];\r\n    flat?: boolean;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n}): VertexData {\r\n    // provided polyhedron types :\r\n    // 0 : Tetrahedron, 1 : Octahedron, 2 : Dodecahedron, 3 : Icosahedron, 4 : Rhombicuboctahedron, 5 : Triangular Prism, 6 : Pentagonal Prism, 7 : Hexagonal Prism, 8 : Square Pyramid (J1)\r\n    // 9 : Pentagonal Pyramid (J2), 10 : Triangular Dipyramid (J12), 11 : Pentagonal Dipyramid (J13), 12 : Elongated Square Dipyramid (J15), 13 : Elongated Pentagonal Dipyramid (J16), 14 : Elongated Pentagonal Cupola (J20)\r\n    const polyhedra: { vertex: number[][]; face: number[][] }[] = [];\r\n    polyhedra[0] = {\r\n        vertex: [\r\n            [0, 0, 1.732051],\r\n            [1.632993, 0, -0.5773503],\r\n            [-0.8164966, 1.414214, -0.5773503],\r\n            [-0.8164966, -1.414214, -0.5773503],\r\n        ],\r\n        face: [\r\n            [0, 1, 2],\r\n            [0, 2, 3],\r\n            [0, 3, 1],\r\n            [1, 3, 2],\r\n        ],\r\n    };\r\n    polyhedra[1] = {\r\n        vertex: [\r\n            [0, 0, 1.414214],\r\n            [1.414214, 0, 0],\r\n            [0, 1.414214, 0],\r\n            [-1.414214, 0, 0],\r\n            [0, -1.414214, 0],\r\n            [0, 0, -1.414214],\r\n        ],\r\n        face: [\r\n            [0, 1, 2],\r\n            [0, 2, 3],\r\n            [0, 3, 4],\r\n            [0, 4, 1],\r\n            [1, 4, 5],\r\n            [1, 5, 2],\r\n            [2, 5, 3],\r\n            [3, 5, 4],\r\n        ],\r\n    };\r\n    polyhedra[2] = {\r\n        vertex: [\r\n            [0, 0, 1.070466],\r\n            [0.7136442, 0, 0.7978784],\r\n            [-0.3568221, 0.618034, 0.7978784],\r\n            [-0.3568221, -0.618034, 0.7978784],\r\n            [0.7978784, 0.618034, 0.3568221],\r\n            [0.7978784, -0.618034, 0.3568221],\r\n            [-0.9341724, 0.381966, 0.3568221],\r\n            [0.1362939, 1, 0.3568221],\r\n            [0.1362939, -1, 0.3568221],\r\n            [-0.9341724, -0.381966, 0.3568221],\r\n            [0.9341724, 0.381966, -0.3568221],\r\n            [0.9341724, -0.381966, -0.3568221],\r\n            [-0.7978784, 0.618034, -0.3568221],\r\n            [-0.1362939, 1, -0.3568221],\r\n            [-0.1362939, -1, -0.3568221],\r\n            [-0.7978784, -0.618034, -0.3568221],\r\n            [0.3568221, 0.618034, -0.7978784],\r\n            [0.3568221, -0.618034, -0.7978784],\r\n            [-0.7136442, 0, -0.7978784],\r\n            [0, 0, -1.070466],\r\n        ],\r\n        face: [\r\n            [0, 1, 4, 7, 2],\r\n            [0, 2, 6, 9, 3],\r\n            [0, 3, 8, 5, 1],\r\n            [1, 5, 11, 10, 4],\r\n            [2, 7, 13, 12, 6],\r\n            [3, 9, 15, 14, 8],\r\n            [4, 10, 16, 13, 7],\r\n            [5, 8, 14, 17, 11],\r\n            [6, 12, 18, 15, 9],\r\n            [10, 11, 17, 19, 16],\r\n            [12, 13, 16, 19, 18],\r\n            [14, 15, 18, 19, 17],\r\n        ],\r\n    };\r\n    polyhedra[3] = {\r\n        vertex: [\r\n            [0, 0, 1.175571],\r\n            [1.051462, 0, 0.5257311],\r\n            [0.3249197, 1, 0.5257311],\r\n            [-0.8506508, 0.618034, 0.5257311],\r\n            [-0.8506508, -0.618034, 0.5257311],\r\n            [0.3249197, -1, 0.5257311],\r\n            [0.8506508, 0.618034, -0.5257311],\r\n            [0.8506508, -0.618034, -0.5257311],\r\n            [-0.3249197, 1, -0.5257311],\r\n            [-1.051462, 0, -0.5257311],\r\n            [-0.3249197, -1, -0.5257311],\r\n            [0, 0, -1.175571],\r\n        ],\r\n        face: [\r\n            [0, 1, 2],\r\n            [0, 2, 3],\r\n            [0, 3, 4],\r\n            [0, 4, 5],\r\n            [0, 5, 1],\r\n            [1, 5, 7],\r\n            [1, 7, 6],\r\n            [1, 6, 2],\r\n            [2, 6, 8],\r\n            [2, 8, 3],\r\n            [3, 8, 9],\r\n            [3, 9, 4],\r\n            [4, 9, 10],\r\n            [4, 10, 5],\r\n            [5, 10, 7],\r\n            [6, 7, 11],\r\n            [6, 11, 8],\r\n            [7, 10, 11],\r\n            [8, 11, 9],\r\n            [9, 11, 10],\r\n        ],\r\n    };\r\n    polyhedra[4] = {\r\n        vertex: [\r\n            [0, 0, 1.070722],\r\n            [0.7148135, 0, 0.7971752],\r\n            [-0.104682, 0.7071068, 0.7971752],\r\n            [-0.6841528, 0.2071068, 0.7971752],\r\n            [-0.104682, -0.7071068, 0.7971752],\r\n            [0.6101315, 0.7071068, 0.5236279],\r\n            [1.04156, 0.2071068, 0.1367736],\r\n            [0.6101315, -0.7071068, 0.5236279],\r\n            [-0.3574067, 1, 0.1367736],\r\n            [-0.7888348, -0.5, 0.5236279],\r\n            [-0.9368776, 0.5, 0.1367736],\r\n            [-0.3574067, -1, 0.1367736],\r\n            [0.3574067, 1, -0.1367736],\r\n            [0.9368776, -0.5, -0.1367736],\r\n            [0.7888348, 0.5, -0.5236279],\r\n            [0.3574067, -1, -0.1367736],\r\n            [-0.6101315, 0.7071068, -0.5236279],\r\n            [-1.04156, -0.2071068, -0.1367736],\r\n            [-0.6101315, -0.7071068, -0.5236279],\r\n            [0.104682, 0.7071068, -0.7971752],\r\n            [0.6841528, -0.2071068, -0.7971752],\r\n            [0.104682, -0.7071068, -0.7971752],\r\n            [-0.7148135, 0, -0.7971752],\r\n            [0, 0, -1.070722],\r\n        ],\r\n        face: [\r\n            [0, 2, 3],\r\n            [1, 6, 5],\r\n            [4, 9, 11],\r\n            [7, 15, 13],\r\n            [8, 16, 10],\r\n            [12, 14, 19],\r\n            [17, 22, 18],\r\n            [20, 21, 23],\r\n            [0, 1, 5, 2],\r\n            [0, 3, 9, 4],\r\n            [0, 4, 7, 1],\r\n            [1, 7, 13, 6],\r\n            [2, 5, 12, 8],\r\n            [2, 8, 10, 3],\r\n            [3, 10, 17, 9],\r\n            [4, 11, 15, 7],\r\n            [5, 6, 14, 12],\r\n            [6, 13, 20, 14],\r\n            [8, 12, 19, 16],\r\n            [9, 17, 18, 11],\r\n            [10, 16, 22, 17],\r\n            [11, 18, 21, 15],\r\n            [13, 15, 21, 20],\r\n            [14, 20, 23, 19],\r\n            [16, 19, 23, 22],\r\n            [18, 22, 23, 21],\r\n        ],\r\n    };\r\n    polyhedra[5] = {\r\n        vertex: [\r\n            [0, 0, 1.322876],\r\n            [1.309307, 0, 0.1889822],\r\n            [-0.9819805, 0.8660254, 0.1889822],\r\n            [0.1636634, -1.299038, 0.1889822],\r\n            [0.3273268, 0.8660254, -0.9449112],\r\n            [-0.8183171, -0.4330127, -0.9449112],\r\n        ],\r\n        face: [\r\n            [0, 3, 1],\r\n            [2, 4, 5],\r\n            [0, 1, 4, 2],\r\n            [0, 2, 5, 3],\r\n            [1, 3, 5, 4],\r\n        ],\r\n    };\r\n    polyhedra[6] = {\r\n        vertex: [\r\n            [0, 0, 1.159953],\r\n            [1.013464, 0, 0.5642542],\r\n            [-0.3501431, 0.9510565, 0.5642542],\r\n            [-0.7715208, -0.6571639, 0.5642542],\r\n            [0.6633206, 0.9510565, -0.03144481],\r\n            [0.8682979, -0.6571639, -0.3996071],\r\n            [-1.121664, 0.2938926, -0.03144481],\r\n            [-0.2348831, -1.063314, -0.3996071],\r\n            [0.5181548, 0.2938926, -0.9953061],\r\n            [-0.5850262, -0.112257, -0.9953061],\r\n        ],\r\n        face: [\r\n            [0, 1, 4, 2],\r\n            [0, 2, 6, 3],\r\n            [1, 5, 8, 4],\r\n            [3, 6, 9, 7],\r\n            [5, 7, 9, 8],\r\n            [0, 3, 7, 5, 1],\r\n            [2, 4, 8, 9, 6],\r\n        ],\r\n    };\r\n    polyhedra[7] = {\r\n        vertex: [\r\n            [0, 0, 1.118034],\r\n            [0.8944272, 0, 0.6708204],\r\n            [-0.2236068, 0.8660254, 0.6708204],\r\n            [-0.7826238, -0.4330127, 0.6708204],\r\n            [0.6708204, 0.8660254, 0.2236068],\r\n            [1.006231, -0.4330127, -0.2236068],\r\n            [-1.006231, 0.4330127, 0.2236068],\r\n            [-0.6708204, -0.8660254, -0.2236068],\r\n            [0.7826238, 0.4330127, -0.6708204],\r\n            [0.2236068, -0.8660254, -0.6708204],\r\n            [-0.8944272, 0, -0.6708204],\r\n            [0, 0, -1.118034],\r\n        ],\r\n        face: [\r\n            [0, 1, 4, 2],\r\n            [0, 2, 6, 3],\r\n            [1, 5, 8, 4],\r\n            [3, 6, 10, 7],\r\n            [5, 9, 11, 8],\r\n            [7, 10, 11, 9],\r\n            [0, 3, 7, 9, 5, 1],\r\n            [2, 4, 8, 11, 10, 6],\r\n        ],\r\n    };\r\n    polyhedra[8] = {\r\n        vertex: [\r\n            [-0.729665, 0.670121, 0.319155],\r\n            [-0.655235, -0.29213, -0.754096],\r\n            [-0.093922, -0.607123, 0.537818],\r\n            [0.702196, 0.595691, 0.485187],\r\n            [0.776626, -0.36656, -0.588064],\r\n        ],\r\n        face: [\r\n            [1, 4, 2],\r\n            [0, 1, 2],\r\n            [3, 0, 2],\r\n            [4, 3, 2],\r\n            [4, 1, 0, 3],\r\n        ],\r\n    };\r\n    polyhedra[9] = {\r\n        vertex: [\r\n            [-0.868849, -0.100041, 0.61257],\r\n            [-0.329458, 0.976099, 0.28078],\r\n            [-0.26629, -0.013796, -0.477654],\r\n            [-0.13392, -1.034115, 0.229829],\r\n            [0.738834, 0.707117, -0.307018],\r\n            [0.859683, -0.535264, -0.338508],\r\n        ],\r\n        face: [\r\n            [3, 0, 2],\r\n            [5, 3, 2],\r\n            [4, 5, 2],\r\n            [1, 4, 2],\r\n            [0, 1, 2],\r\n            [0, 3, 5, 4, 1],\r\n        ],\r\n    };\r\n    polyhedra[10] = {\r\n        vertex: [\r\n            [-0.610389, 0.243975, 0.531213],\r\n            [-0.187812, -0.48795, -0.664016],\r\n            [-0.187812, 0.9759, -0.664016],\r\n            [0.187812, -0.9759, 0.664016],\r\n            [0.798201, 0.243975, 0.132803],\r\n        ],\r\n        face: [\r\n            [1, 3, 0],\r\n            [3, 4, 0],\r\n            [3, 1, 4],\r\n            [0, 2, 1],\r\n            [0, 4, 2],\r\n            [2, 4, 1],\r\n        ],\r\n    };\r\n    polyhedra[11] = {\r\n        vertex: [\r\n            [-1.028778, 0.392027, -0.048786],\r\n            [-0.640503, -0.646161, 0.621837],\r\n            [-0.125162, -0.395663, -0.540059],\r\n            [0.004683, 0.888447, -0.651988],\r\n            [0.125161, 0.395663, 0.540059],\r\n            [0.632925, -0.791376, 0.433102],\r\n            [1.031672, 0.157063, -0.354165],\r\n        ],\r\n        face: [\r\n            [3, 2, 0],\r\n            [2, 1, 0],\r\n            [2, 5, 1],\r\n            [0, 4, 3],\r\n            [0, 1, 4],\r\n            [4, 1, 5],\r\n            [2, 3, 6],\r\n            [3, 4, 6],\r\n            [5, 2, 6],\r\n            [4, 5, 6],\r\n        ],\r\n    };\r\n    polyhedra[12] = {\r\n        vertex: [\r\n            [-0.669867, 0.334933, -0.529576],\r\n            [-0.669867, 0.334933, 0.529577],\r\n            [-0.4043, 1.212901, 0],\r\n            [-0.334933, -0.669867, -0.529576],\r\n            [-0.334933, -0.669867, 0.529577],\r\n            [0.334933, 0.669867, -0.529576],\r\n            [0.334933, 0.669867, 0.529577],\r\n            [0.4043, -1.212901, 0],\r\n            [0.669867, -0.334933, -0.529576],\r\n            [0.669867, -0.334933, 0.529577],\r\n        ],\r\n        face: [\r\n            [8, 9, 7],\r\n            [6, 5, 2],\r\n            [3, 8, 7],\r\n            [5, 0, 2],\r\n            [4, 3, 7],\r\n            [0, 1, 2],\r\n            [9, 4, 7],\r\n            [1, 6, 2],\r\n            [9, 8, 5, 6],\r\n            [8, 3, 0, 5],\r\n            [3, 4, 1, 0],\r\n            [4, 9, 6, 1],\r\n        ],\r\n    };\r\n    polyhedra[13] = {\r\n        vertex: [\r\n            [-0.931836, 0.219976, -0.264632],\r\n            [-0.636706, 0.318353, 0.692816],\r\n            [-0.613483, -0.735083, -0.264632],\r\n            [-0.326545, 0.979634, 0],\r\n            [-0.318353, -0.636706, 0.692816],\r\n            [-0.159176, 0.477529, -0.856368],\r\n            [0.159176, -0.477529, -0.856368],\r\n            [0.318353, 0.636706, 0.692816],\r\n            [0.326545, -0.979634, 0],\r\n            [0.613482, 0.735082, -0.264632],\r\n            [0.636706, -0.318353, 0.692816],\r\n            [0.931835, -0.219977, -0.264632],\r\n        ],\r\n        face: [\r\n            [11, 10, 8],\r\n            [7, 9, 3],\r\n            [6, 11, 8],\r\n            [9, 5, 3],\r\n            [2, 6, 8],\r\n            [5, 0, 3],\r\n            [4, 2, 8],\r\n            [0, 1, 3],\r\n            [10, 4, 8],\r\n            [1, 7, 3],\r\n            [10, 11, 9, 7],\r\n            [11, 6, 5, 9],\r\n            [6, 2, 0, 5],\r\n            [2, 4, 1, 0],\r\n            [4, 10, 7, 1],\r\n        ],\r\n    };\r\n    polyhedra[14] = {\r\n        vertex: [\r\n            [-0.93465, 0.300459, -0.271185],\r\n            [-0.838689, -0.260219, -0.516017],\r\n            [-0.711319, 0.717591, 0.128359],\r\n            [-0.710334, -0.156922, 0.080946],\r\n            [-0.599799, 0.556003, -0.725148],\r\n            [-0.503838, -0.004675, -0.969981],\r\n            [-0.487004, 0.26021, 0.48049],\r\n            [-0.460089, -0.750282, -0.512622],\r\n            [-0.376468, 0.973135, -0.325605],\r\n            [-0.331735, -0.646985, 0.084342],\r\n            [-0.254001, 0.831847, 0.530001],\r\n            [-0.125239, -0.494738, -0.966586],\r\n            [0.029622, 0.027949, 0.730817],\r\n            [0.056536, -0.982543, -0.262295],\r\n            [0.08085, 1.087391, 0.076037],\r\n            [0.125583, -0.532729, 0.485984],\r\n            [0.262625, 0.599586, 0.780328],\r\n            [0.391387, -0.726999, -0.716259],\r\n            [0.513854, -0.868287, 0.139347],\r\n            [0.597475, 0.85513, 0.326364],\r\n            [0.641224, 0.109523, 0.783723],\r\n            [0.737185, -0.451155, 0.538891],\r\n            [0.848705, -0.612742, -0.314616],\r\n            [0.976075, 0.365067, 0.32976],\r\n            [1.072036, -0.19561, 0.084927],\r\n        ],\r\n        face: [\r\n            [15, 18, 21],\r\n            [12, 20, 16],\r\n            [6, 10, 2],\r\n            [3, 0, 1],\r\n            [9, 7, 13],\r\n            [2, 8, 4, 0],\r\n            [0, 4, 5, 1],\r\n            [1, 5, 11, 7],\r\n            [7, 11, 17, 13],\r\n            [13, 17, 22, 18],\r\n            [18, 22, 24, 21],\r\n            [21, 24, 23, 20],\r\n            [20, 23, 19, 16],\r\n            [16, 19, 14, 10],\r\n            [10, 14, 8, 2],\r\n            [15, 9, 13, 18],\r\n            [12, 15, 21, 20],\r\n            [6, 12, 16, 10],\r\n            [3, 6, 2, 0],\r\n            [9, 3, 1, 7],\r\n            [9, 15, 12, 6, 3],\r\n            [22, 17, 11, 5, 4, 8, 14, 19, 23, 24],\r\n        ],\r\n    };\r\n\r\n    const type: number = options.type && (options.type < 0 || options.type >= polyhedra.length) ? 0 : options.type || 0;\r\n    const size = options.size;\r\n    const sizeX: number = options.sizeX || size || 1;\r\n    const sizeY: number = options.sizeY || size || 1;\r\n    const sizeZ: number = options.sizeZ || size || 1;\r\n    const data: { vertex: number[][]; face: number[][]; name?: string; category?: string } = options.custom || polyhedra[type];\r\n    const nbfaces = data.face.length;\r\n    const faceUV = options.faceUV || new Array(nbfaces);\r\n    const faceColors = options.faceColors;\r\n    const flat = options.flat === undefined ? true : options.flat;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    const positions: number[] = [];\r\n    const indices: number[] = [];\r\n    const normals: number[] = [];\r\n    const uvs: number[] = [];\r\n    const colors: number[] = [];\r\n    let index = 0;\r\n    let faceIdx = 0; // face cursor in the array \"indexes\"\r\n    const indexes: number[] = [];\r\n    let i = 0;\r\n    let f = 0;\r\n    let u: number, v: number, ang: number, x: number, y: number, tmp: number;\r\n\r\n    // default face colors and UV if undefined\r\n    if (flat) {\r\n        for (f = 0; f < nbfaces; f++) {\r\n            if (faceColors && faceColors[f] === undefined) {\r\n                faceColors[f] = new Color4(1, 1, 1, 1);\r\n            }\r\n            if (faceUV && faceUV[f] === undefined) {\r\n                faceUV[f] = new Vector4(0, 0, 1, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!flat) {\r\n        for (i = 0; i < data.vertex.length; i++) {\r\n            positions.push(data.vertex[i][0] * sizeX, data.vertex[i][1] * sizeY, data.vertex[i][2] * sizeZ);\r\n            uvs.push(0, useOpenGLOrientationForUV ? 1.0 : 0);\r\n        }\r\n        for (f = 0; f < nbfaces; f++) {\r\n            for (i = 0; i < data.face[f].length - 2; i++) {\r\n                indices.push(data.face[f][0], data.face[f][i + 2], data.face[f][i + 1]);\r\n            }\r\n        }\r\n    } else {\r\n        for (f = 0; f < nbfaces; f++) {\r\n            const fl = data.face[f].length; // number of vertices of the current face\r\n            ang = (2 * Math.PI) / fl;\r\n            x = 0.5 * Math.tan(ang / 2);\r\n            y = 0.5;\r\n\r\n            // positions, uvs, colors\r\n            for (i = 0; i < fl; i++) {\r\n                // positions\r\n                positions.push(data.vertex[data.face[f][i]][0] * sizeX, data.vertex[data.face[f][i]][1] * sizeY, data.vertex[data.face[f][i]][2] * sizeZ);\r\n                indexes.push(index);\r\n                index++;\r\n                // uvs\r\n                u = faceUV[f].x + (faceUV[f].z - faceUV[f].x) * (0.5 + x);\r\n                v = faceUV[f].y + (faceUV[f].w - faceUV[f].y) * (y - 0.5);\r\n                uvs.push(u, useOpenGLOrientationForUV ? 1.0 - v : v);\r\n                tmp = x * Math.cos(ang) - y * Math.sin(ang);\r\n                y = x * Math.sin(ang) + y * Math.cos(ang);\r\n                x = tmp;\r\n                // colors\r\n                if (faceColors) {\r\n                    colors.push(faceColors[f].r, faceColors[f].g, faceColors[f].b, faceColors[f].a);\r\n                }\r\n            }\r\n\r\n            // indices from indexes\r\n            for (i = 0; i < fl - 2; i++) {\r\n                indices.push(indexes[0 + faceIdx], indexes[i + 2 + faceIdx], indexes[i + 1 + faceIdx]);\r\n            }\r\n            faceIdx += fl;\r\n        }\r\n    }\r\n\r\n    VertexData.ComputeNormals(positions, indices, normals);\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    const vertexData = new VertexData();\r\n    vertexData.positions = positions;\r\n    vertexData.indices = indices;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n    if (faceColors && flat) {\r\n        vertexData.colors = colors;\r\n    }\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a polyhedron mesh\r\n * * The parameter `type` (positive integer, max 14, default 0) sets the polyhedron type to build among the 15 embbeded types. Please refer to the type sheet in the tutorial to choose the wanted type\r\n * * The parameter `size` (positive float, default 1) sets the polygon size\r\n * * You can overwrite the `size` on each dimension bu using the parameters `sizeX`, `sizeY` or `sizeZ` (positive floats, default to `size` value)\r\n * * You can build other polyhedron types than the 15 embbeded ones by setting the parameter `custom` (`polyhedronObject`, default null). If you set the parameter `custom`, this overrides the parameter `type`\r\n * * A `polyhedronObject` is a formatted javascript object. You'll find a full file with pre-set polyhedra here : https://github.com/BabylonJS/Extensions/tree/master/Polyhedron\r\n * * You can set the color and the UV of each side of the polyhedron with the parameters `faceColors` (Color4, default `(1, 1, 1, 1)`) and faceUV (Vector4, default `(0, 0, 1, 1)`)\r\n * * To understand how to set `faceUV` or `faceColors`, please read this by considering the right number of faces of your polyhedron, instead of only 6 for the box : https://doc.babylonjs.com/features/featuresDeepDive/materials/using/texturePerBoxFace\r\n * * The parameter `flat` (boolean, default true). If set to false, it gives the polyhedron a single global face, so less vertices and shared normals. In this case, `faceColors` and `faceUV` are ignored\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the polyhedron mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/polyhedra\r\n */\r\nexport function CreatePolyhedron(\r\n    name: string,\r\n    options: {\r\n        type?: number;\r\n        size?: number;\r\n        sizeX?: number;\r\n        sizeY?: number;\r\n        sizeZ?: number;\r\n        custom?: any;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        flat?: boolean;\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const polyhedron = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    polyhedron._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreatePolyhedronVertexData(options);\r\n\r\n    vertexData.applyToMesh(polyhedron, options.updatable);\r\n\r\n    return polyhedron;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const PolyhedronBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreatePolyhedron,\r\n};\r\n\r\nVertexData.CreatePolyhedron = CreatePolyhedronVertexData;\r\n\r\nMesh.CreatePolyhedron = (\r\n    name: string,\r\n    options: {\r\n        type?: number;\r\n        size?: number;\r\n        sizeX?: number;\r\n        sizeY?: number;\r\n        sizeZ?: number;\r\n        custom?: any;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n    },\r\n    scene: Scene\r\n): Mesh => {\r\n    return CreatePolyhedron(name, options, scene);\r\n};\r\n", "import type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData of the IcoSphere\r\n * @param options an object used to set the following optional parameters for the IcoSphere, required but can be empty\r\n * * radius the radius of the IcoSphere, optional default 1\r\n * * radiusX allows stretching in the x direction, optional, default radius\r\n * * radiusY allows stretching in the y direction, optional, default radius\r\n * * radiusZ allows stretching in the z direction, optional, default radius\r\n * * flat when true creates a flat shaded mesh, optional, default true\r\n * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @returns the VertexData of the IcoSphere\r\n */\r\nexport function CreateIcoSphereVertexData(options: {\r\n    radius?: number;\r\n    radiusX?: number;\r\n    radiusY?: number;\r\n    radiusZ?: number;\r\n    flat?: boolean;\r\n    subdivisions?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n}): VertexData {\r\n    const sideOrientation = options.sideOrientation || VertexData.DEFAULTSIDE;\r\n    const radius = options.radius || 1;\r\n    const flat = options.flat === undefined ? true : options.flat;\r\n    const subdivisions = (options.subdivisions || 4) | 0;\r\n    const radiusX = options.radiusX || radius;\r\n    const radiusY = options.radiusY || radius;\r\n    const radiusZ = options.radiusZ || radius;\r\n\r\n    const t = (1 + Math.sqrt(5)) / 2;\r\n\r\n    // 12 vertex x,y,z\r\n    const icoVertices = [\r\n        -1,\r\n        t,\r\n        -0,\r\n        1,\r\n        t,\r\n        0,\r\n        -1,\r\n        -t,\r\n        0,\r\n        1,\r\n        -t,\r\n        0, // v0-3\r\n        0,\r\n        -1,\r\n        -t,\r\n        0,\r\n        1,\r\n        -t,\r\n        0,\r\n        -1,\r\n        t,\r\n        0,\r\n        1,\r\n        t, // v4-7\r\n        t,\r\n        0,\r\n        1,\r\n        t,\r\n        0,\r\n        -1,\r\n        -t,\r\n        0,\r\n        1,\r\n        -t,\r\n        0,\r\n        -1, // v8-11\r\n    ];\r\n\r\n    // index of 3 vertex makes a face of icopshere\r\n    const icoIndices = [\r\n        0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 12, 22, 23, 1, 5, 20, 5, 11, 4, 23, 22, 13, 22, 18, 6, 7, 1, 8, 14, 21, 4, 14, 4, 2, 16, 13, 6, 15, 6, 19, 3, 8, 9, 4, 21, 5, 13, 17,\r\n        23, 6, 13, 22, 19, 6, 18, 9, 8, 1,\r\n    ];\r\n    // vertex for uv have aliased position, not for UV\r\n    const verticesUnaliasId = [\r\n        0,\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        10,\r\n        11,\r\n        // vertex alias\r\n        0, // 12: 0 + 12\r\n        2, // 13: 2 + 11\r\n        3, // 14: 3 + 11\r\n        3, // 15: 3 + 12\r\n        3, // 16: 3 + 13\r\n        4, // 17: 4 + 13\r\n        7, // 18: 7 + 11\r\n        8, // 19: 8 + 11\r\n        9, // 20: 9 + 11\r\n        9, // 21: 9 + 12\r\n        10, // 22: A + 12\r\n        11, // 23: B + 12\r\n    ];\r\n\r\n    // uv as integer step (not pixels !)\r\n    const icoVertexuv = [\r\n        5,\r\n        1,\r\n        3,\r\n        1,\r\n        6,\r\n        4,\r\n        0,\r\n        0, // v0-3\r\n        5,\r\n        3,\r\n        4,\r\n        2,\r\n        2,\r\n        2,\r\n        4,\r\n        0, // v4-7\r\n        2,\r\n        0,\r\n        1,\r\n        1,\r\n        6,\r\n        0,\r\n        6,\r\n        2, // v8-11\r\n        // vertex alias (for same vertex on different faces)\r\n        0,\r\n        4, // 12: 0 + 12\r\n        3,\r\n        3, // 13: 2 + 11\r\n        4,\r\n        4, // 14: 3 + 11\r\n        3,\r\n        1, // 15: 3 + 12\r\n        4,\r\n        2, // 16: 3 + 13\r\n        4,\r\n        4, // 17: 4 + 13\r\n        0,\r\n        2, // 18: 7 + 11\r\n        1,\r\n        1, // 19: 8 + 11\r\n        2,\r\n        2, // 20: 9 + 11\r\n        3,\r\n        3, // 21: 9 + 12\r\n        1,\r\n        3, // 22: A + 12\r\n        2,\r\n        4, // 23: B + 12\r\n    ];\r\n\r\n    // Vertices[0, 1, ...9, A, B] : position on UV plane\r\n    // '+' indicate duplicate position to be fixed (3,9:0,2,3,4,7,8,A,B)\r\n    // First island of uv mapping\r\n    // v = 4h          3+  2\r\n    // v = 3h        9+  4\r\n    // v = 2h      9+  5   B\r\n    // v = 1h    9   1   0\r\n    // v = 0h  3   8   7   A\r\n    //     u = 0 1 2 3 4 5 6  *a\r\n\r\n    // Second island of uv mapping\r\n    // v = 4h  0+  B+  4+\r\n    // v = 3h    A+  2+\r\n    // v = 2h  7+  6   3+\r\n    // v = 1h    8+  3+\r\n    // v = 0h\r\n    //     u = 0 1 2 3 4 5 6  *a\r\n\r\n    // Face layout on texture UV mapping\r\n    // ============\r\n    // \\ 4  /\\ 16 /   ======\r\n    //  \\  /  \\  /   /\\ 11 /\r\n    //   \\/ 7  \\/   /  \\  /\r\n    //    =======  / 10 \\/\r\n    //   /\\ 17 /\\  =======\r\n    //  /  \\  /  \\ \\ 15 /\\\r\n    // / 8  \\/ 12 \\ \\  /  \\\r\n    // ============  \\/ 6  \\\r\n    // \\ 18 /\\  ============\r\n    //  \\  /  \\ \\ 5  /\\ 0  /\r\n    //   \\/ 13 \\ \\  /  \\  /\r\n    //   =======  \\/ 1  \\/\r\n    //       =============\r\n    //      /\\ 19 /\\  2 /\\\r\n    //     /  \\  /  \\  /  \\\r\n    //    / 14 \\/ 9  \\/  3 \\\r\n    //   ===================\r\n\r\n    // uv step is u:1 or 0.5, v:cos(30)=sqrt(3)/2, ratio approx is 84/97\r\n    const ustep = 138 / 1024;\r\n    const vstep = 239 / 1024;\r\n    const uoffset = 60 / 1024;\r\n    const voffset = 26 / 1024;\r\n    // Second island should have margin, not to touch the first island\r\n    // avoid any borderline artefact in pixel rounding\r\n    const islandUoffset = -40 / 1024;\r\n    const islandVoffset = +20 / 1024;\r\n    // face is either island 0 or 1 :\r\n    // second island is for faces : [4, 7, 8, 12, 13, 16, 17, 18]\r\n    const island = [\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        1, //  0 - 4\r\n        0,\r\n        0,\r\n        1,\r\n        1,\r\n        0, //  5 - 9\r\n        0,\r\n        0,\r\n        1,\r\n        1,\r\n        0, //  10 - 14\r\n        0,\r\n        1,\r\n        1,\r\n        1,\r\n        0, //  15 - 19\r\n    ];\r\n\r\n    const indices: number[] = [];\r\n    const positions: number[] = [];\r\n    const normals: number[] = [];\r\n    const uvs: number[] = [];\r\n\r\n    let currentIndice = 0;\r\n    // prepare array of 3 vector (empty) (to be worked in place, shared for each face)\r\n    const faceVertexPos = new Array(3);\r\n    const faceVertexUv = new Array(3);\r\n    let v012;\r\n    for (v012 = 0; v012 < 3; v012++) {\r\n        faceVertexPos[v012] = Vector3.Zero();\r\n        faceVertexUv[v012] = Vector2.Zero();\r\n    }\r\n    // create all with normals\r\n    for (let face = 0; face < 20; face++) {\r\n        // 3 vertex per face\r\n        for (v012 = 0; v012 < 3; v012++) {\r\n            // look up vertex 0,1,2 to its index in 0 to 11 (or 23 including alias)\r\n            const vId = icoIndices[3 * face + v012];\r\n            // vertex have 3D position (x,y,z)\r\n            faceVertexPos[v012].copyFromFloats(icoVertices[3 * verticesUnaliasId[vId]], icoVertices[3 * verticesUnaliasId[vId] + 1], icoVertices[3 * verticesUnaliasId[vId] + 2]);\r\n            // Normalize to get normal\r\n            faceVertexPos[v012].normalize();\r\n\r\n            // uv Coordinates from vertex ID\r\n            faceVertexUv[v012].copyFromFloats(\r\n                icoVertexuv[2 * vId] * ustep + uoffset + island[face] * islandUoffset,\r\n                icoVertexuv[2 * vId + 1] * vstep + voffset + island[face] * islandVoffset\r\n            );\r\n        }\r\n\r\n        // Subdivide the face (interpolate pos, norm, uv)\r\n        // - pos is linear interpolation, then projected to sphere (converge polyhedron to sphere)\r\n        // - norm is linear interpolation of vertex corner normal\r\n        //   (to be checked if better to re-calc from face vertex, or if approximation is OK ??? )\r\n        // - uv is linear interpolation\r\n        //\r\n        // Topology is as below for sub-divide by 2\r\n        // vertex shown as v0,v1,v2\r\n        // interp index is i1 to progress in range [v0,v1[\r\n        // interp index is i2 to progress in range [v0,v2[\r\n        // face index as  (i1,i2)  for /\\  : (i1,i2),(i1+1,i2),(i1,i2+1)\r\n        //            and (i1,i2)' for \\/  : (i1+1,i2),(i1+1,i2+1),(i1,i2+1)\r\n        //\r\n        //\r\n        //                    i2    v2\r\n        //                    ^    ^\r\n        //                   /    / \\\r\n        //                  /    /   \\\r\n        //                 /    /     \\\r\n        //                /    / (0,1) \\\r\n        //               /    #---------\\\r\n        //              /    / \\ (0,0)'/ \\\r\n        //             /    /   \\     /   \\\r\n        //            /    /     \\   /     \\\r\n        //           /    / (0,0) \\ / (1,0) \\\r\n        //          /    #---------#---------\\\r\n        //              v0                    v1\r\n        //\r\n        //              --------------------> i1\r\n        //\r\n        // interp of (i1,i2):\r\n        //  along i2 :  x0=lerp(v0,v2, i2/S) <---> x1=lerp(v1,v2, i2/S)\r\n        //  along i1 :  lerp(x0,x1, i1/(S-i2))\r\n        //\r\n        // centroid of triangle is needed to get help normal computation\r\n        //  (c1,c2) are used for centroid location\r\n\r\n        const interpVertex = (i1: number, i2: number, c1: number, c2: number) => {\r\n            // vertex is interpolated from\r\n            //   - face_vertex_pos[0..2]\r\n            //   - face_vertex_uv[0..2]\r\n            const posX0 = Vector3.Lerp(faceVertexPos[0], faceVertexPos[2], i2 / subdivisions);\r\n            const posX1 = Vector3.Lerp(faceVertexPos[1], faceVertexPos[2], i2 / subdivisions);\r\n            const posInterp = subdivisions === i2 ? faceVertexPos[2] : Vector3.Lerp(posX0, posX1, i1 / (subdivisions - i2));\r\n            posInterp.normalize();\r\n\r\n            let vertexNormal;\r\n            if (flat) {\r\n                // in flat mode, recalculate normal as face centroid normal\r\n                const centroidX0 = Vector3.Lerp(faceVertexPos[0], faceVertexPos[2], c2 / subdivisions);\r\n                const centroidX1 = Vector3.Lerp(faceVertexPos[1], faceVertexPos[2], c2 / subdivisions);\r\n                vertexNormal = Vector3.Lerp(centroidX0, centroidX1, c1 / (subdivisions - c2));\r\n            } else {\r\n                // in smooth mode, recalculate normal from each single vertex position\r\n                vertexNormal = new Vector3(posInterp.x, posInterp.y, posInterp.z);\r\n            }\r\n            // Vertex normal need correction due to X,Y,Z radius scaling\r\n            vertexNormal.x /= radiusX;\r\n            vertexNormal.y /= radiusY;\r\n            vertexNormal.z /= radiusZ;\r\n            vertexNormal.normalize();\r\n\r\n            const uvX0 = Vector2.Lerp(faceVertexUv[0], faceVertexUv[2], i2 / subdivisions);\r\n            const uvX1 = Vector2.Lerp(faceVertexUv[1], faceVertexUv[2], i2 / subdivisions);\r\n            const uvInterp = subdivisions === i2 ? faceVertexUv[2] : Vector2.Lerp(uvX0, uvX1, i1 / (subdivisions - i2));\r\n            positions.push(posInterp.x * radiusX, posInterp.y * radiusY, posInterp.z * radiusZ);\r\n            normals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\r\n            uvs.push(uvInterp.x, useOpenGLOrientationForUV ? 1.0 - uvInterp.y : uvInterp.y);\r\n            // push each vertex has member of a face\r\n            // Same vertex can belong to multiple face, it is pushed multiple time (duplicate vertex are present)\r\n            indices.push(currentIndice);\r\n            currentIndice++;\r\n        };\r\n\r\n        for (let i2 = 0; i2 < subdivisions; i2++) {\r\n            for (let i1 = 0; i1 + i2 < subdivisions; i1++) {\r\n                // face : (i1,i2)  for /\\  :\r\n                // interp for : (i1,i2),(i1+1,i2),(i1,i2+1)\r\n                interpVertex(i1, i2, i1 + 1.0 / 3, i2 + 1.0 / 3);\r\n                interpVertex(i1 + 1, i2, i1 + 1.0 / 3, i2 + 1.0 / 3);\r\n                interpVertex(i1, i2 + 1, i1 + 1.0 / 3, i2 + 1.0 / 3);\r\n                if (i1 + i2 + 1 < subdivisions) {\r\n                    // face : (i1,i2)' for \\/  :\r\n                    // interp for (i1+1,i2),(i1+1,i2+1),(i1,i2+1)\r\n                    interpVertex(i1 + 1, i2, i1 + 2.0 / 3, i2 + 2.0 / 3);\r\n                    interpVertex(i1 + 1, i2 + 1, i1 + 2.0 / 3, i2 + 2.0 / 3);\r\n                    interpVertex(i1, i2 + 1, i1 + 2.0 / 3, i2 + 2.0 / 3);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided\r\n * * The parameter `radius` sets the radius size (float) of the icosphere (default 1)\r\n * * You can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value of `radius`)\r\n * * The parameter `subdivisions` sets the number of subdivisions (positive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size\r\n * * The parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the icosahedron mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/polyhedra#icosphere\r\n */\r\nexport function CreateIcoSphere(\r\n    name: string,\r\n    options: {\r\n        radius?: number;\r\n        radiusX?: number;\r\n        radiusY?: number;\r\n        radiusZ?: number;\r\n        flat?: boolean;\r\n        subdivisions?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        updatable?: boolean;\r\n    } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const sphere = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    sphere._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateIcoSphereVertexData(options);\r\n\r\n    vertexData.applyToMesh(sphere, options.updatable);\r\n\r\n    return sphere;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const IcoSphereBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateIcoSphere,\r\n};\r\n\r\nVertexData.CreateIcoSphere = CreateIcoSphereVertexData;\r\n\r\nMesh.CreateIcoSphere = (name: string, options: { radius?: number; flat?: boolean; subdivisions?: number; sideOrientation?: number; updatable?: boolean }, scene: Scene): Mesh => {\r\n    return CreateIcoSphere(name, options, scene);\r\n};\r\n", "import type { Nullable, IndicesArray, FloatArray } from \"../../types\";\r\nimport { Vector3, Matrix, Vector2, TmpVectors } from \"../../Maths/math.vector\";\r\nimport { Lerp } from \"../../Maths/math.scalar.functions\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { AbstractMesh } from \"../abstractMesh\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\nconst XpAxis = new Vector3(1, 0, 0);\r\nconst XnAxis = new Vector3(-1, 0, 0);\r\nconst YpAxis = new Vector3(0, 1, 0);\r\nconst YnAxis = new Vector3(0, -1, 0);\r\nconst ZpAxis = new Vector3(0, 0, 1);\r\nconst ZnAxis = new Vector3(0, 0, -1);\r\n\r\n/** @internal */\r\nclass DecalVertex {\r\n    constructor(\r\n        public position: Vector3 = Vector3.Zero(),\r\n        public normal: Vector3 = Vector3.Up(),\r\n        public uv: Vector2 = Vector2.Zero(),\r\n        public vertexIdx: number = 0,\r\n        public vertexIdxForBones: number = 0,\r\n        public localPositionOverride: Nullable<number[]> = null,\r\n        public localNormalOverride: Nullable<number[]> = null,\r\n        public matrixIndicesOverride: Nullable<number[]> = null,\r\n        public matrixWeightsOverride: Nullable<number[]> = null\r\n    ) {}\r\n    public clone(): DecalVertex {\r\n        return new DecalVertex(\r\n            this.position.clone(),\r\n            this.normal.clone(),\r\n            this.uv.clone(),\r\n            this.vertexIdx,\r\n            this.vertexIdxForBones,\r\n            this.localPositionOverride?.slice(),\r\n            this.localNormalOverride?.slice(),\r\n            this.matrixIndicesOverride?.slice(),\r\n            this.matrixWeightsOverride?.slice()\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a decal mesh.\r\n * A decal is a mesh usually applied as a model onto the surface of another mesh. So don't forget the parameter `sourceMesh` depicting the decal\r\n * * The parameter `position` (Vector3, default `(0, 0, 0)`) sets the position of the decal in World coordinates\r\n * * The parameter `normal` (Vector3, default `Vector3.Up`) sets the normal of the mesh where the decal is applied onto in World coordinates\r\n * * The parameter `size` (Vector3, default `(1, 1, 1)`) sets the decal scaling\r\n * * The parameter `angle` (float in radian, default 0) sets the angle to rotate the decal\r\n * * The parameter `captureUVS` defines if we need to capture the uvs or compute them\r\n * * The parameter `cullBackFaces` defines if the back faces should be removed from the decal mesh\r\n * * The parameter `localMode` defines that the computations should be done with the local mesh coordinates instead of the world space coordinates.\r\n * *    Use this mode if you want the decal to be parented to the sourceMesh and move/rotate with it.\r\n * Note: Meshes with morph targets are not supported!\r\n * @param name defines the name of the mesh\r\n * @param sourceMesh defines the mesh where the decal must be applied\r\n * @param options defines the options used to create the mesh\r\n * @returns the decal mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/decals\r\n */\r\nexport function CreateDecal(\r\n    name: string,\r\n    sourceMesh: AbstractMesh,\r\n    options: { position?: Vector3; normal?: Vector3; size?: Vector3; angle?: number; captureUVS?: boolean; cullBackFaces?: boolean; localMode?: boolean }\r\n): Mesh {\r\n    const hasSkeleton = !!sourceMesh.skeleton;\r\n    const hasMorphTargets = !!sourceMesh.morphTargetManager?.numTargets;\r\n    const useLocalComputation = options.localMode || hasSkeleton;\r\n\r\n    const indices = <IndicesArray>sourceMesh.getIndices();\r\n    const positions = hasSkeleton || hasMorphTargets ? sourceMesh.getPositionData(true, true) : sourceMesh.getVerticesData(VertexBuffer.PositionKind);\r\n    const normals = hasSkeleton || hasMorphTargets ? sourceMesh.getNormalsData(true, true) : sourceMesh.getVerticesData(VertexBuffer.NormalKind);\r\n    const localPositions = useLocalComputation ? (hasSkeleton ? sourceMesh.getVerticesData(VertexBuffer.PositionKind) : positions) : null;\r\n    const localNormals = useLocalComputation ? (hasSkeleton ? sourceMesh.getVerticesData(VertexBuffer.NormalKind) : normals) : null;\r\n    const uvs = sourceMesh.getVerticesData(VertexBuffer.UVKind);\r\n    const matIndices = hasSkeleton ? sourceMesh.getVerticesData(VertexBuffer.MatricesIndicesKind) : null;\r\n    const matWeights = hasSkeleton ? sourceMesh.getVerticesData(VertexBuffer.MatricesWeightsKind) : null;\r\n    const matIndicesExtra = hasSkeleton ? sourceMesh.getVerticesData(VertexBuffer.MatricesIndicesExtraKind) : null;\r\n    const matWeightsExtra = hasSkeleton ? sourceMesh.getVerticesData(VertexBuffer.MatricesWeightsExtraKind) : null;\r\n\r\n    const position = options.position || Vector3.Zero();\r\n    let normal = options.normal || Vector3.Up();\r\n    const size = options.size || Vector3.One();\r\n    const angle = options.angle || 0;\r\n\r\n    // Getting correct rotation\r\n    if (!normal) {\r\n        const target = new Vector3(0, 0, 1);\r\n        const camera = <Camera>sourceMesh.getScene().activeCamera;\r\n        const cameraWorldTarget = Vector3.TransformCoordinates(target, camera.getWorldMatrix());\r\n\r\n        normal = camera.globalPosition.subtract(cameraWorldTarget);\r\n    }\r\n\r\n    const yaw = -Math.atan2(normal.z, normal.x) - Math.PI / 2;\r\n    const len = Math.sqrt(normal.x * normal.x + normal.z * normal.z);\r\n    const pitch = Math.atan2(normal.y, len);\r\n\r\n    const vertexData = new VertexData();\r\n    vertexData.indices = [];\r\n    vertexData.positions = [];\r\n    vertexData.normals = [];\r\n    vertexData.uvs = [];\r\n    vertexData.matricesIndices = hasSkeleton ? [] : null;\r\n    vertexData.matricesWeights = hasSkeleton ? [] : null;\r\n    vertexData.matricesIndicesExtra = matIndicesExtra ? [] : null;\r\n    vertexData.matricesWeightsExtra = matWeightsExtra ? [] : null;\r\n\r\n    let currentVertexDataIndex = 0;\r\n\r\n    const extractDecalVector3 = (indexId: number, transformMatrix: Matrix): DecalVertex => {\r\n        const result = new DecalVertex();\r\n        if (!indices || !positions || !normals) {\r\n            return result;\r\n        }\r\n\r\n        const vertexId = indices[indexId];\r\n\r\n        result.vertexIdx = vertexId * 3;\r\n        result.vertexIdxForBones = vertexId * 4;\r\n\r\n        // Send vector to decal local world\r\n        result.position = new Vector3(positions[vertexId * 3], positions[vertexId * 3 + 1], positions[vertexId * 3 + 2]);\r\n        Vector3.TransformCoordinatesToRef(result.position, transformMatrix, result.position);\r\n\r\n        // Get normal\r\n        result.normal = new Vector3(normals[vertexId * 3], normals[vertexId * 3 + 1], normals[vertexId * 3 + 2]);\r\n        Vector3.TransformNormalToRef(result.normal, transformMatrix, result.normal);\r\n\r\n        if (options.captureUVS && uvs) {\r\n            const v = uvs[vertexId * 2 + 1];\r\n            result.uv = new Vector2(uvs[vertexId * 2], useOpenGLOrientationForUV ? 1 - v : v);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    const emptyArray = [0, 0, 0, 0];\r\n\r\n    // Inspired by https://github.com/mrdoob/three.js/blob/eee231960882f6f3b6113405f524956145148146/examples/js/geometries/DecalGeometry.js\r\n    const clip = (vertices: DecalVertex[], axis: Vector3): Nullable<DecalVertex[]> => {\r\n        if (vertices.length === 0) {\r\n            return vertices;\r\n        }\r\n\r\n        const clipSize = 0.5 * Math.abs(Vector3.Dot(size, axis));\r\n\r\n        const indexOf = (arr: FloatArray | number[], val: number, start: number, num: number) => {\r\n            for (let i = 0; i < num; ++i) {\r\n                if (arr[start + i] === val) {\r\n                    return start + i;\r\n                }\r\n            }\r\n            return -1;\r\n        };\r\n\r\n        const clipVertices = (v0: DecalVertex, v1: DecalVertex): DecalVertex => {\r\n            const clipFactor = Vector3.GetClipFactor(v0.position, v1.position, axis, clipSize);\r\n\r\n            let indices = emptyArray;\r\n            let weights = emptyArray;\r\n\r\n            if (matIndices && matWeights) {\r\n                const mat0Index = v0.matrixIndicesOverride ? 0 : v0.vertexIdxForBones;\r\n                const v0Indices = v0.matrixIndicesOverride ?? matIndices;\r\n                const v0Weights = v0.matrixWeightsOverride ?? matWeights;\r\n\r\n                const mat1Index = v1.matrixIndicesOverride ? 0 : v1.vertexIdxForBones;\r\n                const v1Indices = v1.matrixIndicesOverride ?? matIndices;\r\n                const v1Weights = v1.matrixWeightsOverride ?? matWeights;\r\n\r\n                indices = [0, 0, 0, 0];\r\n                weights = [0, 0, 0, 0];\r\n\r\n                let index = 0;\r\n                for (let i = 0; i < 4; ++i) {\r\n                    if (v0Weights[mat0Index + i] > 0) {\r\n                        const idx = indexOf(v1Indices, v0Indices[mat0Index + i], mat1Index, 4);\r\n                        indices[index] = v0Indices[mat0Index + i];\r\n                        weights[index] = Lerp(v0Weights[mat0Index + i], idx >= 0 ? v1Weights[idx] : 0, clipFactor);\r\n                        index++;\r\n                    }\r\n                }\r\n\r\n                for (let i = 0; i < 4 && index < 4; ++i) {\r\n                    const ind = v1Indices[mat1Index + i];\r\n                    if (indexOf(v0Indices, ind, mat0Index, 4) !== -1) {\r\n                        continue;\r\n                    }\r\n\r\n                    indices[index] = ind;\r\n                    weights[index] = Lerp(0, v1Weights[mat1Index + i], clipFactor);\r\n                    index++;\r\n                }\r\n\r\n                const sumw = weights[0] + weights[1] + weights[2] + weights[3];\r\n\r\n                weights[0] /= sumw;\r\n                weights[1] /= sumw;\r\n                weights[2] /= sumw;\r\n                weights[3] /= sumw;\r\n            }\r\n\r\n            const v0LocalPositionX = v0.localPositionOverride ? v0.localPositionOverride[0] : (localPositions?.[v0.vertexIdx] ?? 0);\r\n            const v0LocalPositionY = v0.localPositionOverride ? v0.localPositionOverride[1] : (localPositions?.[v0.vertexIdx + 1] ?? 0);\r\n            const v0LocalPositionZ = v0.localPositionOverride ? v0.localPositionOverride[2] : (localPositions?.[v0.vertexIdx + 2] ?? 0);\r\n\r\n            const v1LocalPositionX = v1.localPositionOverride ? v1.localPositionOverride[0] : (localPositions?.[v1.vertexIdx] ?? 0);\r\n            const v1LocalPositionY = v1.localPositionOverride ? v1.localPositionOverride[1] : (localPositions?.[v1.vertexIdx + 1] ?? 0);\r\n            const v1LocalPositionZ = v1.localPositionOverride ? v1.localPositionOverride[2] : (localPositions?.[v1.vertexIdx + 2] ?? 0);\r\n\r\n            const v0LocalNormalX = v0.localNormalOverride ? v0.localNormalOverride[0] : (localNormals?.[v0.vertexIdx] ?? 0);\r\n            const v0LocalNormalY = v0.localNormalOverride ? v0.localNormalOverride[1] : (localNormals?.[v0.vertexIdx + 1] ?? 0);\r\n            const v0LocalNormalZ = v0.localNormalOverride ? v0.localNormalOverride[2] : (localNormals?.[v0.vertexIdx + 2] ?? 0);\r\n\r\n            const v1LocalNormalX = v1.localNormalOverride ? v1.localNormalOverride[0] : (localNormals?.[v1.vertexIdx] ?? 0);\r\n            const v1LocalNormalY = v1.localNormalOverride ? v1.localNormalOverride[1] : (localNormals?.[v1.vertexIdx + 1] ?? 0);\r\n            const v1LocalNormalZ = v1.localNormalOverride ? v1.localNormalOverride[2] : (localNormals?.[v1.vertexIdx + 2] ?? 0);\r\n\r\n            const interpNormalX = v0LocalNormalX + (v1LocalNormalX - v0LocalNormalX) * clipFactor;\r\n            const interpNormalY = v0LocalNormalY + (v1LocalNormalY - v0LocalNormalY) * clipFactor;\r\n            const interpNormalZ = v0LocalNormalZ + (v1LocalNormalZ - v0LocalNormalZ) * clipFactor;\r\n\r\n            const norm = Math.sqrt(interpNormalX * interpNormalX + interpNormalY * interpNormalY + interpNormalZ * interpNormalZ);\r\n\r\n            return new DecalVertex(\r\n                Vector3.Lerp(v0.position, v1.position, clipFactor),\r\n                Vector3.Lerp(v0.normal, v1.normal, clipFactor).normalize(),\r\n                Vector2.Lerp(v0.uv, v1.uv, clipFactor),\r\n                -1,\r\n                -1,\r\n                localPositions\r\n                    ? [\r\n                          v0LocalPositionX + (v1LocalPositionX - v0LocalPositionX) * clipFactor,\r\n                          v0LocalPositionY + (v1LocalPositionY - v0LocalPositionY) * clipFactor,\r\n                          v0LocalPositionZ + (v1LocalPositionZ - v0LocalPositionZ) * clipFactor,\r\n                      ]\r\n                    : null,\r\n                localNormals ? [interpNormalX / norm, interpNormalY / norm, interpNormalZ / norm] : null,\r\n                indices,\r\n                weights\r\n            );\r\n        };\r\n\r\n        let clipResult: Nullable<DecalVertex[]> = null;\r\n\r\n        if (vertices.length > 3) {\r\n            clipResult = [] as DecalVertex[];\r\n        }\r\n\r\n        for (let index = 0; index < vertices.length; index += 3) {\r\n            let total = 0;\r\n            let nV1: Nullable<DecalVertex> = null;\r\n            let nV2: Nullable<DecalVertex> = null;\r\n            let nV3: Nullable<DecalVertex> = null;\r\n            let nV4: Nullable<DecalVertex> = null;\r\n\r\n            const d1 = Vector3.Dot(vertices[index].position, axis) - clipSize;\r\n            const d2 = Vector3.Dot(vertices[index + 1].position, axis) - clipSize;\r\n            const d3 = Vector3.Dot(vertices[index + 2].position, axis) - clipSize;\r\n\r\n            const v1Out = d1 > 0;\r\n            const v2Out = d2 > 0;\r\n            const v3Out = d3 > 0;\r\n\r\n            total = (v1Out ? 1 : 0) + (v2Out ? 1 : 0) + (v3Out ? 1 : 0);\r\n\r\n            switch (total) {\r\n                case 0:\r\n                    if (vertices.length > 3) {\r\n                        clipResult!.push(vertices[index]);\r\n                        clipResult!.push(vertices[index + 1]);\r\n                        clipResult!.push(vertices[index + 2]);\r\n                    } else {\r\n                        clipResult = vertices;\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    clipResult = clipResult ?? new Array<DecalVertex>();\r\n                    if (v1Out) {\r\n                        nV1 = vertices[index + 1];\r\n                        nV2 = vertices[index + 2];\r\n                        nV3 = clipVertices(vertices[index], nV1);\r\n                        nV4 = clipVertices(vertices[index], nV2);\r\n                    }\r\n\r\n                    if (v2Out) {\r\n                        nV1 = vertices[index];\r\n                        nV2 = vertices[index + 2];\r\n                        nV3 = clipVertices(vertices[index + 1], nV1);\r\n                        nV4 = clipVertices(vertices[index + 1], nV2);\r\n\r\n                        clipResult.push(nV3);\r\n                        clipResult.push(nV2.clone());\r\n                        clipResult.push(nV1.clone());\r\n\r\n                        clipResult.push(nV2.clone());\r\n                        clipResult.push(nV3.clone());\r\n                        clipResult.push(nV4);\r\n                        break;\r\n                    }\r\n                    if (v3Out) {\r\n                        nV1 = vertices[index];\r\n                        nV2 = vertices[index + 1];\r\n                        nV3 = clipVertices(vertices[index + 2], nV1);\r\n                        nV4 = clipVertices(vertices[index + 2], nV2);\r\n                    }\r\n\r\n                    if (nV1 && nV2 && nV3 && nV4) {\r\n                        clipResult.push(nV1.clone());\r\n                        clipResult.push(nV2.clone());\r\n                        clipResult.push(nV3);\r\n\r\n                        clipResult.push(nV4);\r\n                        clipResult.push(nV3.clone());\r\n                        clipResult.push(nV2.clone());\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    clipResult = clipResult ?? new Array<DecalVertex>();\r\n                    if (!v1Out) {\r\n                        nV1 = vertices[index].clone();\r\n                        nV2 = clipVertices(nV1, vertices[index + 1]);\r\n                        nV3 = clipVertices(nV1, vertices[index + 2]);\r\n                        clipResult.push(nV1);\r\n                        clipResult.push(nV2);\r\n                        clipResult.push(nV3);\r\n                    }\r\n                    if (!v2Out) {\r\n                        nV1 = vertices[index + 1].clone();\r\n                        nV2 = clipVertices(nV1, vertices[index + 2]);\r\n                        nV3 = clipVertices(nV1, vertices[index]);\r\n                        clipResult.push(nV1);\r\n                        clipResult.push(nV2);\r\n                        clipResult.push(nV3);\r\n                    }\r\n                    if (!v3Out) {\r\n                        nV1 = vertices[index + 2].clone();\r\n                        nV2 = clipVertices(nV1, vertices[index]);\r\n                        nV3 = clipVertices(nV1, vertices[index + 1]);\r\n                        clipResult.push(nV1);\r\n                        clipResult.push(nV2);\r\n                        clipResult.push(nV3);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return clipResult;\r\n    };\r\n\r\n    const sourceMeshAsMesh = sourceMesh instanceof Mesh ? sourceMesh : null;\r\n    const matrixData = sourceMeshAsMesh?._thinInstanceDataStorage.matrixData;\r\n\r\n    const numMatrices = sourceMeshAsMesh?.thinInstanceCount || 1;\r\n    const thinInstanceMatrix = TmpVectors.Matrix[0];\r\n\r\n    thinInstanceMatrix.copyFrom(Matrix.IdentityReadOnly);\r\n\r\n    for (let m = 0; m < numMatrices; ++m) {\r\n        if (sourceMeshAsMesh?.hasThinInstances && matrixData) {\r\n            const ofst = m * 16;\r\n\r\n            thinInstanceMatrix.setRowFromFloats(0, matrixData[ofst + 0], matrixData[ofst + 1], matrixData[ofst + 2], matrixData[ofst + 3]);\r\n            thinInstanceMatrix.setRowFromFloats(1, matrixData[ofst + 4], matrixData[ofst + 5], matrixData[ofst + 6], matrixData[ofst + 7]);\r\n            thinInstanceMatrix.setRowFromFloats(2, matrixData[ofst + 8], matrixData[ofst + 9], matrixData[ofst + 10], matrixData[ofst + 11]);\r\n            thinInstanceMatrix.setRowFromFloats(3, matrixData[ofst + 12], matrixData[ofst + 13], matrixData[ofst + 14], matrixData[ofst + 15]);\r\n        }\r\n\r\n        // Matrix\r\n        const decalWorldMatrix = Matrix.RotationYawPitchRoll(yaw, pitch, angle).multiply(Matrix.Translation(position.x, position.y, position.z));\r\n        const inverseDecalWorldMatrix = Matrix.Invert(decalWorldMatrix);\r\n        const meshWorldMatrix = sourceMesh.getWorldMatrix();\r\n        const transformMatrix = thinInstanceMatrix.multiply(meshWorldMatrix).multiply(inverseDecalWorldMatrix);\r\n\r\n        const oneFaceVertices = new Array<DecalVertex>(3);\r\n\r\n        for (let index = 0; index < indices.length; index += 3) {\r\n            let faceVertices: Nullable<DecalVertex[]> = oneFaceVertices;\r\n\r\n            faceVertices[0] = extractDecalVector3(index, transformMatrix);\r\n            faceVertices[1] = extractDecalVector3(index + 1, transformMatrix);\r\n            faceVertices[2] = extractDecalVector3(index + 2, transformMatrix);\r\n\r\n            if (options.cullBackFaces) {\r\n                // If all the normals of the vertices of the face are pointing away from the view direction we discard the face.\r\n                // As computations are done in the decal coordinate space, the viewDirection is (0,0,1), so when dot(vertexNormal, -viewDirection) <= 0 the vertex is culled\r\n                if (-faceVertices[0].normal.z <= 0 && -faceVertices[1].normal.z <= 0 && -faceVertices[2].normal.z <= 0) {\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            // Clip\r\n            faceVertices = clip(faceVertices, XpAxis);\r\n            if (!faceVertices) {\r\n                continue;\r\n            }\r\n            faceVertices = clip(faceVertices, XnAxis);\r\n            if (!faceVertices) {\r\n                continue;\r\n            }\r\n            faceVertices = clip(faceVertices, YpAxis);\r\n            if (!faceVertices) {\r\n                continue;\r\n            }\r\n            faceVertices = clip(faceVertices, YnAxis);\r\n            if (!faceVertices) {\r\n                continue;\r\n            }\r\n            faceVertices = clip(faceVertices, ZpAxis);\r\n            if (!faceVertices) {\r\n                continue;\r\n            }\r\n            faceVertices = clip(faceVertices, ZnAxis);\r\n            if (!faceVertices) {\r\n                continue;\r\n            }\r\n\r\n            // Add UVs and get back to world\r\n            for (let vIndex = 0; vIndex < faceVertices.length; vIndex++) {\r\n                const vertex = faceVertices[vIndex];\r\n\r\n                //TODO check for Int32Array | Uint32Array | Uint16Array\r\n                vertexData.indices.push(currentVertexDataIndex);\r\n                if (useLocalComputation) {\r\n                    if (vertex.localPositionOverride) {\r\n                        vertexData.positions[currentVertexDataIndex * 3] = vertex.localPositionOverride[0];\r\n                        vertexData.positions[currentVertexDataIndex * 3 + 1] = vertex.localPositionOverride[1];\r\n                        vertexData.positions[currentVertexDataIndex * 3 + 2] = vertex.localPositionOverride[2];\r\n                    } else if (localPositions) {\r\n                        vertexData.positions[currentVertexDataIndex * 3] = localPositions[vertex.vertexIdx];\r\n                        vertexData.positions[currentVertexDataIndex * 3 + 1] = localPositions[vertex.vertexIdx + 1];\r\n                        vertexData.positions[currentVertexDataIndex * 3 + 2] = localPositions[vertex.vertexIdx + 2];\r\n                    }\r\n                    if (vertex.localNormalOverride) {\r\n                        vertexData.normals[currentVertexDataIndex * 3] = vertex.localNormalOverride[0];\r\n                        vertexData.normals[currentVertexDataIndex * 3 + 1] = vertex.localNormalOverride[1];\r\n                        vertexData.normals[currentVertexDataIndex * 3 + 2] = vertex.localNormalOverride[2];\r\n                    } else if (localNormals) {\r\n                        vertexData.normals[currentVertexDataIndex * 3] = localNormals[vertex.vertexIdx];\r\n                        vertexData.normals[currentVertexDataIndex * 3 + 1] = localNormals[vertex.vertexIdx + 1];\r\n                        vertexData.normals[currentVertexDataIndex * 3 + 2] = localNormals[vertex.vertexIdx + 2];\r\n                    }\r\n                } else {\r\n                    vertex.position.toArray(vertexData.positions, currentVertexDataIndex * 3);\r\n                    vertex.normal.toArray(vertexData.normals, currentVertexDataIndex * 3);\r\n                }\r\n                if (vertexData.matricesIndices && vertexData.matricesWeights) {\r\n                    if (vertex.matrixIndicesOverride) {\r\n                        vertexData.matricesIndices[currentVertexDataIndex * 4] = vertex.matrixIndicesOverride[0];\r\n                        vertexData.matricesIndices[currentVertexDataIndex * 4 + 1] = vertex.matrixIndicesOverride[1];\r\n                        vertexData.matricesIndices[currentVertexDataIndex * 4 + 2] = vertex.matrixIndicesOverride[2];\r\n                        vertexData.matricesIndices[currentVertexDataIndex * 4 + 3] = vertex.matrixIndicesOverride[3];\r\n                    } else {\r\n                        if (matIndices) {\r\n                            vertexData.matricesIndices[currentVertexDataIndex * 4] = matIndices[vertex.vertexIdxForBones];\r\n                            vertexData.matricesIndices[currentVertexDataIndex * 4 + 1] = matIndices[vertex.vertexIdxForBones + 1];\r\n                            vertexData.matricesIndices[currentVertexDataIndex * 4 + 2] = matIndices[vertex.vertexIdxForBones + 2];\r\n                            vertexData.matricesIndices[currentVertexDataIndex * 4 + 3] = matIndices[vertex.vertexIdxForBones + 3];\r\n                        }\r\n                        if (matIndicesExtra && vertexData.matricesIndicesExtra) {\r\n                            vertexData.matricesIndicesExtra[currentVertexDataIndex * 4] = matIndicesExtra[vertex.vertexIdxForBones];\r\n                            vertexData.matricesIndicesExtra[currentVertexDataIndex * 4 + 1] = matIndicesExtra[vertex.vertexIdxForBones + 1];\r\n                            vertexData.matricesIndicesExtra[currentVertexDataIndex * 4 + 2] = matIndicesExtra[vertex.vertexIdxForBones + 2];\r\n                            vertexData.matricesIndicesExtra[currentVertexDataIndex * 4 + 3] = matIndicesExtra[vertex.vertexIdxForBones + 3];\r\n                        }\r\n                    }\r\n                    if (vertex.matrixWeightsOverride) {\r\n                        vertexData.matricesWeights[currentVertexDataIndex * 4] = vertex.matrixWeightsOverride[0];\r\n                        vertexData.matricesWeights[currentVertexDataIndex * 4 + 1] = vertex.matrixWeightsOverride[1];\r\n                        vertexData.matricesWeights[currentVertexDataIndex * 4 + 2] = vertex.matrixWeightsOverride[2];\r\n                        vertexData.matricesWeights[currentVertexDataIndex * 4 + 3] = vertex.matrixWeightsOverride[3];\r\n                    } else {\r\n                        if (matWeights) {\r\n                            vertexData.matricesWeights[currentVertexDataIndex * 4] = matWeights[vertex.vertexIdxForBones];\r\n                            vertexData.matricesWeights[currentVertexDataIndex * 4 + 1] = matWeights[vertex.vertexIdxForBones + 1];\r\n                            vertexData.matricesWeights[currentVertexDataIndex * 4 + 2] = matWeights[vertex.vertexIdxForBones + 2];\r\n                            vertexData.matricesWeights[currentVertexDataIndex * 4 + 3] = matWeights[vertex.vertexIdxForBones + 3];\r\n                        }\r\n                        if (matWeightsExtra && vertexData.matricesWeightsExtra) {\r\n                            vertexData.matricesWeightsExtra[currentVertexDataIndex * 4] = matWeightsExtra[vertex.vertexIdxForBones];\r\n                            vertexData.matricesWeightsExtra[currentVertexDataIndex * 4 + 1] = matWeightsExtra[vertex.vertexIdxForBones + 1];\r\n                            vertexData.matricesWeightsExtra[currentVertexDataIndex * 4 + 2] = matWeightsExtra[vertex.vertexIdxForBones + 2];\r\n                            vertexData.matricesWeightsExtra[currentVertexDataIndex * 4 + 3] = matWeightsExtra[vertex.vertexIdxForBones + 3];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!options.captureUVS) {\r\n                    vertexData.uvs.push(0.5 + vertex.position.x / size.x);\r\n                    const v = 0.5 + vertex.position.y / size.y;\r\n                    vertexData.uvs.push(useOpenGLOrientationForUV ? 1 - v : v);\r\n                } else {\r\n                    vertex.uv.toArray(vertexData.uvs, currentVertexDataIndex * 2);\r\n                }\r\n                currentVertexDataIndex++;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Avoid the \"Setting vertex data kind 'XXX' with an empty array\" warning when calling vertexData.applyToMesh\r\n    if (vertexData.indices.length === 0) {\r\n        vertexData.indices = null;\r\n    }\r\n    if (vertexData.positions.length === 0) {\r\n        vertexData.positions = null;\r\n    }\r\n    if (vertexData.normals.length === 0) {\r\n        vertexData.normals = null;\r\n    }\r\n    if (vertexData.uvs.length === 0) {\r\n        vertexData.uvs = null;\r\n    }\r\n    if (vertexData.matricesIndices?.length === 0) {\r\n        vertexData.matricesIndices = null;\r\n    }\r\n    if (vertexData.matricesWeights?.length === 0) {\r\n        vertexData.matricesWeights = null;\r\n    }\r\n    if (vertexData.matricesIndicesExtra?.length === 0) {\r\n        vertexData.matricesIndicesExtra = null;\r\n    }\r\n    if (vertexData.matricesWeightsExtra?.length === 0) {\r\n        vertexData.matricesWeightsExtra = null;\r\n    }\r\n\r\n    // Return mesh\r\n    const decal = new Mesh(name, sourceMesh.getScene());\r\n    vertexData.applyToMesh(decal);\r\n\r\n    if (useLocalComputation) {\r\n        decal.skeleton = sourceMesh.skeleton;\r\n        decal.parent = sourceMesh;\r\n    } else {\r\n        decal.position = position.clone();\r\n        decal.rotation = new Vector3(pitch, yaw, angle);\r\n    }\r\n\r\n    decal.computeWorldMatrix(true);\r\n    decal.refreshBoundingInfo(true, true);\r\n\r\n    return decal;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const DecalBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateDecal,\r\n};\r\n\r\nMesh.CreateDecal = (name: string, sourceMesh: AbstractMesh, position: Vector3, normal: Vector3, size: Vector3, angle: number): Mesh => {\r\n    const options = {\r\n        position,\r\n        normal,\r\n        size,\r\n        angle,\r\n    };\r\n\r\n    return CreateDecal(name, sourceMesh, options);\r\n};\r\n", "import { VertexData } from \"../mesh.vertexData\";\r\nimport { Vector2, Vector3, Matrix } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n/**\r\n * Scripts based off of https://github.com/maximeq/three-js-capsule-geometry/blob/master/src/CapsuleBufferGeometry.js\r\n * @param options the constructors options used to shape the mesh.\r\n * @returns the capsule VertexData\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set/capsule\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function CreateCapsuleVertexData(\r\n    options: ICreateCapsuleOptions = {\r\n        subdivisions: 2,\r\n        tessellation: 16,\r\n        height: 1,\r\n        radius: 0.25,\r\n        capSubdivisions: 6,\r\n    }\r\n): VertexData {\r\n    const subdivisions = Math.max(options.subdivisions ? options.subdivisions : 2, 1) | 0;\r\n    const tessellation = Math.max(options.tessellation ? options.tessellation : 16, 3) | 0;\r\n    const height = Math.max(options.height ? options.height : 1, 0);\r\n    const radius = Math.max(options.radius ? options.radius : 0.25, 0);\r\n    const capDetail = Math.max(options.capSubdivisions ? options.capSubdivisions : 6, 1) | 0;\r\n\r\n    const radialSegments = tessellation;\r\n    const heightSegments = subdivisions;\r\n\r\n    const radiusTop = Math.max(options.radiusTop ? options.radiusTop : radius, 0);\r\n    const radiusBottom = Math.max(options.radiusBottom ? options.radiusBottom : radius, 0);\r\n\r\n    const heightMinusCaps = height - (radiusTop + radiusBottom);\r\n\r\n    const thetaStart = 0.0;\r\n    const thetaLength = 2.0 * Math.PI;\r\n\r\n    const capsTopSegments = Math.max(options.topCapSubdivisions ? options.topCapSubdivisions : capDetail, 1);\r\n    const capsBottomSegments = Math.max(options.bottomCapSubdivisions ? options.bottomCapSubdivisions : capDetail, 1);\r\n\r\n    const alpha = Math.acos((radiusBottom - radiusTop) / height);\r\n\r\n    let indices = [];\r\n    const vertices = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n\r\n    let index = 0;\r\n    const indexArray = [],\r\n        halfHeight = heightMinusCaps * 0.5;\r\n    const pi2 = Math.PI * 0.5;\r\n\r\n    let x, y;\r\n    const normal = Vector3.Zero();\r\n    const vertex = Vector3.Zero();\r\n\r\n    const cosAlpha = Math.cos(alpha);\r\n    const sinAlpha = Math.sin(alpha);\r\n\r\n    const coneLength = new Vector2(radiusTop * sinAlpha, halfHeight + radiusTop * cosAlpha)\r\n        .subtract(new Vector2(radiusBottom * sinAlpha, -halfHeight + radiusBottom * cosAlpha))\r\n        .length();\r\n\r\n    // Total length for v texture coord\r\n    const vl = radiusTop * alpha + coneLength + radiusBottom * (pi2 - alpha);\r\n\r\n    let v = 0;\r\n    for (y = 0; y <= capsTopSegments; y++) {\r\n        const indexRow = [];\r\n\r\n        const a = pi2 - alpha * (y / capsTopSegments);\r\n\r\n        v += (radiusTop * alpha) / capsTopSegments;\r\n\r\n        const cosA = Math.cos(a);\r\n        const sinA = Math.sin(a);\r\n\r\n        // calculate the radius of the current row\r\n        const _radius = cosA * radiusTop;\r\n\r\n        for (x = 0; x <= radialSegments; x++) {\r\n            const u = x / radialSegments;\r\n            const theta = u * thetaLength + thetaStart;\r\n            const sinTheta = Math.sin(theta);\r\n            const cosTheta = Math.cos(theta);\r\n            // vertex\r\n            vertex.x = _radius * sinTheta;\r\n            vertex.y = halfHeight + sinA * radiusTop;\r\n            vertex.z = _radius * cosTheta;\r\n            vertices.push(vertex.x, vertex.y, vertex.z);\r\n            // normal\r\n            normal.set(cosA * sinTheta, sinA, cosA * cosTheta);\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            // uv\r\n            uvs.push(u, useOpenGLOrientationForUV ? v / vl : 1 - v / vl);\r\n            // save index of vertex in respective row\r\n            indexRow.push(index);\r\n            // increase index\r\n            index++;\r\n        }\r\n        // now save vertices of the row in our index array\r\n        indexArray.push(indexRow);\r\n    }\r\n\r\n    const coneHeight = height - radiusTop - radiusBottom + cosAlpha * radiusTop - cosAlpha * radiusBottom;\r\n    const slope = (sinAlpha * (radiusBottom - radiusTop)) / coneHeight;\r\n\r\n    for (y = 1; y <= heightSegments; y++) {\r\n        const indexRow = [];\r\n        v += coneLength / heightSegments;\r\n        // calculate the radius of the current row\r\n        const _radius = sinAlpha * ((y * (radiusBottom - radiusTop)) / heightSegments + radiusTop);\r\n        for (x = 0; x <= radialSegments; x++) {\r\n            const u = x / radialSegments;\r\n            const theta = u * thetaLength + thetaStart;\r\n            const sinTheta = Math.sin(theta);\r\n            const cosTheta = Math.cos(theta);\r\n            // vertex\r\n            vertex.x = _radius * sinTheta;\r\n            vertex.y = halfHeight + cosAlpha * radiusTop - (y * coneHeight) / heightSegments;\r\n            vertex.z = _radius * cosTheta;\r\n            vertices.push(vertex.x, vertex.y, vertex.z);\r\n            // normal\r\n            normal.set(sinTheta, slope, cosTheta).normalize();\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            // uv\r\n            uvs.push(u, useOpenGLOrientationForUV ? v / vl : 1 - v / vl);\r\n            // save index of vertex in respective row\r\n            indexRow.push(index);\r\n            // increase index\r\n            index++;\r\n        }\r\n        // now save vertices of the row in our index array\r\n        indexArray.push(indexRow);\r\n    }\r\n\r\n    for (y = 1; y <= capsBottomSegments; y++) {\r\n        const indexRow = [];\r\n        const a = pi2 - alpha - (Math.PI - alpha) * (y / capsBottomSegments);\r\n        v += (radiusBottom * alpha) / capsBottomSegments;\r\n        const cosA = Math.cos(a);\r\n        const sinA = Math.sin(a);\r\n        // calculate the radius of the current row\r\n        const _radius = cosA * radiusBottom;\r\n        for (x = 0; x <= radialSegments; x++) {\r\n            const u = x / radialSegments;\r\n            const theta = u * thetaLength + thetaStart;\r\n            const sinTheta = Math.sin(theta);\r\n            const cosTheta = Math.cos(theta);\r\n            // vertex\r\n            vertex.x = _radius * sinTheta;\r\n            vertex.y = -halfHeight + sinA * radiusBottom;\r\n            vertex.z = _radius * cosTheta;\r\n            vertices.push(vertex.x, vertex.y, vertex.z);\r\n            // normal\r\n            normal.set(cosA * sinTheta, sinA, cosA * cosTheta);\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            // uv\r\n            uvs.push(u, useOpenGLOrientationForUV ? v / vl : 1 - v / vl);\r\n            // save index of vertex in respective row\r\n            indexRow.push(index);\r\n            // increase index\r\n            index++;\r\n        }\r\n        // now save vertices of the row in our index array\r\n        indexArray.push(indexRow);\r\n    }\r\n    // generate indices\r\n    for (x = 0; x < radialSegments; x++) {\r\n        for (y = 0; y < capsTopSegments + heightSegments + capsBottomSegments; y++) {\r\n            // we use the index array to access the correct indices\r\n            const i1 = indexArray[y][x];\r\n            const i2 = indexArray[y + 1][x];\r\n            const i3 = indexArray[y + 1][x + 1];\r\n            const i4 = indexArray[y][x + 1];\r\n            // face one\r\n            indices.push(i1);\r\n            indices.push(i2);\r\n            indices.push(i4);\r\n            // face two\r\n            indices.push(i2);\r\n            indices.push(i3);\r\n            indices.push(i4);\r\n        }\r\n    }\r\n\r\n    indices = indices.reverse();\r\n\r\n    if (options.orientation && !options.orientation.equals(Vector3.Up())) {\r\n        const m = new Matrix();\r\n        options.orientation\r\n            .clone()\r\n            .scale(Math.PI * 0.5)\r\n            .cross(Vector3.Up())\r\n            .toQuaternion()\r\n            .toRotationMatrix(m);\r\n        const v = Vector3.Zero();\r\n        for (let i = 0; i < vertices.length; i += 3) {\r\n            v.set(vertices[i], vertices[i + 1], vertices[i + 2]);\r\n            Vector3.TransformCoordinatesToRef(v.clone(), m, v);\r\n            vertices[i] = v.x;\r\n            vertices[i + 1] = v.y;\r\n            vertices[i + 2] = v.z;\r\n        }\r\n    }\r\n\r\n    const vDat = new VertexData();\r\n    vDat.positions = vertices;\r\n    vDat.normals = normals;\r\n    vDat.uvs = uvs;\r\n    vDat.indices = indices;\r\n\r\n    return vDat;\r\n}\r\n\r\n/**\r\n * The options Interface for creating a Capsule Mesh\r\n */\r\nexport interface ICreateCapsuleOptions {\r\n    /** The Orientation of the capsule.  Default : Vector3.Up() */\r\n    orientation?: Vector3;\r\n\r\n    /** Number of sub segments on the tube section of the capsule running parallel to orientation. */\r\n    subdivisions?: number;\r\n\r\n    /** Number of cylindrical segments on the capsule. */\r\n    tessellation?: number;\r\n\r\n    /** Height or Length of the capsule. */\r\n    height?: number;\r\n\r\n    /** Radius of the capsule. */\r\n    radius?: number;\r\n\r\n    /** Number of sub segments on the cap sections of the capsule running parallel to orientation. */\r\n    capSubdivisions?: number;\r\n\r\n    /** Overwrite for the top radius. */\r\n    radiusTop?: number;\r\n\r\n    /** Overwrite for the bottom radius. */\r\n    radiusBottom?: number;\r\n\r\n    /** Overwrite for the top capSubdivisions. */\r\n    topCapSubdivisions?: number;\r\n\r\n    /** Overwrite for the bottom capSubdivisions. */\r\n    bottomCapSubdivisions?: number;\r\n\r\n    /** Internal geometry is supposed to change once created. */\r\n    updatable?: boolean;\r\n}\r\n\r\n/**\r\n * Creates a capsule or a pill mesh\r\n * @param name defines the name of the mesh\r\n * @param options The constructors options.\r\n * @param scene The scene the mesh is scoped to.\r\n * @returns Capsule Mesh\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function CreateCapsule(\r\n    name: string,\r\n    options: ICreateCapsuleOptions = {\r\n        orientation: Vector3.Up(),\r\n        subdivisions: 2,\r\n        tessellation: 16,\r\n        height: 1,\r\n        radius: 0.25,\r\n        capSubdivisions: 6,\r\n        updatable: false,\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const capsule = new Mesh(name, scene);\r\n    const vertexData = CreateCapsuleVertexData(options);\r\n    vertexData.applyToMesh(capsule, options.updatable);\r\n    return capsule;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated please use CreateCapsule directly\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const CapsuleBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateCapsule,\r\n};\r\n\r\n/**\r\n * Creates a capsule or a pill mesh\r\n * @param name defines the name of the mesh.\r\n * @param options the constructors options used to shape the mesh.\r\n * @param scene defines the scene the mesh is scoped to.\r\n * @returns the capsule mesh\r\n * @see https://doc.babylonjs.com/how_to/capsule_shape\r\n */\r\nMesh.CreateCapsule = (name: string, options: ICreateCapsuleOptions, scene?: Nullable<Scene>): Mesh => {\r\n    return CreateCapsule(name, options, scene);\r\n};\r\n\r\nVertexData.CreateCapsule = CreateCapsuleVertexData;\r\n", "import { Logger } from \"../Misc/logger\";\r\nimport { Vector3 } from \"./math.vector\";\r\n\r\n/**\r\n * Class representing an isovector a vector containing 2 INTEGER coordinates\r\n * x axis is horizontal\r\n * y axis is 60 deg counter clockwise from positive y axis\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _IsoVector {\r\n    /**\r\n     * Creates a new isovector from the given x and y coordinates\r\n     * @param x defines the first coordinate, must be an integer\r\n     * @param y defines the second coordinate, must be an integer\r\n     */\r\n    constructor(\r\n        /** [0] defines the first coordinate */\r\n        public x: number = 0,\r\n        /** [0] defines the second coordinate */\r\n        public y: number = 0\r\n    ) {\r\n        if (x !== Math.floor(x)) {\r\n            x = Math.floor(x);\r\n            Logger.Warn(\"x is not an integer, floor(x) used\");\r\n        }\r\n        if (y !== Math.floor(y)) {\r\n            y = Math.floor(y);\r\n            Logger.Warn(\"y is not an integer, floor(y) used\");\r\n        }\r\n    }\r\n\r\n    // Operators\r\n\r\n    /**\r\n     * Gets a new IsoVector copied from the IsoVector\r\n     * @returns a new IsoVector\r\n     */\r\n    public clone(): _IsoVector {\r\n        return new _IsoVector(this.x, this.y);\r\n    }\r\n\r\n    /**\r\n     * Rotates one IsoVector 60 degrees counter clockwise about another\r\n     * Please note that this is an in place operation\r\n     * @param other an IsoVector a center of rotation\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotate60About(other: _IsoVector) {\r\n        //other IsoVector\r\n        const x: number = this.x;\r\n        this.x = other.x + other.y - this.y;\r\n        this.y = x + this.y - other.x;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates one IsoVector 60 degrees clockwise about another\r\n     * Please note that this is an in place operation\r\n     * @param other an IsoVector as center of rotation\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotateNeg60About(other: _IsoVector) {\r\n        const x = this.x;\r\n        this.x = x + this.y - other.y;\r\n        this.y = other.x + other.y - x;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * For an equilateral triangle OAB with O at isovector (0, 0) and A at isovector (m, n)\r\n     * Rotates one IsoVector 120 degrees counter clockwise about the center of the triangle\r\n     * Please note that this is an in place operation\r\n     * @param m integer a measure a Primary triangle of order (m, n) m > n\r\n     * @param n >= 0 integer a measure for a Primary triangle of order (m, n)\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotate120(m: number, n: number) {\r\n        //m, n integers\r\n        if (m !== Math.floor(m)) {\r\n            m = Math.floor(m);\r\n            Logger.Warn(\"m not an integer only floor(m) used\");\r\n        }\r\n        if (n !== Math.floor(n)) {\r\n            n = Math.floor(n);\r\n            Logger.Warn(\"n not an integer only floor(n) used\");\r\n        }\r\n        const x = this.x;\r\n        this.x = m - x - this.y;\r\n        this.y = n + x;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * For an equilateral triangle OAB with O at isovector (0, 0) and A at isovector (m, n)\r\n     * Rotates one IsoVector 120 degrees clockwise about the center of the triangle\r\n     * Please note that this is an in place operation\r\n     * @param m integer a measure a Primary triangle of order (m, n) m > n\r\n     * @param n >= 0 integer a measure for a Primary triangle of order (m, n)\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotateNeg120(m: number, n: number) {\r\n        //m, n integers\r\n        if (m !== Math.floor(m)) {\r\n            m = Math.floor(m);\r\n            Logger.Warn(\"m is not an integer, floor(m) used\");\r\n        }\r\n        if (n !== Math.floor(n)) {\r\n            n = Math.floor(n);\r\n            Logger.Warn(\"n is not an integer,   floor(n) used\");\r\n        }\r\n        const x = this.x;\r\n        this.x = this.y - n;\r\n        this.y = m + n - x - this.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Transforms an IsoVector to one in Cartesian 3D space based on an isovector\r\n     * @param origin an IsoVector\r\n     * @param isoGridSize\r\n     * @returns Point as a Vector3\r\n     */\r\n    public toCartesianOrigin(origin: _IsoVector, isoGridSize: number) {\r\n        const point = Vector3.Zero();\r\n        point.x = origin.x + 2 * this.x * isoGridSize + this.y * isoGridSize;\r\n        point.y = origin.y + Math.sqrt(3) * this.y * isoGridSize;\r\n        return point;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Gets a new IsoVector(0, 0)\r\n     * @returns a new IsoVector\r\n     */\r\n    public static Zero(): _IsoVector {\r\n        return new _IsoVector(0, 0);\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Vector3, TmpVectors } from \"../Maths/math.vector\";\r\nimport { HighestCommonFactor } from \"../Maths/math.scalar.functions\";\r\nimport { PHI } from \"../Maths/math.constants\";\r\nimport { _IsoVector } from \"../Maths/math.isovector\";\r\n\r\n/**\r\n * Class representing data for one face OAB of an equilateral icosahedron\r\n * When O is the isovector (0, 0), A is isovector (m, n)\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _PrimaryIsoTriangle {\r\n    //properties\r\n    public m: number;\r\n    public n: number;\r\n    public cartesian: Vector3[] = [];\r\n    public vertices: _IsoVector[] = [];\r\n    public max: number[] = [];\r\n    public min: number[] = [];\r\n    public vecToidx: { [key: string]: number };\r\n    public vertByDist: { [key: string]: number[] };\r\n    public closestTo: number[][] = [];\r\n\r\n    public innerFacets: string[][] = [];\r\n    public isoVecsABOB: _IsoVector[][] = [];\r\n    public isoVecsOBOA: _IsoVector[][] = [];\r\n    public isoVecsBAOA: _IsoVector[][] = [];\r\n    public vertexTypes: number[][] = [];\r\n\r\n    public coau: number;\r\n    public cobu: number;\r\n    public coav: number;\r\n    public cobv: number;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public IDATA: PolyhedronData = new PolyhedronData(\r\n        \"icosahedron\",\r\n        \"Regular\",\r\n        [\r\n            [0, PHI, -1],\r\n            [-PHI, 1, 0],\r\n            [-1, 0, -PHI],\r\n            [1, 0, -PHI],\r\n            [PHI, 1, 0],\r\n            [0, PHI, 1],\r\n            [-1, 0, PHI],\r\n            [-PHI, -1, 0],\r\n            [0, -PHI, -1],\r\n            [PHI, -1, 0],\r\n            [1, 0, PHI],\r\n            [0, -PHI, 1],\r\n        ],\r\n        [\r\n            [0, 2, 1],\r\n            [0, 3, 2],\r\n            [0, 4, 3],\r\n            [0, 5, 4],\r\n            [0, 1, 5],\r\n            [7, 6, 1],\r\n            [8, 7, 2],\r\n            [9, 8, 3],\r\n            [10, 9, 4],\r\n            [6, 10, 5],\r\n            [2, 7, 1],\r\n            [3, 8, 2],\r\n            [4, 9, 3],\r\n            [5, 10, 4],\r\n            [1, 6, 5],\r\n            [11, 6, 7],\r\n            [11, 7, 8],\r\n            [11, 8, 9],\r\n            [11, 9, 10],\r\n            [11, 10, 6],\r\n        ]\r\n    );\r\n\r\n    /**\r\n     * Creates the PrimaryIsoTriangle Triangle OAB\r\n     * @param m an integer\r\n     * @param n an integer\r\n     */\r\n\r\n    //operators\r\n    public setIndices() {\r\n        let indexCount = 12; // 12 vertices already assigned\r\n        const vecToidx: { [key: string]: number } = {}; //maps iso-vectors to indexCount;\r\n        const m = this.m;\r\n        const n = this.n;\r\n        let g = m; // hcf of m, n when n != 0\r\n        let m1 = 1;\r\n        let n1 = 0;\r\n        if (n !== 0) {\r\n            g = HighestCommonFactor(m, n);\r\n        }\r\n        m1 = m / g;\r\n        n1 = n / g;\r\n\r\n        let fr: number | string; //face to the right of current face\r\n        let rot: number | string; //rotation about which vertex for fr\r\n        let O: number;\r\n        let A: number;\r\n        let B: number;\r\n        const oVec: _IsoVector = _IsoVector.Zero();\r\n        const aVec = new _IsoVector(m, n);\r\n        const bVec = new _IsoVector(-n, m + n);\r\n        const oaVec: _IsoVector = _IsoVector.Zero();\r\n        const abVec: _IsoVector = _IsoVector.Zero();\r\n        const obVec: _IsoVector = _IsoVector.Zero();\r\n        let verts: number[] = [];\r\n        let idx: string;\r\n        let idxR: string;\r\n        let isoId: string;\r\n        let isoIdR: string;\r\n\r\n        const closestTo: number[][] = [];\r\n        const vDist = this.vertByDist;\r\n\r\n        const matchIdx = (f: number, fr: number, isoId: string, isoIdR: string) => {\r\n            idx = f + \"|\" + isoId;\r\n            idxR = fr + \"|\" + isoIdR;\r\n            if (!(idx in vecToidx || idxR in vecToidx)) {\r\n                vecToidx[idx] = indexCount;\r\n                vecToidx[idxR] = indexCount;\r\n                indexCount++;\r\n            } else if (idx in vecToidx && !(idxR in vecToidx)) {\r\n                vecToidx[idxR] = vecToidx[idx];\r\n            } else if (idxR in vecToidx && !(idx in vecToidx)) {\r\n                vecToidx[idx] = vecToidx[idxR];\r\n            }\r\n            if (vDist[isoId][0] > 2) {\r\n                closestTo[vecToidx[idx]] = [-vDist[isoId][0], vDist[isoId][1], vecToidx[idx]];\r\n            } else {\r\n                closestTo[vecToidx[idx]] = [verts[vDist[isoId][0]], vDist[isoId][1], vecToidx[idx]];\r\n            }\r\n        };\r\n\r\n        this.IDATA.edgematch = [\r\n            [1, \"B\"],\r\n            [2, \"B\"],\r\n            [3, \"B\"],\r\n            [4, \"B\"],\r\n            [0, \"B\"],\r\n            [10, \"O\", 14, \"A\"],\r\n            [11, \"O\", 10, \"A\"],\r\n            [12, \"O\", 11, \"A\"],\r\n            [13, \"O\", 12, \"A\"],\r\n            [14, \"O\", 13, \"A\"],\r\n            [0, \"O\"],\r\n            [1, \"O\"],\r\n            [2, \"O\"],\r\n            [3, \"O\"],\r\n            [4, \"O\"],\r\n            [19, \"B\", 5, \"A\"],\r\n            [15, \"B\", 6, \"A\"],\r\n            [16, \"B\", 7, \"A\"],\r\n            [17, \"B\", 8, \"A\"],\r\n            [18, \"B\", 9, \"A\"],\r\n        ];\r\n\r\n        /***edges AB to OB***** rotation about B*/\r\n        for (let f = 0; f < 20; f++) {\r\n            //f current face\r\n\r\n            verts = this.IDATA.face[f];\r\n            O = verts[2];\r\n            A = verts[1];\r\n            B = verts[0];\r\n\r\n            isoId = oVec.x + \"|\" + oVec.y;\r\n            idx = f + \"|\" + isoId;\r\n            if (!(idx in vecToidx)) {\r\n                vecToidx[idx] = O;\r\n                closestTo[O] = [verts[vDist[isoId][0]], vDist[isoId][1]];\r\n            }\r\n\r\n            isoId = aVec.x + \"|\" + aVec.y;\r\n            idx = f + \"|\" + isoId;\r\n            if (!(idx in vecToidx)) {\r\n                vecToidx[idx] = A;\r\n                closestTo[A] = [verts[vDist[isoId][0]], vDist[isoId][1]];\r\n            }\r\n\r\n            isoId = bVec.x + \"|\" + bVec.y;\r\n            idx = f + \"|\" + isoId;\r\n            if (!(idx in vecToidx)) {\r\n                vecToidx[idx] = B;\r\n                closestTo[B] = [verts[vDist[isoId][0]], vDist[isoId][1]];\r\n            }\r\n\r\n            //for edge vertices\r\n            fr = <number>this.IDATA.edgematch[f][0];\r\n            rot = <string>this.IDATA.edgematch[f][1];\r\n            if (rot === \"B\") {\r\n                for (let i = 1; i < g; i++) {\r\n                    abVec.x = m - i * (m1 + n1);\r\n                    abVec.y = n + i * m1;\r\n                    obVec.x = -i * n1;\r\n                    obVec.y = i * (m1 + n1);\r\n                    isoId = abVec.x + \"|\" + abVec.y;\r\n                    isoIdR = obVec.x + \"|\" + obVec.y;\r\n                    matchIdx(f, fr, isoId, isoIdR);\r\n                }\r\n            }\r\n\r\n            if (rot === \"O\") {\r\n                for (let i = 1; i < g; i++) {\r\n                    obVec.x = -i * n1;\r\n                    obVec.y = i * (m1 + n1);\r\n                    oaVec.x = i * m1;\r\n                    oaVec.y = i * n1;\r\n                    isoId = obVec.x + \"|\" + obVec.y;\r\n                    isoIdR = oaVec.x + \"|\" + oaVec.y;\r\n                    matchIdx(f, fr, isoId, isoIdR);\r\n                }\r\n            }\r\n\r\n            fr = <number>this.IDATA.edgematch[f][2];\r\n            rot = <string>this.IDATA.edgematch[f][3];\r\n            if (rot && rot === \"A\") {\r\n                for (let i = 1; i < g; i++) {\r\n                    oaVec.x = i * m1;\r\n                    oaVec.y = i * n1;\r\n                    abVec.x = m - (g - i) * (m1 + n1); //reversed for BA\r\n                    abVec.y = n + (g - i) * m1; //reversed for BA\r\n                    isoId = oaVec.x + \"|\" + oaVec.y;\r\n                    isoIdR = abVec.x + \"|\" + abVec.y;\r\n                    matchIdx(f, fr, isoId, isoIdR);\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < this.vertices.length; i++) {\r\n                isoId = this.vertices[i].x + \"|\" + this.vertices[i].y;\r\n                idx = f + \"|\" + isoId;\r\n                if (!(idx in vecToidx)) {\r\n                    vecToidx[idx] = indexCount++;\r\n                    if (vDist[isoId][0] > 2) {\r\n                        closestTo[vecToidx[idx]] = [-vDist[isoId][0], vDist[isoId][1], vecToidx[idx]];\r\n                    } else {\r\n                        closestTo[vecToidx[idx]] = [verts[vDist[isoId][0]], vDist[isoId][1], vecToidx[idx]];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.closestTo = closestTo;\r\n        this.vecToidx = vecToidx;\r\n    }\r\n\r\n    public calcCoeffs() {\r\n        const m = this.m;\r\n        const n = this.n;\r\n        const thirdR3 = Math.sqrt(3) / 3;\r\n\r\n        const LSQD = m * m + n * n + m * n;\r\n\r\n        this.coau = (m + n) / LSQD;\r\n        this.cobu = -n / LSQD;\r\n        this.coav = (-thirdR3 * (m - n)) / LSQD;\r\n        this.cobv = (thirdR3 * (2 * m + n)) / LSQD;\r\n    }\r\n\r\n    public createInnerFacets() {\r\n        const m = this.m;\r\n        const n = this.n;\r\n        for (let y = 0; y < n + m + 1; y++) {\r\n            for (let x = this.min[y]; x < this.max[y] + 1; x++) {\r\n                if (x < this.max[y] && x < this.max[y + 1] + 1) {\r\n                    this.innerFacets.push([\"|\" + x + \"|\" + y, \"|\" + x + \"|\" + (y + 1), \"|\" + (x + 1) + \"|\" + y]);\r\n                }\r\n                if (y > 0 && x < this.max[y - 1] && x + 1 < this.max[y] + 1) {\r\n                    this.innerFacets.push([\"|\" + x + \"|\" + y, \"|\" + (x + 1) + \"|\" + y, \"|\" + (x + 1) + \"|\" + (y - 1)]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public edgeVecsABOB() {\r\n        const m = this.m;\r\n        const n = this.n;\r\n\r\n        const B = new _IsoVector(-n, m + n);\r\n\r\n        for (let y = 1; y < m + n; y++) {\r\n            const point = new _IsoVector(this.min[y], y);\r\n            const prev = new _IsoVector(this.min[y - 1], y - 1);\r\n            const next = new _IsoVector(this.min[y + 1], y + 1);\r\n            const pointR = point.clone();\r\n            const prevR = prev.clone();\r\n            const nextR = next.clone();\r\n\r\n            pointR.rotate60About(B);\r\n            prevR.rotate60About(B);\r\n            nextR.rotate60About(B);\r\n\r\n            const maxPoint = new _IsoVector(this.max[pointR.y], pointR.y);\r\n            const maxPrev = new _IsoVector(this.max[pointR.y - 1], pointR.y - 1);\r\n            const maxLeftPrev = new _IsoVector(this.max[pointR.y - 1] - 1, pointR.y - 1);\r\n\r\n            if (pointR.x !== maxPoint.x || pointR.y !== maxPoint.y) {\r\n                if (pointR.x !== maxPrev.x) {\r\n                    // type2\r\n                    //up\r\n                    this.vertexTypes.push([1, 0, 0]);\r\n                    this.isoVecsABOB.push([point, maxPrev, maxLeftPrev]);\r\n                    //down\r\n                    this.vertexTypes.push([1, 0, 0]);\r\n                    this.isoVecsABOB.push([point, maxLeftPrev, maxPoint]);\r\n                } else if (pointR.y === nextR.y) {\r\n                    // type1\r\n                    //up\r\n                    this.vertexTypes.push([1, 1, 0]);\r\n                    this.isoVecsABOB.push([point, prev, maxPrev]);\r\n                    //down\r\n                    this.vertexTypes.push([1, 0, 1]);\r\n                    this.isoVecsABOB.push([point, maxPrev, next]);\r\n                } else {\r\n                    // type 0\r\n                    //up\r\n                    this.vertexTypes.push([1, 1, 0]);\r\n                    this.isoVecsABOB.push([point, prev, maxPrev]);\r\n                    //down\r\n                    this.vertexTypes.push([1, 0, 0]);\r\n                    this.isoVecsABOB.push([point, maxPrev, maxPoint]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public mapABOBtoOBOA() {\r\n        const point = new _IsoVector(0, 0);\r\n        for (let i = 0; i < this.isoVecsABOB.length; i++) {\r\n            const temp = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                point.x = this.isoVecsABOB[i][j].x;\r\n                point.y = this.isoVecsABOB[i][j].y;\r\n                if (this.vertexTypes[i][j] === 0) {\r\n                    point.rotateNeg120(this.m, this.n);\r\n                }\r\n                temp.push(point.clone());\r\n            }\r\n            this.isoVecsOBOA.push(temp);\r\n        }\r\n    }\r\n\r\n    public mapABOBtoBAOA() {\r\n        const point = new _IsoVector(0, 0);\r\n        for (let i = 0; i < this.isoVecsABOB.length; i++) {\r\n            const temp = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                point.x = this.isoVecsABOB[i][j].x;\r\n                point.y = this.isoVecsABOB[i][j].y;\r\n                if (this.vertexTypes[i][j] === 1) {\r\n                    point.rotate120(this.m, this.n);\r\n                }\r\n                temp.push(point.clone());\r\n            }\r\n            this.isoVecsBAOA.push(temp);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public MapToFace(faceNb: number, geodesicData: PolyhedronData) {\r\n        const F = this.IDATA.face[faceNb];\r\n        const oidx = F[2];\r\n        const aidx = F[1];\r\n        const bidx = F[0];\r\n\r\n        const O = Vector3.FromArray(this.IDATA.vertex[oidx]);\r\n        const A = Vector3.FromArray(this.IDATA.vertex[aidx]);\r\n        const B = Vector3.FromArray(this.IDATA.vertex[bidx]);\r\n\r\n        const OA = A.subtract(O);\r\n        const OB = B.subtract(O);\r\n\r\n        const x: Vector3 = OA.scale(this.coau).add(OB.scale(this.cobu));\r\n        const y: Vector3 = OA.scale(this.coav).add(OB.scale(this.cobv));\r\n\r\n        const mapped = [];\r\n\r\n        let idx: string;\r\n        let tempVec: Vector3 = TmpVectors.Vector3[0];\r\n        for (let i = 0; i < this.cartesian.length; i++) {\r\n            tempVec = x.scale(this.cartesian[i].x).add(y.scale(this.cartesian[i].y)).add(O);\r\n            mapped[i] = [tempVec.x, tempVec.y, tempVec.z];\r\n            idx = faceNb + \"|\" + this.vertices[i].x + \"|\" + this.vertices[i].y;\r\n            geodesicData.vertex[this.vecToidx[idx]] = [tempVec.x, tempVec.y, tempVec.z];\r\n        }\r\n    }\r\n\r\n    //statics\r\n    /**Creates a primary triangle\r\n     * @internal\r\n     */\r\n\r\n    public build(m: number, n: number) {\r\n        const vertices: _IsoVector[] = [];\r\n\r\n        const O: _IsoVector = _IsoVector.Zero();\r\n        const A: _IsoVector = new _IsoVector(m, n);\r\n        const B: _IsoVector = new _IsoVector(-n, m + n);\r\n        vertices.push(O, A, B);\r\n\r\n        //max internal isoceles triangle vertices\r\n        for (let y = n; y < m + 1; y++) {\r\n            for (let x = 0; x < m + 1 - y; x++) {\r\n                vertices.push(new _IsoVector(x, y));\r\n            }\r\n        }\r\n\r\n        //shared vertices along edges when needed\r\n        if (n > 0) {\r\n            const g = HighestCommonFactor(m, n);\r\n            const m1 = m / g;\r\n            const n1 = n / g;\r\n\r\n            for (let i = 1; i < g; i++) {\r\n                vertices.push(new _IsoVector(i * m1, i * n1)); //OA\r\n                vertices.push(new _IsoVector(-i * n1, i * (m1 + n1))); //OB\r\n                vertices.push(new _IsoVector(m - i * (m1 + n1), n + i * m1)); // AB\r\n            }\r\n\r\n            //lower rows vertices and their rotations\r\n            const ratio = m / n;\r\n            for (let y = 1; y < n; y++) {\r\n                for (let x = 0; x < y * ratio; x++) {\r\n                    vertices.push(new _IsoVector(x, y));\r\n                    vertices.push(new _IsoVector(x, y).rotate120(m, n));\r\n                    vertices.push(new _IsoVector(x, y).rotateNeg120(m, n));\r\n                }\r\n            }\r\n        }\r\n        //order vertices by x and then y\r\n        vertices.sort((a, b) => {\r\n            return a.x - b.x;\r\n        });\r\n\r\n        vertices.sort((a, b) => {\r\n            return a.y - b.y;\r\n        });\r\n\r\n        const min = new Array<number>(m + n + 1);\r\n        const max = new Array<number>(m + n + 1);\r\n        for (let i = 0; i < min.length; i++) {\r\n            min[i] = Infinity;\r\n            max[i] = -Infinity;\r\n        }\r\n\r\n        let y: number = 0;\r\n        let x: number = 0;\r\n\r\n        const len: number = vertices.length;\r\n        for (let i = 0; i < len; i++) {\r\n            x = vertices[i].x;\r\n            y = vertices[i].y;\r\n            min[y] = Math.min(x, min[y]);\r\n            max[y] = Math.max(x, max[y]);\r\n        }\r\n\r\n        //calculates the distance of a vertex from a given primary vertex\r\n        const distFrom = (vert: _IsoVector, primVert: string) => {\r\n            const v = vert.clone();\r\n            if (primVert === \"A\") {\r\n                v.rotateNeg120(m, n);\r\n            }\r\n            if (primVert === \"B\") {\r\n                v.rotate120(m, n);\r\n            }\r\n            if (v.x < 0) {\r\n                return v.y;\r\n            }\r\n            return v.x + v.y;\r\n        };\r\n\r\n        const cartesian: Vector3[] = [];\r\n        const distFromO: number[] = [];\r\n        const distFromA: number[] = [];\r\n        const distFromB: number[] = [];\r\n        const vertByDist: { [key: string]: number[] } = {};\r\n        const vertData: number[][] = [];\r\n        let closest: number = -1;\r\n        let dist: number = -1;\r\n        for (let i = 0; i < len; i++) {\r\n            cartesian[i] = vertices[i].toCartesianOrigin(new _IsoVector(0, 0), 0.5);\r\n            distFromO[i] = distFrom(vertices[i], \"O\");\r\n            distFromA[i] = distFrom(vertices[i], \"A\");\r\n            distFromB[i] = distFrom(vertices[i], \"B\");\r\n\r\n            if (distFromO[i] === distFromA[i] && distFromA[i] === distFromB[i]) {\r\n                closest = 3;\r\n                dist = distFromO[i];\r\n            } else if (distFromO[i] === distFromA[i]) {\r\n                closest = 4;\r\n                dist = distFromO[i];\r\n            } else if (distFromA[i] === distFromB[i]) {\r\n                closest = 5;\r\n                dist = distFromA[i];\r\n            } else if (distFromB[i] === distFromO[i]) {\r\n                closest = 6;\r\n                dist = distFromO[i];\r\n            }\r\n            if (distFromO[i] < distFromA[i] && distFromO[i] < distFromB[i]) {\r\n                closest = 2;\r\n                dist = distFromO[i];\r\n            }\r\n            if (distFromA[i] < distFromO[i] && distFromA[i] < distFromB[i]) {\r\n                closest = 1;\r\n                dist = distFromA[i];\r\n            }\r\n            if (distFromB[i] < distFromA[i] && distFromB[i] < distFromO[i]) {\r\n                closest = 0;\r\n                dist = distFromB[i];\r\n            }\r\n            vertData.push([closest, dist, vertices[i].x, vertices[i].y]);\r\n        }\r\n\r\n        vertData.sort((a, b) => {\r\n            return a[2] - b[2];\r\n        });\r\n        vertData.sort((a, b) => {\r\n            return a[3] - b[3];\r\n        });\r\n        vertData.sort((a, b) => {\r\n            return a[1] - b[1];\r\n        });\r\n        vertData.sort((a, b) => {\r\n            return a[0] - b[0];\r\n        });\r\n\r\n        for (let v = 0; v < vertData.length; v++) {\r\n            vertByDist[vertData[v][2] + \"|\" + vertData[v][3]] = [vertData[v][0], vertData[v][1], v];\r\n        }\r\n\r\n        this.m = m;\r\n        this.n = n;\r\n        this.vertices = vertices;\r\n        this.vertByDist = vertByDist;\r\n        this.cartesian = cartesian;\r\n        this.min = min;\r\n        this.max = max;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n/** Builds Polyhedron Data\r\n * @internal\r\n */\r\n\r\nexport class PolyhedronData {\r\n    /**\r\n     * @internal\r\n     */\r\n    public edgematch: (number | string)[][];\r\n\r\n    constructor(\r\n        /**\r\n         * The name of the polyhedron\r\n         */\r\n        public name: string,\r\n        /**\r\n         * The category of the polyhedron\r\n         */\r\n        public category: string,\r\n        /**\r\n         * vertex data\r\n         */\r\n        public vertex: number[][],\r\n        /**\r\n         * face data\r\n         */\r\n        public face: number[][]\r\n    ) {}\r\n}\r\n\r\n/**\r\n * This class Extends the PolyhedronData Class to provide measures for a Geodesic Polyhedron\r\n */\r\nexport class GeodesicData extends PolyhedronData {\r\n    /**\r\n     * @internal\r\n     */\r\n    public override edgematch: (number | string)[][];\r\n    /**\r\n     * @internal\r\n     */\r\n    public adjacentFaces: number[][];\r\n    /**\r\n     * @internal\r\n     */\r\n    public sharedNodes: number;\r\n    /**\r\n     * @internal\r\n     */\r\n    public poleNodes: number;\r\n    /**\r\n     * @internal\r\n     */\r\n    public innerToData(face: number, primTri: _PrimaryIsoTriangle) {\r\n        for (let i = 0; i < primTri.innerFacets.length; i++) {\r\n            this.face.push(primTri.innerFacets[i].map((el) => primTri.vecToidx[face + el]));\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public mapABOBtoDATA(faceNb: number, primTri: _PrimaryIsoTriangle) {\r\n        const fr = primTri.IDATA.edgematch[faceNb][0];\r\n        for (let i = 0; i < primTri.isoVecsABOB.length; i++) {\r\n            const temp = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                if (primTri.vertexTypes[i][j] === 0) {\r\n                    temp.push(faceNb + \"|\" + primTri.isoVecsABOB[i][j].x + \"|\" + primTri.isoVecsABOB[i][j].y);\r\n                } else {\r\n                    temp.push(fr + \"|\" + primTri.isoVecsABOB[i][j].x + \"|\" + primTri.isoVecsABOB[i][j].y);\r\n                }\r\n            }\r\n            this.face.push([primTri.vecToidx[temp[0]], primTri.vecToidx[temp[1]], primTri.vecToidx[temp[2]]]);\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public mapOBOAtoDATA(faceNb: number, primTri: _PrimaryIsoTriangle) {\r\n        const fr = primTri.IDATA.edgematch[faceNb][0];\r\n        for (let i = 0; i < primTri.isoVecsOBOA.length; i++) {\r\n            const temp = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                if (primTri.vertexTypes[i][j] === 1) {\r\n                    temp.push(faceNb + \"|\" + primTri.isoVecsOBOA[i][j].x + \"|\" + primTri.isoVecsOBOA[i][j].y);\r\n                } else {\r\n                    temp.push(fr + \"|\" + primTri.isoVecsOBOA[i][j].x + \"|\" + primTri.isoVecsOBOA[i][j].y);\r\n                }\r\n            }\r\n            this.face.push([primTri.vecToidx[temp[0]], primTri.vecToidx[temp[1]], primTri.vecToidx[temp[2]]]);\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public mapBAOAtoDATA(faceNb: number, primTri: _PrimaryIsoTriangle) {\r\n        const fr = primTri.IDATA.edgematch[faceNb][2];\r\n        for (let i = 0; i < primTri.isoVecsBAOA.length; i++) {\r\n            const temp = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                if (primTri.vertexTypes[i][j] === 1) {\r\n                    temp.push(faceNb + \"|\" + primTri.isoVecsBAOA[i][j].x + \"|\" + primTri.isoVecsBAOA[i][j].y);\r\n                } else {\r\n                    temp.push(fr + \"|\" + primTri.isoVecsBAOA[i][j].x + \"|\" + primTri.isoVecsBAOA[i][j].y);\r\n                }\r\n            }\r\n            this.face.push([primTri.vecToidx[temp[0]], primTri.vecToidx[temp[1]], primTri.vecToidx[temp[2]]]);\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public orderData(primTri: _PrimaryIsoTriangle) {\r\n        const nearTo: number[][][] = [];\r\n        for (let i = 0; i < 13; i++) {\r\n            nearTo[i] = [];\r\n        }\r\n        const close: number[][] = primTri.closestTo;\r\n        for (let i = 0; i < close.length; i++) {\r\n            if (close[i][0] > -1) {\r\n                if (close[i][1] > 0) {\r\n                    nearTo[close[i][0]].push([i, close[i][1]]);\r\n                }\r\n            } else {\r\n                nearTo[12].push([i, close[i][0]]);\r\n            }\r\n        }\r\n\r\n        const near: number[] = [];\r\n        for (let i = 0; i < 12; i++) {\r\n            near[i] = i;\r\n        }\r\n        let nearIndex = 12;\r\n        for (let i = 0; i < 12; i++) {\r\n            nearTo[i].sort((a: number[], b: number[]) => {\r\n                return a[1] - b[1];\r\n            });\r\n            for (let j = 0; j < nearTo[i].length; j++) {\r\n                near[nearTo[i][j][0]] = nearIndex++;\r\n            }\r\n        }\r\n\r\n        for (let j = 0; j < nearTo[12].length; j++) {\r\n            near[nearTo[12][j][0]] = nearIndex++;\r\n        }\r\n\r\n        for (let i = 0; i < this.vertex.length; i++) {\r\n            this.vertex[i].push(near[i]);\r\n        }\r\n\r\n        this.vertex.sort((a, b) => {\r\n            return a[3] - b[3];\r\n        });\r\n\r\n        for (let i = 0; i < this.vertex.length; i++) {\r\n            this.vertex[i].pop();\r\n        }\r\n\r\n        for (let i = 0; i < this.face.length; i++) {\r\n            for (let j = 0; j < this.face[i].length; j++) {\r\n                this.face[i][j] = near[this.face[i][j]];\r\n            }\r\n        }\r\n\r\n        this.sharedNodes = nearTo[12].length;\r\n        this.poleNodes = this.vertex.length - this.sharedNodes;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public setOrder(m: number, faces: number[]) {\r\n        const adjVerts: number[] = [];\r\n        const dualFaces: number[] = [];\r\n        let face: number = <number>faces.pop();\r\n        dualFaces.push(face);\r\n        let index = this.face[face].indexOf(m);\r\n        index = (index + 2) % 3;\r\n        let v = this.face[face][index];\r\n        adjVerts.push(v);\r\n        let f = 0;\r\n        while (faces.length > 0) {\r\n            face = faces[f];\r\n            if (this.face[face].indexOf(v) > -1) {\r\n                // v is a vertex of face f\r\n                index = (this.face[face].indexOf(v) + 1) % 3;\r\n                v = this.face[face][index];\r\n                adjVerts.push(v);\r\n                dualFaces.push(face);\r\n                faces.splice(f, 1);\r\n                f = 0;\r\n            } else {\r\n                f++;\r\n            }\r\n        }\r\n        this.adjacentFaces.push(adjVerts);\r\n        return dualFaces;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public toGoldbergPolyhedronData(): PolyhedronData {\r\n        const goldbergPolyhedronData: PolyhedronData = new PolyhedronData(\"GeoDual\", \"Goldberg\", [], []);\r\n        goldbergPolyhedronData.name = \"GD dual\";\r\n        const verticesNb: number = this.vertex.length;\r\n        const map = new Array(verticesNb);\r\n        for (let v = 0; v < verticesNb; v++) {\r\n            map[v] = [];\r\n        }\r\n        for (let f = 0; f < this.face.length; f++) {\r\n            for (let i = 0; i < 3; i++) {\r\n                map[this.face[f][i]].push(f);\r\n            }\r\n        }\r\n        let cx = 0;\r\n        let cy = 0;\r\n        let cz = 0;\r\n        let face = [];\r\n        let vertex = [];\r\n        this.adjacentFaces = [];\r\n        for (let m = 0; m < map.length; m++) {\r\n            goldbergPolyhedronData.face[m] = this.setOrder(m, map[m].concat([]));\r\n            for (const el of map[m]) {\r\n                cx = 0;\r\n                cy = 0;\r\n                cz = 0;\r\n                face = this.face[el];\r\n                for (let i = 0; i < 3; i++) {\r\n                    vertex = this.vertex[face[i]];\r\n                    cx += vertex[0];\r\n                    cy += vertex[1];\r\n                    cz += vertex[2];\r\n                }\r\n                goldbergPolyhedronData.vertex[el] = [cx / 3, cy / 3, cz / 3];\r\n            }\r\n        }\r\n        return goldbergPolyhedronData;\r\n    }\r\n\r\n    //statics\r\n    /**Builds the data for a Geodesic Polyhedron from a primary triangle\r\n     * @param primTri the primary triangle\r\n     * @internal\r\n     */\r\n\r\n    public static BuildGeodesicData(primTri: _PrimaryIsoTriangle) {\r\n        const geodesicData = new GeodesicData(\r\n            \"Geodesic-m-n\",\r\n            \"Geodesic\",\r\n            [\r\n                [0, PHI, -1],\r\n                [-PHI, 1, 0],\r\n                [-1, 0, -PHI],\r\n                [1, 0, -PHI],\r\n                [PHI, 1, 0],\r\n                [0, PHI, 1],\r\n                [-1, 0, PHI],\r\n                [-PHI, -1, 0],\r\n                [0, -PHI, -1],\r\n                [PHI, -1, 0],\r\n                [1, 0, PHI],\r\n                [0, -PHI, 1],\r\n            ],\r\n            []\r\n        );\r\n\r\n        primTri.setIndices();\r\n        primTri.calcCoeffs();\r\n        primTri.createInnerFacets();\r\n        primTri.edgeVecsABOB();\r\n        primTri.mapABOBtoOBOA();\r\n        primTri.mapABOBtoBAOA();\r\n\r\n        for (let f = 0; f < primTri.IDATA.face.length; f++) {\r\n            primTri.MapToFace(f, geodesicData);\r\n            geodesicData.innerToData(f, primTri);\r\n            if (primTri.IDATA.edgematch[f][1] === \"B\") {\r\n                geodesicData.mapABOBtoDATA(f, primTri);\r\n            }\r\n            if (primTri.IDATA.edgematch[f][1] === \"O\") {\r\n                geodesicData.mapOBOAtoDATA(f, primTri);\r\n            }\r\n            if (primTri.IDATA.edgematch[f][3] === \"A\") {\r\n                geodesicData.mapBAOAtoDATA(f, primTri);\r\n            }\r\n        }\r\n\r\n        geodesicData.orderData(primTri);\r\n        const radius = 1;\r\n        geodesicData.vertex = geodesicData.vertex.map(function (el) {\r\n            const a = el[0];\r\n            const b = el[1];\r\n            const c = el[2];\r\n            const d = Math.sqrt(a * a + b * b + c * c);\r\n            el[0] *= radius / d;\r\n            el[1] *= radius / d;\r\n            el[2] *= radius / d;\r\n            return el;\r\n        });\r\n\r\n        return geodesicData;\r\n    }\r\n}\r\n", "import type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport type { Color4 } from \"../../Maths/math.color\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport { CreatePolyhedron } from \"./polyhedronBuilder\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { _PrimaryIsoTriangle, GeodesicData } from \"../geodesicMesh\";\r\n\r\n/**\r\n * Creates the Mesh for a Geodesic Polyhedron\r\n * @see https://en.wikipedia.org/wiki/Geodesic_polyhedron\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/polyhedra/geodesic_poly\r\n * @param name defines the name of the mesh\r\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n * * m number of horizontal steps along an isogrid\r\n * * n number of angled steps along an isogrid\r\n * * size the size of the Geodesic, optional default 1\r\n * * sizeX allows stretching in the x direction, optional, default size\r\n * * sizeY allows stretching in the y direction, optional, default size\r\n * * sizeZ allows stretching in the z direction, optional, default size\r\n * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n * * flat when true creates a flat shaded mesh, optional, default true\r\n * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param scene defines the hosting scene\r\n * @returns Geodesic mesh\r\n */\r\nexport function CreateGeodesic(\r\n    name: string,\r\n    options: {\r\n        m?: number;\r\n        n?: number;\r\n        size?: number;\r\n        sizeX?: number;\r\n        sizeY?: number;\r\n        sizeZ?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        flat?: boolean;\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    let m: number = options.m || 1;\r\n    if (m !== Math.floor(m)) {\r\n        m = Math.floor(m);\r\n        Logger.Warn(\"m not an integer only floor(m) used\");\r\n    }\r\n    let n: number = options.n || 0;\r\n    if (n !== Math.floor(n)) {\r\n        n = Math.floor(n);\r\n        Logger.Warn(\"n not an integer only floor(n) used\");\r\n    }\r\n    if (n > m) {\r\n        const temp = n;\r\n        n = m;\r\n        m = temp;\r\n        Logger.Warn(\"n > m therefore m and n swapped\");\r\n    }\r\n    const primTri: _PrimaryIsoTriangle = new _PrimaryIsoTriangle();\r\n    primTri.build(m, n);\r\n    const geodesicData = GeodesicData.BuildGeodesicData(primTri);\r\n\r\n    const geoOptions: object = {\r\n        custom: geodesicData,\r\n        size: options.size,\r\n        sizeX: options.sizeX,\r\n        sizeY: options.sizeY,\r\n        sizeZ: options.sizeZ,\r\n        faceUV: options.faceUV,\r\n        faceColors: options.faceColors,\r\n        flat: options.flat,\r\n        updatable: options.updatable,\r\n        sideOrientation: options.sideOrientation,\r\n        frontUVs: options.frontUVs,\r\n        backUVs: options.backUVs,\r\n    };\r\n    const geodesic = CreatePolyhedron(name, geoOptions, scene);\r\n\r\n    return geodesic;\r\n}\r\n", "import type { Scene } from \"../scene\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { FloatArray } from \"../types\";\r\n\r\nMesh._GoldbergMeshParser = (parsedMesh: any, scene: Scene): GoldbergMesh => {\r\n    return GoldbergMesh.Parse(parsedMesh, scene);\r\n};\r\n\r\n/**\r\n * Defines the set of goldberg data used to create the polygon\r\n */\r\nexport type GoldbergData = {\r\n    /**\r\n     * The list of Goldberg faces colors\r\n     */\r\n    faceColors: Color4[];\r\n    /**\r\n     * The list of Goldberg faces centers\r\n     */\r\n    faceCenters: Vector3[];\r\n    /**\r\n     * The list of Goldberg faces Z axis\r\n     */\r\n    faceZaxis: Vector3[];\r\n    /**\r\n     * The list of Goldberg faces Y axis\r\n     */\r\n    faceXaxis: Vector3[];\r\n    /**\r\n     * The list of Goldberg faces X axis\r\n     */\r\n    faceYaxis: Vector3[];\r\n    /**\r\n     * Defines the number of shared faces\r\n     */\r\n    nbSharedFaces: number;\r\n    /**\r\n     * Defines the number of unshared faces\r\n     */\r\n    nbUnsharedFaces: number;\r\n    /**\r\n     * Defines the total number of goldberg faces\r\n     */\r\n    nbFaces: number;\r\n    /**\r\n     * Defines the number of goldberg faces at the pole\r\n     */\r\n    nbFacesAtPole: number;\r\n    /**\r\n     * Defines the number of adjacent faces per goldberg faces\r\n     */\r\n    adjacentFaces: number[][];\r\n};\r\n\r\n/**\r\n * Mesh for a Goldberg Polyhedron which is made from 12 pentagonal and the rest hexagonal faces\r\n * @see https://en.wikipedia.org/wiki/Goldberg_polyhedron\r\n */\r\nexport class GoldbergMesh extends Mesh {\r\n    /**\r\n     * Defines the specific Goldberg data used in this mesh construction.\r\n     */\r\n    public goldbergData: GoldbergData = {\r\n        faceColors: [],\r\n        faceCenters: [],\r\n        faceZaxis: [],\r\n        faceXaxis: [],\r\n        faceYaxis: [],\r\n        nbSharedFaces: 0,\r\n        nbUnsharedFaces: 0,\r\n        nbFaces: 0,\r\n        nbFacesAtPole: 0,\r\n        adjacentFaces: [],\r\n    };\r\n\r\n    /**\r\n     * Gets the related Goldberg face from pole infos\r\n     * @param poleOrShared Defines the pole index or the shared face index if the fromPole parameter is passed in\r\n     * @param fromPole Defines an optional pole index to find the related info from\r\n     * @returns the goldberg face number\r\n     */\r\n    public relatedGoldbergFace(poleOrShared: number, fromPole?: number): number {\r\n        if (fromPole === void 0) {\r\n            if (poleOrShared > this.goldbergData.nbUnsharedFaces - 1) {\r\n                Logger.Warn(\"Maximum number of unshared faces used\");\r\n                poleOrShared = this.goldbergData.nbUnsharedFaces - 1;\r\n            }\r\n            return this.goldbergData.nbUnsharedFaces + poleOrShared;\r\n        }\r\n        if (poleOrShared > 11) {\r\n            Logger.Warn(\"Last pole used\");\r\n            poleOrShared = 11;\r\n        }\r\n        if (fromPole > this.goldbergData.nbFacesAtPole - 1) {\r\n            Logger.Warn(\"Maximum number of faces at a pole used\");\r\n            fromPole = this.goldbergData.nbFacesAtPole - 1;\r\n        }\r\n\r\n        return 12 + poleOrShared * this.goldbergData.nbFacesAtPole + fromPole;\r\n    }\r\n\r\n    private _changeGoldbergFaceColors(colorRange: (number | Color4)[][]): number[] {\r\n        for (let i = 0; i < colorRange.length; i++) {\r\n            const min: number = <number>colorRange[i][0];\r\n            const max: number = <number>colorRange[i][1];\r\n            const col: Color4 = <Color4>colorRange[i][2];\r\n            for (let f = min; f < max + 1; f++) {\r\n                this.goldbergData.faceColors[f] = col;\r\n            }\r\n        }\r\n\r\n        const newCols: number[] = [];\r\n        for (let f = 0; f < 12; f++) {\r\n            for (let i = 0; i < 5; i++) {\r\n                newCols.push(this.goldbergData.faceColors[f].r, this.goldbergData.faceColors[f].g, this.goldbergData.faceColors[f].b, this.goldbergData.faceColors[f].a);\r\n            }\r\n        }\r\n        for (let f = 12; f < this.goldbergData.faceColors.length; f++) {\r\n            for (let i = 0; i < 6; i++) {\r\n                newCols.push(this.goldbergData.faceColors[f].r, this.goldbergData.faceColors[f].g, this.goldbergData.faceColors[f].b, this.goldbergData.faceColors[f].a);\r\n            }\r\n        }\r\n        return newCols;\r\n    }\r\n\r\n    /**\r\n     * Set new goldberg face colors\r\n     * @param colorRange the new color to apply to the mesh\r\n     */\r\n    public setGoldbergFaceColors(colorRange: (number | Color4)[][]) {\r\n        const newCols = this._changeGoldbergFaceColors(colorRange);\r\n        this.setVerticesData(VertexBuffer.ColorKind, newCols);\r\n    }\r\n\r\n    /**\r\n     * Updates new goldberg face colors\r\n     * @param colorRange the new color to apply to the mesh\r\n     */\r\n    public updateGoldbergFaceColors(colorRange: (number | Color4)[][]) {\r\n        const newCols = this._changeGoldbergFaceColors(colorRange);\r\n        this.updateVerticesData(VertexBuffer.ColorKind, newCols);\r\n    }\r\n\r\n    private _changeGoldbergFaceUVs(uvRange: (number | Vector2)[][]): FloatArray {\r\n        const uvs: FloatArray = this.getVerticesData(VertexBuffer.UVKind)!;\r\n        for (let i = 0; i < uvRange.length; i++) {\r\n            const min: number = <number>uvRange[i][0];\r\n            const max: number = <number>uvRange[i][1];\r\n            const center: Vector2 = <Vector2>uvRange[i][2];\r\n            const radius: number = <number>uvRange[i][3];\r\n            const angle: number = <number>uvRange[i][4];\r\n            const points5: number[] = [];\r\n            const points6: number[] = [];\r\n            let u: number;\r\n            let v: number;\r\n            for (let p = 0; p < 5; p++) {\r\n                u = center.x + radius * Math.cos(angle + (p * Math.PI) / 2.5);\r\n                v = center.y + radius * Math.sin(angle + (p * Math.PI) / 2.5);\r\n                if (u < 0) {\r\n                    u = 0;\r\n                }\r\n                if (u > 1) {\r\n                    u = 1;\r\n                }\r\n                points5.push(u, v);\r\n            }\r\n            for (let p = 0; p < 6; p++) {\r\n                u = center.x + radius * Math.cos(angle + (p * Math.PI) / 3);\r\n                v = center.y + radius * Math.sin(angle + (p * Math.PI) / 3);\r\n                if (u < 0) {\r\n                    u = 0;\r\n                }\r\n                if (u > 1) {\r\n                    u = 1;\r\n                }\r\n                points6.push(u, v);\r\n            }\r\n            for (let f = min; f < Math.min(12, max + 1); f++) {\r\n                for (let p = 0; p < 5; p++) {\r\n                    uvs[10 * f + 2 * p] = points5[2 * p];\r\n                    uvs[10 * f + 2 * p + 1] = points5[2 * p + 1];\r\n                }\r\n            }\r\n            for (let f = Math.max(12, min); f < max + 1; f++) {\r\n                for (let p = 0; p < 6; p++) {\r\n                    //120 + 12 * (f - 12) = 12 * f - 24\r\n                    uvs[12 * f - 24 + 2 * p] = points6[2 * p];\r\n                    uvs[12 * f - 23 + 2 * p] = points6[2 * p + 1];\r\n                }\r\n            }\r\n        }\r\n        return uvs;\r\n    }\r\n\r\n    /**\r\n     * set new goldberg face UVs\r\n     * @param uvRange the new UVs to apply to the mesh\r\n     */\r\n    public setGoldbergFaceUVs(uvRange: (number | Vector2)[][]) {\r\n        const newUVs: FloatArray = this._changeGoldbergFaceUVs(uvRange);\r\n        this.setVerticesData(VertexBuffer.UVKind, newUVs);\r\n    }\r\n\r\n    /**\r\n     * Updates new goldberg face UVs\r\n     * @param uvRange the new UVs to apply to the mesh\r\n     */\r\n    public updateGoldbergFaceUVs(uvRange: (number | Vector2)[][]) {\r\n        const newUVs = this._changeGoldbergFaceUVs(uvRange);\r\n        this.updateVerticesData(VertexBuffer.UVKind, newUVs);\r\n    }\r\n\r\n    /**\r\n     * Places a mesh on a particular face of the goldberg polygon\r\n     * @param mesh Defines the mesh to position\r\n     * @param face Defines the face to position onto\r\n     * @param position Defines the position relative to the face we are positioning the mesh onto\r\n     */\r\n    public placeOnGoldbergFaceAt(mesh: Mesh, face: number, position: Vector3) {\r\n        const orientation = Vector3.RotationFromAxis(this.goldbergData.faceXaxis[face], this.goldbergData.faceYaxis[face], this.goldbergData.faceZaxis[face]);\r\n        mesh.rotation = orientation;\r\n        mesh.position = this.goldbergData.faceCenters[face]\r\n            .add(this.goldbergData.faceXaxis[face].scale(position.x))\r\n            .add(this.goldbergData.faceYaxis[face].scale(position.y))\r\n            .add(this.goldbergData.faceZaxis[face].scale(position.z));\r\n    }\r\n\r\n    /**\r\n     * Serialize current mesh\r\n     * @param serializationObject defines the object which will receive the serialization data\r\n     */\r\n    public override serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.type = \"GoldbergMesh\";\r\n\r\n        const goldbergData: any = {};\r\n        goldbergData.adjacentFaces = this.goldbergData.adjacentFaces;\r\n        goldbergData.nbSharedFaces = this.goldbergData.nbSharedFaces;\r\n        goldbergData.nbUnsharedFaces = this.goldbergData.nbUnsharedFaces;\r\n        goldbergData.nbFaces = this.goldbergData.nbFaces;\r\n        goldbergData.nbFacesAtPole = this.goldbergData.nbFacesAtPole;\r\n\r\n        if (this.goldbergData.faceColors) {\r\n            goldbergData.faceColors = [];\r\n            for (const color of this.goldbergData.faceColors) {\r\n                goldbergData.faceColors.push(color.asArray());\r\n            }\r\n        }\r\n        if (this.goldbergData.faceCenters) {\r\n            goldbergData.faceCenters = [];\r\n            for (const vector of this.goldbergData.faceCenters) {\r\n                goldbergData.faceCenters.push(vector.asArray());\r\n            }\r\n        }\r\n        if (this.goldbergData.faceZaxis) {\r\n            goldbergData.faceZaxis = [];\r\n            for (const vector of this.goldbergData.faceZaxis) {\r\n                goldbergData.faceZaxis.push(vector.asArray());\r\n            }\r\n        }\r\n        if (this.goldbergData.faceYaxis) {\r\n            goldbergData.faceYaxis = [];\r\n            for (const vector of this.goldbergData.faceYaxis) {\r\n                goldbergData.faceYaxis.push(vector.asArray());\r\n            }\r\n        }\r\n        if (this.goldbergData.faceXaxis) {\r\n            goldbergData.faceXaxis = [];\r\n            for (const vector of this.goldbergData.faceXaxis) {\r\n                goldbergData.faceXaxis.push(vector.asArray());\r\n            }\r\n        }\r\n\r\n        serializationObject.goldbergData = goldbergData;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized goldberg mesh\r\n     * @param parsedMesh the serialized mesh\r\n     * @param scene the scene to create the goldberg mesh in\r\n     * @returns the created goldberg mesh\r\n     */\r\n    public static override Parse(parsedMesh: any, scene: Scene): GoldbergMesh {\r\n        const goldbergData = parsedMesh.goldbergData;\r\n        goldbergData.faceColors = goldbergData.faceColors.map((el: number[]) => Color4.FromArray(el));\r\n        goldbergData.faceCenters = goldbergData.faceCenters.map((el: number[]) => Vector3.FromArray(el));\r\n        goldbergData.faceZaxis = goldbergData.faceZaxis.map((el: number[]) => Vector3.FromArray(el));\r\n        goldbergData.faceXaxis = goldbergData.faceXaxis.map((el: number[]) => Vector3.FromArray(el));\r\n        goldbergData.faceYaxis = goldbergData.faceYaxis.map((el: number[]) => Vector3.FromArray(el));\r\n\r\n        const goldberg = new GoldbergMesh(parsedMesh.name, scene);\r\n        goldberg.goldbergData = goldbergData;\r\n\r\n        return goldberg;\r\n    }\r\n}\r\n", "import type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { PolyhedronData } from \"../geodesicMesh\";\r\nimport { _PrimaryIsoTriangle, GeodesicData } from \"../geodesicMesh\";\r\nimport { GoldbergMesh } from \"../goldbergMesh\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Defines the set of data required to create goldberg vertex data.\r\n */\r\nexport type GoldbergVertexDataOption = {\r\n    /**\r\n     * the size of the Goldberg, optional default 1\r\n     */\r\n    size?: number;\r\n    /**\r\n     * allows stretching in the x direction, optional, default size\r\n     */\r\n    sizeX?: number;\r\n    /**\r\n     * allows stretching in the y direction, optional, default size\r\n     */\r\n    sizeY?: number;\r\n    /**\r\n     * allows stretching in the z direction, optional, default size\r\n     */\r\n    sizeZ?: number;\r\n    /**\r\n     * optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     */\r\n    sideOrientation?: number;\r\n};\r\n\r\n/**\r\n * Defines the set of data required to create a goldberg mesh.\r\n */\r\nexport type GoldbergCreationOption = {\r\n    /**\r\n     * number of horizontal steps along an isogrid\r\n     */\r\n    m?: number;\r\n    /**\r\n     * number of angled steps along an isogrid\r\n     */\r\n    n?: number;\r\n    /**\r\n     * defines if the mesh must be flagged as updatable\r\n     */\r\n    updatable?: boolean;\r\n} & GoldbergVertexDataOption;\r\n\r\n/**\r\n * Creates the Mesh for a Goldberg Polyhedron\r\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n * @param goldbergData polyhedronData defining the Goldberg polyhedron\r\n * @returns GoldbergSphere mesh\r\n */\r\nexport function CreateGoldbergVertexData(options: GoldbergVertexDataOption, goldbergData: PolyhedronData): VertexData {\r\n    const size = options.size;\r\n    const sizeX: number = options.sizeX || size || 1;\r\n    const sizeY: number = options.sizeY || size || 1;\r\n    const sizeZ: number = options.sizeZ || size || 1;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    const positions: number[] = [];\r\n    const indices: number[] = [];\r\n    const normals: number[] = [];\r\n    const uvs: number[] = [];\r\n\r\n    let minX = Infinity;\r\n    let maxX = -Infinity;\r\n    let minY = Infinity;\r\n    let maxY = -Infinity;\r\n\r\n    for (let v = 0; v < goldbergData.vertex.length; v++) {\r\n        minX = Math.min(minX, goldbergData.vertex[v][0] * sizeX);\r\n        maxX = Math.max(maxX, goldbergData.vertex[v][0] * sizeX);\r\n        minY = Math.min(minY, goldbergData.vertex[v][1] * sizeY);\r\n        maxY = Math.max(maxY, goldbergData.vertex[v][1] * sizeY);\r\n    }\r\n\r\n    let index: number = 0;\r\n    for (let f = 0; f < goldbergData.face.length; f++) {\r\n        const verts = goldbergData.face[f];\r\n        const a = Vector3.FromArray(goldbergData.vertex[verts[0]]);\r\n        const b = Vector3.FromArray(goldbergData.vertex[verts[2]]);\r\n        const c = Vector3.FromArray(goldbergData.vertex[verts[1]]);\r\n        const ba = b.subtract(a);\r\n        const ca = c.subtract(a);\r\n        const norm = Vector3.Cross(ca, ba).normalize();\r\n        for (let v = 0; v < verts.length; v++) {\r\n            normals.push(norm.x, norm.y, norm.z);\r\n            const pdata = goldbergData.vertex[verts[v]];\r\n            positions.push(pdata[0] * sizeX, pdata[1] * sizeY, pdata[2] * sizeZ);\r\n            const vCoord = (pdata[1] * sizeY - minY) / (maxY - minY);\r\n            uvs.push((pdata[0] * sizeX - minX) / (maxX - minX), useOpenGLOrientationForUV ? 1 - vCoord : vCoord);\r\n        }\r\n        for (let v = 0; v < verts.length - 2; v++) {\r\n            indices.push(index, index + v + 2, index + v + 1);\r\n        }\r\n        index += verts.length;\r\n    }\r\n\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs);\r\n\r\n    const vertexData = new VertexData();\r\n    vertexData.positions = positions;\r\n    vertexData.indices = indices;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates the Mesh for a Goldberg Polyhedron which is made from 12 pentagonal and the rest hexagonal faces\r\n * @see https://en.wikipedia.org/wiki/Goldberg_polyhedron\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/polyhedra/goldberg_poly\r\n * @param name defines the name of the mesh\r\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n * @param scene defines the hosting scene\r\n * @returns Goldberg mesh\r\n */\r\nexport function CreateGoldberg(name: string, options: GoldbergCreationOption, scene: Nullable<Scene> = null): GoldbergMesh {\r\n    const size = options.size;\r\n    const sizeX: number = options.sizeX || size || 1;\r\n    const sizeY: number = options.sizeY || size || 1;\r\n    const sizeZ: number = options.sizeZ || size || 1;\r\n    let m: number = options.m || 1;\r\n    if (m !== Math.floor(m)) {\r\n        m = Math.floor(m);\r\n        Logger.Warn(\"m not an integer only floor(m) used\");\r\n    }\r\n    let n: number = options.n || 0;\r\n    if (n !== Math.floor(n)) {\r\n        n = Math.floor(n);\r\n        Logger.Warn(\"n not an integer only floor(n) used\");\r\n    }\r\n    if (n > m) {\r\n        const temp = n;\r\n        n = m;\r\n        m = temp;\r\n        Logger.Warn(\"n > m therefore m and n swapped\");\r\n    }\r\n    const primTri: _PrimaryIsoTriangle = new _PrimaryIsoTriangle();\r\n    primTri.build(m, n);\r\n    const geodesicData = GeodesicData.BuildGeodesicData(primTri);\r\n    const goldbergData = geodesicData.toGoldbergPolyhedronData();\r\n\r\n    const goldberg = new GoldbergMesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    goldberg._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateGoldbergVertexData(options, goldbergData);\r\n\r\n    vertexData.applyToMesh(goldberg, options.updatable);\r\n\r\n    goldberg.goldbergData.nbSharedFaces = geodesicData.sharedNodes;\r\n    goldberg.goldbergData.nbUnsharedFaces = geodesicData.poleNodes;\r\n    goldberg.goldbergData.adjacentFaces = geodesicData.adjacentFaces;\r\n    goldberg.goldbergData.nbFaces = goldberg.goldbergData.nbSharedFaces + goldberg.goldbergData.nbUnsharedFaces;\r\n    goldberg.goldbergData.nbFacesAtPole = (goldberg.goldbergData.nbUnsharedFaces - 12) / 12;\r\n    for (let f = 0; f < geodesicData.vertex.length; f++) {\r\n        goldberg.goldbergData.faceCenters.push(Vector3.FromArray(geodesicData.vertex[f]));\r\n        goldberg.goldbergData.faceCenters[f].x *= sizeX;\r\n        goldberg.goldbergData.faceCenters[f].y *= sizeY;\r\n        goldberg.goldbergData.faceCenters[f].z *= sizeZ;\r\n        goldberg.goldbergData.faceColors.push(new Color4(1, 1, 1, 1));\r\n    }\r\n\r\n    for (let f = 0; f < goldbergData.face.length; f++) {\r\n        const verts = goldbergData.face[f];\r\n        const a = Vector3.FromArray(goldbergData.vertex[verts[0]]);\r\n        const b = Vector3.FromArray(goldbergData.vertex[verts[2]]);\r\n        const c = Vector3.FromArray(goldbergData.vertex[verts[1]]);\r\n        const ba = b.subtract(a);\r\n        const ca = c.subtract(a);\r\n        const norm = Vector3.Cross(ca, ba).normalize();\r\n        const z = Vector3.Cross(ca, norm).normalize();\r\n        goldberg.goldbergData.faceXaxis.push(ca.normalize());\r\n        goldberg.goldbergData.faceYaxis.push(norm);\r\n        goldberg.goldbergData.faceZaxis.push(z);\r\n    }\r\n\r\n    return goldberg;\r\n}\r\n", "import type { Color4 } from \"../../Maths/math.color\";\r\nimport { Path2 } from \"../../Maths/math.path\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { TransformNode } from \"../transformNode\";\r\nimport { ExtrudePolygon } from \"./polygonBuilder\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let earcut: any;\r\n\r\n/**\r\n * Parser inspired by https://github.com/mrdoob/three.js/blob/master/examples/jsm/loaders/FontLoader.js\r\n */\r\n\r\n// Interfaces\r\n\r\n/**\r\n * Represents glyph data generated by http://gero3.github.io/facetype.js/\r\n */\r\nexport interface IGlyphData {\r\n    /** Commands used to draw (line, move, curve, etc..) */\r\n    o: string;\r\n\r\n    /** Width */\r\n    ha: number;\r\n}\r\n\r\n/**\r\n * Represents font data generated by http://gero3.github.io/facetype.js/\r\n */\r\nexport interface IFontData {\r\n    /**\r\n     * Font resolution\r\n     */\r\n    resolution: number;\r\n    /** Underline tickness */\r\n    underlineThickness: number;\r\n    /** Bounding box */\r\n    boundingBox: {\r\n        yMax: number;\r\n        yMin: number;\r\n    };\r\n    /** List of supported glyphs */\r\n    glyphs: { [key: string]: IGlyphData };\r\n}\r\n\r\n// Shape functions\r\nclass ShapePath {\r\n    private _paths: Path2[] = [];\r\n    private _tempPaths: Path2[] = [];\r\n    private _holes: Path2[] = [];\r\n    private _currentPath: Path2;\r\n    private _resolution: number;\r\n\r\n    /** Create the ShapePath used to support glyphs\r\n     * @param resolution defines the resolution used to determine the number of points per curve (default is 4)\r\n     */\r\n    constructor(resolution: number) {\r\n        this._resolution = resolution;\r\n    }\r\n\r\n    /** Move the virtual cursor to a coordinate\r\n     * @param x defines the x coordinate\r\n     * @param y defines the y coordinate\r\n     */\r\n    moveTo(x: number, y: number) {\r\n        this._currentPath = new Path2(x, y);\r\n        this._tempPaths.push(this._currentPath);\r\n    }\r\n\r\n    /** Draw a line from the virtual cursor to a given coordinate\r\n     * @param x defines the x coordinate\r\n     * @param y defines the y coordinate\r\n     */\r\n    lineTo(x: number, y: number) {\r\n        this._currentPath.addLineTo(x, y);\r\n    }\r\n\r\n    /** Create a quadratic curve from the virtual cursor to a given coordinate\r\n     * @param cpx defines the x coordinate of the control point\r\n     * @param cpy defines the y coordinate of the control point\r\n     * @param x defines the x coordinate of the end point\r\n     * @param y defines the y coordinate of the end point\r\n     */\r\n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number) {\r\n        this._currentPath.addQuadraticCurveTo(cpx, cpy, x, y, this._resolution);\r\n    }\r\n\r\n    /**\r\n     * Create a bezier curve from the virtual cursor to a given coordinate\r\n     * @param cpx1 defines the x coordinate of the first control point\r\n     * @param cpy1 defines the y coordinate of the first control point\r\n     * @param cpx2 defines the x coordinate of the second control point\r\n     * @param cpy2 defines the y coordinate of the second control point\r\n     * @param x defines the x coordinate of the end point\r\n     * @param y defines the y coordinate of the end point\r\n     */\r\n    bezierCurveTo(cpx1: number, cpy1: number, cpx2: number, cpy2: number, x: number, y: number) {\r\n        this._currentPath.addBezierCurveTo(cpx1, cpy1, cpx2, cpy2, x, y, this._resolution);\r\n    }\r\n\r\n    /** Extract holes based on CW / CCW */\r\n    extractHoles() {\r\n        for (const path of this._tempPaths) {\r\n            if (path.area() > 0) {\r\n                this._holes.push(path);\r\n            } else {\r\n                this._paths.push(path);\r\n            }\r\n        }\r\n\r\n        if (!this._paths.length && this._holes.length) {\r\n            const temp = this._holes;\r\n            this._holes = this._paths;\r\n            this._paths = temp;\r\n        }\r\n\r\n        this._tempPaths.length = 0;\r\n    }\r\n\r\n    /** Gets the list of paths */\r\n    get paths() {\r\n        return this._paths;\r\n    }\r\n\r\n    /** Gets the list of holes */\r\n    get holes() {\r\n        return this._holes;\r\n    }\r\n}\r\n\r\n// Utility functions\r\nfunction CreateShapePath(\r\n    char: string,\r\n    scale: number,\r\n    offsetX: number,\r\n    offsetY: number,\r\n    resolution: number,\r\n    fontData: IFontData\r\n): Nullable<{\r\n    offsetX: number;\r\n    shapePath: ShapePath;\r\n}> {\r\n    const glyph = fontData.glyphs[char] || fontData.glyphs[\"?\"];\r\n\r\n    if (!glyph) {\r\n        // return if there is no glyph data\r\n        return null;\r\n    }\r\n\r\n    const shapePath = new ShapePath(resolution);\r\n\r\n    if (glyph.o) {\r\n        const outline = glyph.o.split(\" \");\r\n\r\n        for (let i = 0, l = outline.length; i < l; ) {\r\n            const action = outline[i++];\r\n\r\n            switch (action) {\r\n                case \"m\": {\r\n                    // moveTo\r\n                    const x = parseInt(outline[i++]) * scale + offsetX;\r\n                    const y = parseInt(outline[i++]) * scale + offsetY;\r\n\r\n                    shapePath.moveTo(x, y);\r\n                    break;\r\n                }\r\n                case \"l\": {\r\n                    // lineTo\r\n                    const x = parseInt(outline[i++]) * scale + offsetX;\r\n                    const y = parseInt(outline[i++]) * scale + offsetY;\r\n\r\n                    shapePath.lineTo(x, y);\r\n                    break;\r\n                }\r\n                case \"q\": {\r\n                    // quadraticCurveTo\r\n                    const cpx = parseInt(outline[i++]) * scale + offsetX;\r\n                    const cpy = parseInt(outline[i++]) * scale + offsetY;\r\n                    const cpx1 = parseInt(outline[i++]) * scale + offsetX;\r\n                    const cpy1 = parseInt(outline[i++]) * scale + offsetY;\r\n\r\n                    shapePath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\r\n                    break;\r\n                }\r\n                case \"b\": {\r\n                    // bezierCurveTo\r\n                    const cpx = parseInt(outline[i++]) * scale + offsetX;\r\n                    const cpy = parseInt(outline[i++]) * scale + offsetY;\r\n                    const cpx1 = parseInt(outline[i++]) * scale + offsetX;\r\n                    const cpy1 = parseInt(outline[i++]) * scale + offsetY;\r\n                    const cpx2 = parseInt(outline[i++]) * scale + offsetX;\r\n                    const cpy2 = parseInt(outline[i++]) * scale + offsetY;\r\n\r\n                    shapePath.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Extract holes (based on clockwise data)\r\n    shapePath.extractHoles();\r\n\r\n    return { offsetX: glyph.ha * scale, shapePath: shapePath };\r\n}\r\n\r\n/**\r\n * Creates shape paths from a text and font\r\n * @param text the text\r\n * @param size size of the font\r\n * @param resolution resolution of the font\r\n * @param fontData defines the font data (can be generated with http://gero3.github.io/facetype.js/)\r\n * @returns array of ShapePath objects\r\n */\r\nexport function CreateTextShapePaths(text: string, size: number, resolution: number, fontData: IFontData) {\r\n    const chars = Array.from(text);\r\n    const scale = size / fontData.resolution;\r\n    const lineHeight = (fontData.boundingBox.yMax - fontData.boundingBox.yMin + fontData.underlineThickness) * scale;\r\n\r\n    const shapePaths: ShapePath[] = [];\r\n\r\n    let offsetX = 0,\r\n        offsetY = 0;\r\n\r\n    for (let i = 0; i < chars.length; i++) {\r\n        const char = chars[i];\r\n\r\n        if (char === \"\\n\") {\r\n            offsetX = 0;\r\n            offsetY -= lineHeight;\r\n        } else {\r\n            const ret = CreateShapePath(char, scale, offsetX, offsetY, resolution, fontData);\r\n\r\n            if (ret) {\r\n                offsetX += ret.offsetX;\r\n                shapePaths.push(ret.shapePath);\r\n            }\r\n        }\r\n    }\r\n\r\n    return shapePaths;\r\n}\r\n\r\n/**\r\n * Create a text mesh\r\n * @param name defines the name of the mesh\r\n * @param text defines the text to use to build the mesh\r\n * @param fontData defines the font data (can be generated with http://gero3.github.io/facetype.js/)\r\n * @param options defines options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @param earcutInjection can be used to inject your own earcut reference\r\n * @returns a new Mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set/text\r\n */\r\nexport function CreateText(\r\n    name: string,\r\n    text: string,\r\n    fontData: IFontData,\r\n    options: {\r\n        size?: number;\r\n        resolution?: number;\r\n        depth?: number;\r\n        sideOrientation?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        perLetterFaceUV?: (letterIndex: number) => Vector4[];\r\n        perLetterFaceColors?: (letterIndex: number) => Color4[];\r\n    } = {\r\n        size: 50,\r\n        resolution: 8,\r\n        depth: 1.0,\r\n    },\r\n    scene: Nullable<Scene> = null,\r\n    earcutInjection = earcut\r\n): Nullable<Mesh> {\r\n    // First we need to generate the paths\r\n    const shapePaths = CreateTextShapePaths(text, options.size || 50, options.resolution || 8, fontData);\r\n\r\n    // And extrude them\r\n    const meshes: Mesh[] = [];\r\n    let letterIndex = 0;\r\n    for (const shapePath of shapePaths) {\r\n        if (!shapePath.paths.length) {\r\n            continue;\r\n        }\r\n\r\n        const holes = shapePath.holes.slice(); // Copy it as we will update the copy\r\n        for (const path of shapePath.paths) {\r\n            const holeVectors: Vector3[][] = [];\r\n            const shapeVectors: Vector3[] = [];\r\n            const points = path.getPoints();\r\n            for (const point of points) {\r\n                shapeVectors.push(new Vector3(point.x, 0, point.y)); // ExtrudePolygon expects data on the xz plane\r\n            }\r\n\r\n            // Holes\r\n            const localHolesCopy = holes.slice();\r\n            for (const hole of localHolesCopy) {\r\n                const points = hole.getPoints();\r\n\r\n                let found = false;\r\n                for (const point of points) {\r\n                    if (path.isPointInside(point)) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!found) {\r\n                    continue;\r\n                }\r\n\r\n                const holePoints: Vector3[] = [];\r\n                for (const point of points) {\r\n                    holePoints.push(new Vector3(point.x, 0, point.y)); // ExtrudePolygon expects data on the xz plane\r\n                }\r\n                holeVectors.push(holePoints);\r\n\r\n                // Remove the hole as it was already used\r\n                holes.splice(holes.indexOf(hole), 1);\r\n            }\r\n\r\n            // There is at least a hole but it was unaffected\r\n            if (!holeVectors.length && holes.length) {\r\n                for (const hole of holes) {\r\n                    const points = hole.getPoints();\r\n                    const holePoints: Vector3[] = [];\r\n                    for (const point of points) {\r\n                        holePoints.push(new Vector3(point.x, 0, point.y)); // ExtrudePolygon expects data on the xz plane\r\n                    }\r\n                    holeVectors.push(holePoints);\r\n                }\r\n            }\r\n\r\n            // Extrusion!\r\n            const mesh = ExtrudePolygon(\r\n                name,\r\n                {\r\n                    shape: shapeVectors,\r\n                    holes: holeVectors.length ? holeVectors : undefined,\r\n                    depth: options.depth || 1.0,\r\n                    faceUV: options.faceUV || options.perLetterFaceUV?.(letterIndex),\r\n                    faceColors: options.faceColors || options.perLetterFaceColors?.(letterIndex),\r\n                    sideOrientation: Mesh._GetDefaultSideOrientation(options.sideOrientation || Mesh.DOUBLESIDE),\r\n                },\r\n                scene,\r\n                earcutInjection\r\n            );\r\n            meshes.push(mesh);\r\n            letterIndex++;\r\n        }\r\n    }\r\n\r\n    // Then we can merge everyone into one single mesh\r\n    const newMesh = Mesh.MergeMeshes(meshes, true, true);\r\n\r\n    if (newMesh) {\r\n        // Move pivot to desired center / bottom / center position\r\n        const bbox = newMesh.getBoundingInfo().boundingBox;\r\n        newMesh.position.x += -(bbox.minimumWorld.x + bbox.maximumWorld.x) / 2; // Mid X\r\n        newMesh.position.y += -(bbox.minimumWorld.y + bbox.maximumWorld.y) / 2; // Mid Z as it will rotate\r\n        newMesh.position.z += -(bbox.minimumWorld.z + bbox.maximumWorld.z) / 2 + bbox.extendSize.z; // Bottom Y as it will rotate\r\n        newMesh.name = name;\r\n\r\n        // Rotate 90° Up\r\n        const pivot = new TransformNode(\"pivot\", scene);\r\n        pivot.rotation.x = -Math.PI / 2;\r\n        newMesh.parent = pivot;\r\n\r\n        newMesh.bakeCurrentTransformIntoVertices();\r\n\r\n        // Remove the pivot\r\n        newMesh.parent = null;\r\n        pivot.dispose();\r\n    }\r\n\r\n    return newMesh;\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { CreateRibbon } from \"./Builders/ribbonBuilder\";\r\nimport { CreateDisc } from \"./Builders/discBuilder\";\r\nimport { CreateBox } from \"./Builders/boxBuilder\";\r\nimport { CreateTiledBox } from \"./Builders/tiledBoxBuilder\";\r\nimport { CreateSphere } from \"./Builders/sphereBuilder\";\r\nimport { CreateCylinder } from \"./Builders/cylinderBuilder\";\r\nimport { CreateTorus } from \"./Builders/torusBuilder\";\r\nimport { CreateTorusKnot } from \"./Builders/torusKnotBuilder\";\r\nimport { CreateDashedLines, CreateLineSystem, CreateLines } from \"./Builders/linesBuilder\";\r\nimport { CreatePolygon, ExtrudePolygon } from \"./Builders/polygonBuilder\";\r\nimport { ExtrudeShape, ExtrudeShapeCustom } from \"./Builders/shapeBuilder\";\r\nimport { CreateLathe } from \"./Builders/latheBuilder\";\r\nimport { CreatePlane } from \"./Builders/planeBuilder\";\r\nimport { CreateTiledPlane } from \"./Builders/tiledPlaneBuilder\";\r\nimport { CreateGround, CreateGroundFromHeightMap, CreateTiledGround } from \"./Builders/groundBuilder\";\r\nimport { CreateTube } from \"./Builders/tubeBuilder\";\r\nimport { CreatePolyhedron } from \"./Builders/polyhedronBuilder\";\r\nimport { CreateIcoSphere } from \"./Builders/icoSphereBuilder\";\r\nimport { CreateDecal } from \"./Builders/decalBuilder\";\r\nimport { CreateCapsule } from \"./Builders/capsuleBuilder\";\r\nimport { CreateGeodesic } from \"./Builders/geodesicBuilder\";\r\nimport { CreateGoldberg } from \"./Builders/goldbergBuilder\";\r\nimport { CreateText } from \"./Builders/textBuilder\";\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\r\nexport const MeshBuilder = {\r\n    CreateBox,\r\n    CreateTiledBox,\r\n    CreateSphere,\r\n    CreateDisc,\r\n    CreateIcoSphere,\r\n    CreateRibbon,\r\n    CreateCylinder,\r\n    CreateTorus,\r\n    CreateTorusKnot,\r\n    CreateLineSystem,\r\n    CreateLines,\r\n    CreateDashedLines,\r\n    ExtrudeShape,\r\n    ExtrudeShapeCustom,\r\n    CreateLathe,\r\n    CreateTiledPlane,\r\n    CreatePlane,\r\n    CreateGround,\r\n    CreateTiledGround,\r\n    CreateGroundFromHeightMap,\r\n    CreatePolygon,\r\n    ExtrudePolygon,\r\n    CreateTube,\r\n    CreatePolyhedron,\r\n    CreateGeodesic,\r\n    CreateGoldberg,\r\n    CreateDecal,\r\n    CreateCapsule,\r\n    CreateText,\r\n};\r\n"],
  "mappings": "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",
  "names": ["l", "positions", "radius", "angle", "i", "v", "drawWrapper", "material", "dashSize", "gapSize", "idx", "shape", "curve", "path3D", "scale", "rotation", "scaleFunction", "rotateFunction", "cap", "custom", "adjustFrame", "path", "path3D", "radius", "tessellation", "radiusFunction", "cap", "indices", "v", "fr", "isoId", "isoIdR", "y", "x", "points"]
}
