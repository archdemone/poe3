{
  "version": 3,
  "sources": ["../../../dev/core/src/Particles/EmitterTypes/customParticleEmitter.ts"],
  "sourcesContent": ["import { DeepCopier } from \"../../Misc/deepCopier\";\r\nimport type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector3, TmpVectors } from \"../../Maths/math.vector\";\r\nimport type { Particle } from \"../particle\";\r\nimport type { IParticleEmitterType } from \"./IParticleEmitterType\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { UniformBufferEffectCommonAccessor } from \"../../Materials/uniformBufferEffectCommonAccessor\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\n/**\r\n * Particle emitter emitting particles from a custom list of positions.\r\n */\r\nexport class CustomParticleEmitter implements IParticleEmitterType {\r\n    /**\r\n     * Gets or sets the position generator that will create the initial position of each particle.\r\n     * Index will be provided when used with GPU particle. Particle will be provided when used with CPU particles\r\n     */\r\n    public particlePositionGenerator: (index: number, particle: Nullable<Particle>, outPosition: Vector3) => void = () => {};\r\n\r\n    /**\r\n     * Gets or sets the destination generator that will create the final destination of each particle.\r\n     *  * Index will be provided when used with GPU particle. Particle will be provided when used with CPU particles\r\n     */\r\n    public particleDestinationGenerator: (index: number, particle: Nullable<Particle>, outDestination: Vector3) => void = () => {};\r\n\r\n    /**\r\n     * Gets or sets the direction generator that will create the initial direction of each particle.\r\n     *  * Index will be provided when used with GPU particle. Particle will be provided when used with CPU particles\r\n     */\r\n    public particleDirectionGenerator: (index: number, particle: Nullable<Particle>, outDestination: Vector3) => void = () => {};\r\n\r\n    /**\r\n     * Creates a new instance CustomParticleEmitter\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param directionToUpdate is the direction vector to update with the result\r\n     * @param particle is the particle we are computed the direction for\r\n     * @param isLocal defines if the direction should be set in local space\r\n     */\r\n    public startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        const tmpVector = TmpVectors.Vector3[0];\r\n\r\n        if (this.particleDirectionGenerator) {\r\n            this.particleDirectionGenerator(-1, particle, tmpVector);\r\n        } else if (this.particleDestinationGenerator) {\r\n            this.particleDestinationGenerator(-1, particle, tmpVector);\r\n\r\n            // Get direction\r\n            const diffVector = TmpVectors.Vector3[1];\r\n            tmpVector.subtractToRef(particle.position, diffVector);\r\n\r\n            diffVector.scaleToRef(1 / particle.lifeTime, tmpVector);\r\n        } else {\r\n            tmpVector.set(0, 0, 0);\r\n        }\r\n\r\n        if (isLocal) {\r\n            directionToUpdate.copyFrom(tmpVector);\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformNormalToRef(tmpVector, worldMatrix, directionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the position is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param positionToUpdate is the position vector to update with the result\r\n     * @param particle is the particle we are computed the position for\r\n     * @param isLocal defines if the position should be set in local space\r\n     */\r\n    public startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        const tmpVector = TmpVectors.Vector3[0];\r\n\r\n        if (this.particlePositionGenerator) {\r\n            this.particlePositionGenerator(-1, particle, tmpVector);\r\n        } else {\r\n            tmpVector.set(0, 0, 0);\r\n        }\r\n\r\n        if (isLocal) {\r\n            positionToUpdate.copyFrom(tmpVector);\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformCoordinatesToRef(tmpVector, worldMatrix, positionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Clones the current emitter and returns a copy of it\r\n     * @returns the new emitter\r\n     */\r\n    public clone(): CustomParticleEmitter {\r\n        const newOne = new CustomParticleEmitter();\r\n\r\n        DeepCopier.DeepCopy(this, newOne);\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Called by the GPUParticleSystem to setup the update shader\r\n     * @param uboOrEffect defines the update shader\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public applyToShader(uboOrEffect: UniformBufferEffectCommonAccessor): void {}\r\n\r\n    /**\r\n     * Creates the structure of the ubo for this particle emitter\r\n     * @param ubo ubo to create the structure for\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public buildUniformLayout(ubo: UniformBuffer): void {}\r\n\r\n    /**\r\n     * Returns a string to use to update the GPU particles update shader\r\n     * @returns a string containing the defines string\r\n     */\r\n    public getEffectDefines(): string {\r\n        return \"#define CUSTOMEMITTER\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"PointParticleEmitter\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"CustomParticleEmitter\";\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object.\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.type = this.getClassName();\r\n        serializationObject.particlePositionGenerator = this.particlePositionGenerator;\r\n        serializationObject.particleDestinationGenerator = this.particleDestinationGenerator;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse properties from a JSON object\r\n     * @param serializationObject defines the JSON object\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        if (serializationObject.particlePositionGenerator) {\r\n            this.particlePositionGenerator = serializationObject.particlePositionGenerator;\r\n        }\r\n\r\n        if (serializationObject.particleDestinationGenerator) {\r\n            this.particleDestinationGenerator = serializationObject.particleDestinationGenerator;\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;;;;AAWM,IAAO,wBAAP,MAAO,uBAAqB;;;;EAsB9B,cAAA;AAjBO,SAAA,4BAAyG,MAAK;IAAE;AAMhH,SAAA,+BAA+G,MAAK;IAAE;AAMtH,SAAA,6BAA6G,MAAK;IAAE;EAK5G;;;;;;;;EASR,uBAAuB,aAAqB,mBAA4B,UAAoB,SAAgB;AAC/G,UAAM,YAAY,WAAW,QAAQ,CAAC;AAEtC,QAAI,KAAK,4BAA4B;AACjC,WAAK,2BAA2B,IAAI,UAAU,SAAS;IAC3D,WAAW,KAAK,8BAA8B;AAC1C,WAAK,6BAA6B,IAAI,UAAU,SAAS;AAGzD,YAAM,aAAa,WAAW,QAAQ,CAAC;AACvC,gBAAU,cAAc,SAAS,UAAU,UAAU;AAErD,iBAAW,WAAW,IAAI,SAAS,UAAU,SAAS;IAC1D,OAAO;AACH,gBAAU,IAAI,GAAG,GAAG,CAAC;IACzB;AAEA,QAAI,SAAS;AACT,wBAAkB,SAAS,SAAS;AACpC;IACJ;AAEA,YAAQ,qBAAqB,WAAW,aAAa,iBAAiB;EAC1E;;;;;;;;EASO,sBAAsB,aAAqB,kBAA2B,UAAoB,SAAgB;AAC7G,UAAM,YAAY,WAAW,QAAQ,CAAC;AAEtC,QAAI,KAAK,2BAA2B;AAChC,WAAK,0BAA0B,IAAI,UAAU,SAAS;IAC1D,OAAO;AACH,gBAAU,IAAI,GAAG,GAAG,CAAC;IACzB;AAEA,QAAI,SAAS;AACT,uBAAiB,SAAS,SAAS;AACnC;IACJ;AAEA,YAAQ,0BAA0B,WAAW,aAAa,gBAAgB;EAC9E;;;;;EAMO,QAAK;AACR,UAAM,SAAS,IAAI,uBAAqB;AAExC,eAAW,SAAS,MAAM,MAAM;AAEhC,WAAO;EACX;;;;;;EAOO,cAAc,aAA8C;EAAS;;;;;;EAOrE,mBAAmB,KAAkB;EAAS;;;;;EAM9C,mBAAgB;AACnB,WAAO;EACX;;;;;EAMO,eAAY;AACf,WAAO;EACX;;;;;EAMO,YAAS;AACZ,UAAM,sBAA2B,CAAA;AAEjC,wBAAoB,OAAO,KAAK,aAAY;AAC5C,wBAAoB,4BAA4B,KAAK;AACrD,wBAAoB,+BAA+B,KAAK;AAExD,WAAO;EACX;;;;;EAMO,MAAM,qBAAwB;AACjC,QAAI,oBAAoB,2BAA2B;AAC/C,WAAK,4BAA4B,oBAAoB;IACzD;AAEA,QAAI,oBAAoB,8BAA8B;AAClD,WAAK,+BAA+B,oBAAoB;IAC5D;EACJ;;",
  "names": []
}
