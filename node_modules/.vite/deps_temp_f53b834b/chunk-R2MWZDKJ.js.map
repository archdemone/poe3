{
  "version": 3,
  "sources": ["../../../dev/core/src/Misc/gradients.ts", "../../../dev/core/src/Materials/Textures/rawTexture.ts", "../../../dev/core/src/Particles/baseParticleSystem.ts", "../../../dev/core/src/Particles/particle.ts", "../../../dev/core/src/Particles/EmitterTypes/boxParticleEmitter.ts", "../../../dev/core/src/Particles/thinParticleSystem.function.ts", "../../../dev/core/src/Particles/Queue/executionQueue.ts", "../../../dev/core/src/Particles/thinParticleSystem.ts", "../../../dev/core/src/Particles/subEmitter.ts", "../../../dev/core/src/Particles/EmitterTypes/meshParticleEmitter.ts", "../../../dev/core/src/Particles/EmitterTypes/pointParticleEmitter.ts", "../../../dev/core/src/Particles/EmitterTypes/hemisphericParticleEmitter.ts", "../../../dev/core/src/Particles/EmitterTypes/sphereParticleEmitter.ts", "../../../dev/core/src/Particles/EmitterTypes/cylinderParticleEmitter.ts", "../../../dev/core/src/Particles/EmitterTypes/coneParticleEmitter.ts", "../../../dev/core/src/Particles/particleSystem.functions.ts", "../../../dev/core/src/Particles/attractor.ts", "../../../dev/core/src/Particles/particleSystem.ts"],
  "sourcesContent": ["import type { Color3 } from \"../Maths/math.color\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\n\r\n/** Interface used by value gradients (color, factor, ...) */\r\nexport interface IValueGradient {\r\n    /**\r\n     * Gets or sets the gradient value (between 0 and 1)\r\n     */\r\n    gradient: number;\r\n}\r\n\r\n/** Class used to store color4 gradient */\r\nexport class ColorGradient implements IValueGradient {\r\n    /**\r\n     * Creates a new color4 gradient\r\n     * @param gradient gets or sets the gradient value (between 0 and 1)\r\n     * @param color1 gets or sets first associated color\r\n     * @param color2 gets or sets first second color\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Gets or sets the gradient value (between 0 and 1)\r\n         */\r\n        public gradient: number,\r\n        /**\r\n         * Gets or sets first associated color\r\n         */\r\n        public color1: Color4,\r\n        /**\r\n         * Gets or sets second associated color\r\n         */\r\n        public color2?: Color4\r\n    ) {}\r\n\r\n    /**\r\n     * Will get a color picked randomly between color1 and color2.\r\n     * If color2 is undefined then color1 will be used\r\n     * @param result defines the target Color4 to store the result in\r\n     */\r\n    public getColorToRef(result: Color4) {\r\n        if (!this.color2) {\r\n            result.copyFrom(this.color1);\r\n            return;\r\n        }\r\n\r\n        Color4.LerpToRef(this.color1, this.color2, Math.random(), result);\r\n    }\r\n}\r\n\r\n/** Class used to store color 3 gradient */\r\nexport class Color3Gradient implements IValueGradient {\r\n    /**\r\n     * Creates a new color3 gradient\r\n     * @param gradient gets or sets the gradient value (between 0 and 1)\r\n     * @param color gets or sets associated color\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Gets or sets the gradient value (between 0 and 1)\r\n         */\r\n        public gradient: number,\r\n        /**\r\n         * Gets or sets the associated color\r\n         */\r\n        public color: Color3\r\n    ) {}\r\n}\r\n\r\n/** Class used to store factor gradient */\r\nexport class FactorGradient implements IValueGradient {\r\n    /**\r\n     * Creates a new factor gradient\r\n     * @param gradient gets or sets the gradient value (between 0 and 1)\r\n     * @param factor1 gets or sets first associated factor\r\n     * @param factor2 gets or sets second associated factor\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Gets or sets the gradient value (between 0 and 1)\r\n         */\r\n        public gradient: number,\r\n        /**\r\n         * Gets or sets first associated factor\r\n         */\r\n        public factor1: number,\r\n        /**\r\n         * Gets or sets second associated factor\r\n         */\r\n        public factor2?: number\r\n    ) {}\r\n\r\n    /**\r\n     * Will get a number picked randomly between factor1 and factor2.\r\n     * If factor2 is undefined then factor1 will be used\r\n     * @returns the picked number\r\n     */\r\n    public getFactor(): number {\r\n        if (this.factor2 === undefined || this.factor2 === this.factor1) {\r\n            return this.factor1;\r\n        }\r\n\r\n        return this.factor1 + (this.factor2 - this.factor1) * Math.random();\r\n    }\r\n}\r\n\r\n/**\r\n * Helper used to simplify some generic gradient tasks\r\n */\r\nexport class GradientHelper {\r\n    /**\r\n     * Gets the current gradient from an array of IValueGradient\r\n     * @param ratio defines the current ratio to get\r\n     * @param gradients defines the array of IValueGradient\r\n     * @param updateFunc defines the callback function used to get the final value from the selected gradients\r\n     */\r\n    public static GetCurrentGradient(ratio: number, gradients: IValueGradient[], updateFunc: (current: IValueGradient, next: IValueGradient, scale: number) => void) {\r\n        // Use last index if over\r\n        if (gradients[0].gradient > ratio) {\r\n            updateFunc(gradients[0], gradients[0], 1.0);\r\n            return;\r\n        }\r\n\r\n        for (let gradientIndex = 0; gradientIndex < gradients.length - 1; gradientIndex++) {\r\n            const currentGradient = gradients[gradientIndex];\r\n            const nextGradient = gradients[gradientIndex + 1];\r\n\r\n            if (ratio >= currentGradient.gradient && ratio <= nextGradient.gradient) {\r\n                const scale = (ratio - currentGradient.gradient) / (nextGradient.gradient - currentGradient.gradient);\r\n                updateFunc(currentGradient, nextGradient, scale);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Use last index if over\r\n        const lastIndex = gradients.length - 1;\r\n        updateFunc(gradients[lastIndex], gradients[lastIndex], 1.0);\r\n    }\r\n}\r\n", "import { Texture } from \"./texture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { AbstractEngine } from \"../../Engines/abstractEngine\";\r\n\r\nimport type { Scene } from \"../../scene\";\r\n\r\n/**\r\n * Raw texture can help creating a texture directly from an array of data.\r\n * This can be super useful if you either get the data from an uncompressed source or\r\n * if you wish to create your texture pixel by pixel.\r\n */\r\nexport class RawTexture extends Texture {\r\n    private _waitingForData: boolean;\r\n    /**\r\n     * Instantiates a new RawTexture.\r\n     * Raw texture can help creating a texture directly from an array of data.\r\n     * This can be super useful if you either get the data from an uncompressed source or\r\n     * if you wish to create your texture pixel by pixel.\r\n     * @param data define the array of data to use to create the texture (null to create an empty texture)\r\n     * @param width define the width of the texture\r\n     * @param height define the height of the texture\r\n     * @param format define the format of the data (RGB, RGBA... Engine.TEXTUREFORMAT_xxx)\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps define whether mip maps should be generated or not\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n     * @param waitDataToBeReady If set to true Rawtexture will wait data to be set in order to be flaged as ready.\r\n     */\r\n    constructor(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        /**\r\n         * Define the format of the data (RGB, RGBA... Engine.TEXTUREFORMAT_xxx)\r\n         */\r\n        public format: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n        creationFlags?: number,\r\n        useSRGBBuffer?: boolean,\r\n        waitDataToBeReady?: boolean\r\n    ) {\r\n        super(null, sceneOrEngine, !generateMipMaps, invertY, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, creationFlags);\r\n\r\n        if (!this._engine) {\r\n            return;\r\n        }\r\n\r\n        if (!this._engine._caps.textureFloatLinearFiltering && type === Constants.TEXTURETYPE_FLOAT) {\r\n            samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n        }\r\n        if (!this._engine._caps.textureHalfFloatLinearFiltering && type === Constants.TEXTURETYPE_HALF_FLOAT) {\r\n            samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n        }\r\n\r\n        this._texture = this._engine.createRawTexture(data, width, height, format, generateMipMaps, invertY, samplingMode, null, type, creationFlags ?? 0, useSRGBBuffer ?? false);\r\n\r\n        this.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n        this._waitingForData = !!waitDataToBeReady && !data;\r\n    }\r\n\r\n    /**\r\n     * Updates the texture underlying data.\r\n     * @param data Define the new data of the texture\r\n     */\r\n    public update(data: ArrayBufferView): void {\r\n        this._getEngine()!.updateRawTexture(this._texture, data, this._texture!.format, this._texture!.invertY, null, this._texture!.type, this._texture!._useSRGBBuffer);\r\n        this._waitingForData = false;\r\n    }\r\n\r\n    /**\r\n     * Clones the texture.\r\n     * @returns the cloned texture\r\n     */\r\n    public override clone(): Texture {\r\n        if (!this._texture) {\r\n            return super.clone();\r\n        }\r\n\r\n        const rawTexture = new RawTexture(\r\n            null,\r\n            this.getSize().width,\r\n            this.getSize().height,\r\n            this.format,\r\n            this.getScene(),\r\n            this._texture.generateMipMaps,\r\n            this._invertY,\r\n            this.samplingMode,\r\n            this._texture.type,\r\n            this._texture._creationFlags,\r\n            this._useSRGBBuffer\r\n        );\r\n\r\n        rawTexture._texture = this._texture;\r\n        this._texture.incrementReferences();\r\n\r\n        return rawTexture;\r\n    }\r\n\r\n    public override isReady(): boolean {\r\n        return super.isReady() && !this._waitingForData;\r\n    }\r\n\r\n    /**\r\n     * Creates a luminance texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @returns the luminance texture\r\n     */\r\n    public static CreateLuminanceTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_LUMINANCE, sceneOrEngine, generateMipMaps, invertY, samplingMode);\r\n    }\r\n\r\n    /**\r\n     * Creates a luminance alpha texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @returns the luminance alpha texture\r\n     */\r\n    public static CreateLuminanceAlphaTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_LUMINANCE_ALPHA, sceneOrEngine, generateMipMaps, invertY, samplingMode);\r\n    }\r\n\r\n    /**\r\n     * Creates an alpha texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @returns the alpha texture\r\n     */\r\n    public static CreateAlphaTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_ALPHA, sceneOrEngine, generateMipMaps, invertY, samplingMode);\r\n    }\r\n\r\n    /**\r\n     * Creates a RGB texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n     * @returns the RGB alpha texture\r\n     */\r\n    public static CreateRGBTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n        creationFlags: number = 0,\r\n        useSRGBBuffer: boolean = false\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_RGB, sceneOrEngine, generateMipMaps, invertY, samplingMode, type, creationFlags, useSRGBBuffer);\r\n    }\r\n\r\n    /**\r\n     * Creates a RGBA texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n     * @param waitDataToBeReady if set to true this will force texture to wait for data to be set before it is considered ready.\r\n     * @returns the RGBA texture\r\n     */\r\n    public static CreateRGBATexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n        creationFlags: number = 0,\r\n        useSRGBBuffer: boolean = false,\r\n        waitDataToBeReady: boolean = false\r\n    ): RawTexture {\r\n        return new RawTexture(\r\n            data,\r\n            width,\r\n            height,\r\n            Constants.TEXTUREFORMAT_RGBA,\r\n            sceneOrEngine,\r\n            generateMipMaps,\r\n            invertY,\r\n            samplingMode,\r\n            type,\r\n            creationFlags,\r\n            useSRGBBuffer,\r\n            waitDataToBeReady\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a RGBA storage texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n     * @returns the RGBA texture\r\n     */\r\n    public static CreateRGBAStorageTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n        useSRGBBuffer: boolean = false\r\n    ): RawTexture {\r\n        return new RawTexture(\r\n            data,\r\n            width,\r\n            height,\r\n            Constants.TEXTUREFORMAT_RGBA,\r\n            sceneOrEngine,\r\n            generateMipMaps,\r\n            invertY,\r\n            samplingMode,\r\n            type,\r\n            Constants.TEXTURE_CREATIONFLAG_STORAGE,\r\n            useSRGBBuffer\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a R texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @returns the R texture\r\n     */\r\n    public static CreateRTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_FLOAT\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_R, sceneOrEngine, generateMipMaps, invertY, samplingMode, type);\r\n    }\r\n\r\n    /**\r\n     * Creates a R storage texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @returns the R texture\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static CreateRStorageTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_FLOAT\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_R, sceneOrEngine, generateMipMaps, invertY, samplingMode, type, Constants.TEXTURE_CREATIONFLAG_STORAGE);\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport { Vector2, Vector3 } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration\";\r\nimport { ImageProcessingConfigurationDefines } from \"../Materials/imageProcessingConfiguration.defines\";\r\nimport type { ColorGradient, FactorGradient, Color3Gradient, IValueGradient } from \"../Misc/gradients\";\r\nimport type { BoxParticleEmitter } from \"../Particles/EmitterTypes/boxParticleEmitter\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\n\r\nimport \"../Engines/Extensions/engine.dynamicBuffer\";\r\nimport type { IClipPlanesHolder } from \"../Misc/interfaces/iClipPlanesHolder\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport type { Animation } from \"../Animations/animation\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { ProceduralTexture } from \"../Materials/Textures/Procedurals/proceduralTexture\";\r\nimport type { RawTexture } from \"../Materials/Textures/rawTexture\";\r\nimport type { IParticleEmitterType } from \"./EmitterTypes/IParticleEmitterType\";\r\nimport type { PointParticleEmitter } from \"./EmitterTypes/pointParticleEmitter\";\r\nimport type { HemisphericParticleEmitter } from \"./EmitterTypes/hemisphericParticleEmitter\";\r\nimport type { SphereDirectedParticleEmitter, SphereParticleEmitter } from \"./EmitterTypes/sphereParticleEmitter\";\r\nimport type { CylinderDirectedParticleEmitter, CylinderParticleEmitter } from \"./EmitterTypes/cylinderParticleEmitter\";\r\nimport type { ConeDirectedParticleEmitter, ConeParticleEmitter } from \"./EmitterTypes/coneParticleEmitter\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * This represents the base class for particle system in Babylon.\r\n * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\r\n * Particles can take different shapes while emitted like box, sphere, cone or you can write your custom function.\r\n * @example https://doc.babylonjs.com/features/featuresDeepDive/particles/particle_system/particle_system_intro\r\n */\r\nexport class BaseParticleSystem implements IClipPlanesHolder {\r\n    /**\r\n     * Source color is added to the destination color without alpha affecting the result. Great for additive glow effects (fire, magic, lasers)\r\n     */\r\n    public static BLENDMODE_ONEONE = 0;\r\n    /**\r\n     * Blend current color and particle color using particle’s alpha. Same as Constants.ALPHA_COMBINE, the go-to for transparency. 100% alpha means source, 0% alpha means background. Glass, UI fade, smoke\r\n     */\r\n    public static BLENDMODE_STANDARD = 1;\r\n    /**\r\n     * Add current color and particle color multiplied by particle’s alpha\r\n     */\r\n    public static BLENDMODE_ADD = 2;\r\n    /**\r\n     * Multiply current color with particle color\r\n     */\r\n    public static BLENDMODE_MULTIPLY = 3;\r\n    /**\r\n     * Multiply current color with particle color then add current color and particle color multiplied by particle’s alpha\r\n     */\r\n    public static BLENDMODE_MULTIPLYADD = 4;\r\n    /**\r\n     * Subtracts source (particle) from destination (current color), leading to darker results\r\n     * - NOTE: Init as -1 so we can properly map all modes to Engine Const's (otherwise ALPHA_SUBTRACT will conflict with BLENDMODE_MULTIPLY since both use 3)\r\n     */\r\n    public static BLENDMODE_SUBTRACT = -1;\r\n\r\n    /**\r\n     * List of animations used by the particle system.\r\n     */\r\n    public animations: Animation[] = [];\r\n\r\n    /**\r\n     * Gets or sets the unique id of the particle system\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * The id of the Particle system.\r\n     */\r\n    public id: string;\r\n\r\n    /**\r\n     * The friendly name of the Particle system.\r\n     */\r\n    public name: string;\r\n\r\n    /**\r\n     * Snippet ID if the particle system was created from the snippet server\r\n     */\r\n    public snippetId: string;\r\n\r\n    /**\r\n     * The rendering group used by the Particle system to chose when to render.\r\n     */\r\n    public renderingGroupId = 0;\r\n\r\n    /**\r\n     * The emitter represents the Mesh or position we are attaching the particle system to.\r\n     */\r\n    public emitter: Nullable<AbstractMesh | Vector3> = Vector3.Zero();\r\n\r\n    /**\r\n     * The maximum number of particles to emit per frame\r\n     */\r\n    public emitRate = 10;\r\n\r\n    /**\r\n     * If you want to launch only a few particles at once, that can be done, as well.\r\n     */\r\n    public manualEmitCount = -1;\r\n\r\n    /**\r\n     * The overall motion speed (0.01 is default update speed, faster updates = faster animation)\r\n     */\r\n    public updateSpeed = 0.01;\r\n\r\n    /** @internal */\r\n    public _targetStopDuration = 0;\r\n    /**\r\n     * The amount of time the particle system is running (depends of the overall update speed).\r\n     */\r\n    public get targetStopDuration() {\r\n        return this._targetStopDuration;\r\n    }\r\n\r\n    public set targetStopDuration(value: number) {\r\n        if (this._targetStopDuration === value) {\r\n            return;\r\n        }\r\n\r\n        this._targetStopDuration = value;\r\n    }\r\n\r\n    /**\r\n     * Specifies whether the particle system will be disposed once it reaches the end of the animation.\r\n     */\r\n    public disposeOnStop = false;\r\n\r\n    /**\r\n     * Minimum power of emitting particles.\r\n     */\r\n    public minEmitPower = 1;\r\n    /**\r\n     * Maximum power of emitting particles.\r\n     */\r\n    public maxEmitPower = 1;\r\n\r\n    /**\r\n     * Minimum life time of emitting particles.\r\n     */\r\n    public minLifeTime = 1;\r\n    /**\r\n     * Maximum life time of emitting particles.\r\n     */\r\n    public maxLifeTime = 1;\r\n\r\n    /**\r\n     * Minimum Size of emitting particles.\r\n     */\r\n    public minSize = 1;\r\n    /**\r\n     * Maximum Size of emitting particles.\r\n     */\r\n    public maxSize = 1;\r\n\r\n    /**\r\n     * Minimum scale of emitting particles on X axis.\r\n     */\r\n    public minScaleX = 1;\r\n    /**\r\n     * Maximum scale of emitting particles on X axis.\r\n     */\r\n    public maxScaleX = 1;\r\n\r\n    /**\r\n     * Minimum scale of emitting particles on Y axis.\r\n     */\r\n    public minScaleY = 1;\r\n    /**\r\n     * Maximum scale of emitting particles on Y axis.\r\n     */\r\n    public maxScaleY = 1;\r\n\r\n    /**\r\n     * Gets or sets the minimal initial rotation in radians.\r\n     */\r\n    public minInitialRotation = 0;\r\n    /**\r\n     * Gets or sets the maximal initial rotation in radians.\r\n     */\r\n    public maxInitialRotation = 0;\r\n\r\n    /**\r\n     * Minimum angular speed of emitting particles (Z-axis rotation for each particle).\r\n     */\r\n    public minAngularSpeed = 0;\r\n    /**\r\n     * Maximum angular speed of emitting particles (Z-axis rotation for each particle).\r\n     */\r\n    public maxAngularSpeed = 0;\r\n\r\n    /**\r\n     * The texture used to render each particle. (this can be a spritesheet)\r\n     */\r\n    public particleTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * The layer mask we are rendering the particles through.\r\n     */\r\n    public layerMask: number = 0x0fffffff;\r\n\r\n    /**\r\n     * This can help using your own shader to render the particle system.\r\n     * The according effect will be created\r\n     */\r\n    public customShader: any = null;\r\n\r\n    /**\r\n     * By default particle system starts as soon as they are created. This prevents the\r\n     * automatic start to happen and let you decide when to start emitting particles.\r\n     */\r\n    public preventAutoStart: boolean = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this particle system will allow fog to be rendered on it (false by default)\r\n     */\r\n    public applyFog = false;\r\n\r\n    /** @internal */\r\n    _wasDispatched = false;\r\n\r\n    protected _rootUrl = \"\";\r\n    protected _noiseTexture: Nullable<ProceduralTexture>;\r\n\r\n    /**\r\n     * Returns true if the particle system was generated by a node particle system set\r\n     */\r\n    public get isNodeGenerated(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a texture used to add random noise to particle positions\r\n     */\r\n    public get noiseTexture(): Nullable<ProceduralTexture> {\r\n        return this._noiseTexture;\r\n    }\r\n\r\n    public set noiseTexture(value: Nullable<ProceduralTexture>) {\r\n        if (this._noiseTexture === value) {\r\n            return;\r\n        }\r\n\r\n        this._noiseTexture = value;\r\n        this._reset();\r\n    }\r\n\r\n    /** Gets or sets the strength to apply to the noise value (default is (10, 10, 10)) */\r\n    public noiseStrength = new Vector3(10, 10, 10);\r\n\r\n    /**\r\n     * Callback triggered when the particle animation is ending.\r\n     */\r\n    public onAnimationEnd: Nullable<() => void> = null;\r\n\r\n    /**\r\n     * Blend mode use to render the particle\r\n     * For original blend modes which are exposed from ParticleSystem (OneOne, Standard, Add, Multiply, MultiplyAdd, and Subtract), use ParticleSystem.BLENDMODE_FOO\r\n     * For all other blend modes, use Engine Constants.ALPHA_FOO blend modes\r\n     */\r\n    public blendMode = BaseParticleSystem.BLENDMODE_ONEONE;\r\n\r\n    /**\r\n     * Forces the particle to write their depth information to the depth buffer. This can help preventing other draw calls\r\n     * to override the particles.\r\n     */\r\n    public forceDepthWrite = false;\r\n\r\n    /** Gets or sets a value indicating how many cycles (or frames) must be executed before first rendering (this value has to be set before starting the system). Default is 0 */\r\n    public preWarmCycles = 0;\r\n\r\n    /** Gets or sets a value indicating the time step multiplier to use in pre-warm mode (default is 1) */\r\n    public preWarmStepOffset = 1;\r\n\r\n    /**\r\n     * If using a spritesheet (isAnimationSheetEnabled) defines the speed of the sprite loop (default is 1 meaning the animation will play once during the entire particle lifetime)\r\n     */\r\n    public spriteCellChangeSpeed = 1;\r\n    /**\r\n     * If using a spritesheet (isAnimationSheetEnabled) defines the first sprite cell to display\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public startSpriteCellID = 0;\r\n    /**\r\n     * If using a spritesheet (isAnimationSheetEnabled) defines the last sprite cell to display\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public endSpriteCellID = 0;\r\n    /**\r\n     * If using a spritesheet (isAnimationSheetEnabled), defines the sprite cell width to use\r\n     */\r\n    public spriteCellWidth = 0;\r\n    /**\r\n     * If using a spritesheet (isAnimationSheetEnabled), defines the sprite cell height to use\r\n     */\r\n    public spriteCellHeight = 0;\r\n    /**\r\n     * If using a spritesheet (isAnimationSheetEnabled), defines wether the sprite animation is looping\r\n     */\r\n    public spriteCellLoop = true;\r\n    /**\r\n     * This allows the system to random pick the start cell ID between startSpriteCellID and endSpriteCellID\r\n     */\r\n    public spriteRandomStartCell = false;\r\n\r\n    /** Gets or sets a Vector2 used to move the pivot (by default (0,0)) */\r\n    public translationPivot = new Vector2(0, 0);\r\n\r\n    protected _animationSheetEnabled = false;\r\n    /** @internal */\r\n    public get _isAnimationSheetEnabled() {\r\n        return this._animationSheetEnabled;\r\n    }\r\n\r\n    public set _isAnimationSheetEnabled(value: boolean) {\r\n        if (this._animationSheetEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._animationSheetEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that hosted animations (in the system.animations array) must be started when system.start() is called\r\n     */\r\n    public beginAnimationOnStart = false;\r\n\r\n    /**\r\n     * Gets or sets the frame to start the animation from when beginAnimationOnStart is true\r\n     */\r\n    public beginAnimationFrom = 0;\r\n\r\n    /**\r\n     * Gets or sets the frame to end the animation on when beginAnimationOnStart is true\r\n     */\r\n    public beginAnimationTo = 60;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if animations must loop when beginAnimationOnStart is true\r\n     */\r\n    public beginAnimationLoop = false;\r\n\r\n    /**\r\n     * Gets or sets a world offset applied to all particles\r\n     */\r\n    public worldOffset = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 1\r\n     */\r\n    public clipPlane: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 2\r\n     */\r\n    public clipPlane2: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 3\r\n     */\r\n    public clipPlane3: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 4\r\n     */\r\n    public clipPlane4: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 5\r\n     */\r\n    public clipPlane5: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 6\r\n     */\r\n    public clipPlane6: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets whether an animation sprite sheet is enabled or not on the particle system\r\n     */\r\n    public get isAnimationSheetEnabled(): boolean {\r\n        return this._isAnimationSheetEnabled;\r\n    }\r\n\r\n    public set isAnimationSheetEnabled(value: boolean) {\r\n        if (this._isAnimationSheetEnabled == value) {\r\n            return;\r\n        }\r\n\r\n        this._isAnimationSheetEnabled = value;\r\n\r\n        this._reset();\r\n    }\r\n\r\n    private _useLogarithmicDepth: boolean = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean enabling the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\r\n    public get useLogarithmicDepth(): boolean {\r\n        return this._useLogarithmicDepth;\r\n    }\r\n\r\n    public set useLogarithmicDepth(value: boolean) {\r\n        this._useLogarithmicDepth = value && this.getScene()!.getEngine().getCaps().fragmentDepthSupported;\r\n    }\r\n\r\n    /**\r\n     * Get hosting scene\r\n     * @returns the scene\r\n     */\r\n    public getScene(): Nullable<Scene> {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * You can use gravity if you want to give an orientation to your particles.\r\n     */\r\n    public gravity = Vector3.Zero();\r\n\r\n    /** @internal */\r\n    public _colorGradients: Nullable<Array<ColorGradient>> = null;\r\n    /** @internal */\r\n    public _sizeGradients: Nullable<Array<FactorGradient>> = null;\r\n    /** @internal */\r\n    public _lifeTimeGradients: Nullable<Array<FactorGradient>> = null;\r\n    /** @internal */\r\n    public _angularSpeedGradients: Nullable<Array<FactorGradient>> = null;\r\n    /** @internal */\r\n    public _velocityGradients: Nullable<Array<FactorGradient>> = null;\r\n    /** @internal */\r\n    public _limitVelocityGradients: Nullable<Array<FactorGradient>> = null;\r\n    /** @internal */\r\n    public _dragGradients: Nullable<Array<FactorGradient>> = null;\r\n    protected _emitRateGradients: Nullable<Array<FactorGradient>> = null;\r\n    /** @internal */\r\n    public _startSizeGradients: Nullable<Array<FactorGradient>> = null;\r\n    protected _rampGradients: Nullable<Array<Color3Gradient>> = null;\r\n    /** @internal */\r\n    public _colorRemapGradients: Nullable<Array<FactorGradient>> = null;\r\n    /** @internal */\r\n    public _alphaRemapGradients: Nullable<Array<FactorGradient>> = null;\r\n\r\n    protected _hasTargetStopDurationDependantGradient() {\r\n        return (\r\n            (this._startSizeGradients && this._startSizeGradients.length > 0) ||\r\n            (this._emitRateGradients && this._emitRateGradients.length > 0) ||\r\n            (this._lifeTimeGradients && this._lifeTimeGradients.length > 0)\r\n        );\r\n    }\r\n\r\n    protected _setEngineBasedOnBlendMode(blendMode: number): void {\r\n        switch (blendMode) {\r\n            case BaseParticleSystem.BLENDMODE_MULTIPLYADD:\r\n                // Don't want to update engine since there is no equivalent engine alpha mode, instead it gets handled within particleSystem\r\n                return;\r\n            case BaseParticleSystem.BLENDMODE_ADD:\r\n                blendMode = Constants.ALPHA_ADD;\r\n                break;\r\n            case BaseParticleSystem.BLENDMODE_ONEONE:\r\n                blendMode = Constants.ALPHA_ONEONE;\r\n                break;\r\n            case BaseParticleSystem.BLENDMODE_STANDARD:\r\n                blendMode = Constants.ALPHA_COMBINE;\r\n                break;\r\n            case BaseParticleSystem.BLENDMODE_MULTIPLY:\r\n                blendMode = Constants.ALPHA_MULTIPLY;\r\n                break;\r\n            case BaseParticleSystem.BLENDMODE_SUBTRACT:\r\n                blendMode = Constants.ALPHA_SUBTRACT;\r\n                break;\r\n            default:\r\n                // For all other blend modes that were added after the initial particleSystem implementation,\r\n                // the ParticleSystem.BLENDMODE_FOO are already mapped to the underlying Constants.ALPHA_FOO\r\n                break;\r\n        }\r\n        this._engine.setAlphaMode(blendMode);\r\n    }\r\n\r\n    /**\r\n     * Defines the delay in milliseconds before starting the system (0 by default)\r\n     */\r\n    public startDelay = 0;\r\n\r\n    /**\r\n     * Gets the current list of drag gradients.\r\n     * You must use addDragGradient and removeDragGradient to update this list\r\n     * @returns the list of drag gradients\r\n     */\r\n    public getDragGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._dragGradients;\r\n    }\r\n\r\n    /** Gets or sets a value indicating the damping to apply if the limit velocity factor is reached */\r\n    public limitVelocityDamping = 0.4;\r\n\r\n    /**\r\n     * Gets the current list of limit velocity gradients.\r\n     * You must use addLimitVelocityGradient and removeLimitVelocityGradient to update this list\r\n     * @returns the list of limit velocity gradients\r\n     */\r\n    public getLimitVelocityGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._limitVelocityGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of color gradients.\r\n     * You must use addColorGradient and removeColorGradient to update this list\r\n     * @returns the list of color gradients\r\n     */\r\n    public getColorGradients(): Nullable<Array<ColorGradient>> {\r\n        return this._colorGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of size gradients.\r\n     * You must use addSizeGradient and removeSizeGradient to update this list\r\n     * @returns the list of size gradients\r\n     */\r\n    public getSizeGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._sizeGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of color remap gradients.\r\n     * You must use addColorRemapGradient and removeColorRemapGradient to update this list\r\n     * @returns the list of color remap gradients\r\n     */\r\n    public getColorRemapGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._colorRemapGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of alpha remap gradients.\r\n     * You must use addAlphaRemapGradient and removeAlphaRemapGradient to update this list\r\n     * @returns the list of alpha remap gradients\r\n     */\r\n    public getAlphaRemapGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._alphaRemapGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of life time gradients.\r\n     * You must use addLifeTimeGradient and removeLifeTimeGradient to update this list\r\n     * @returns the list of life time gradients\r\n     */\r\n    public getLifeTimeGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._lifeTimeGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of angular speed gradients.\r\n     * You must use addAngularSpeedGradient and removeAngularSpeedGradient to update this list\r\n     * @returns the list of angular speed gradients\r\n     */\r\n    public getAngularSpeedGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._angularSpeedGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of velocity gradients.\r\n     * You must use addVelocityGradient and removeVelocityGradient to update this list\r\n     * @returns the list of velocity gradients\r\n     */\r\n    public getVelocityGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._velocityGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of start size gradients.\r\n     * You must use addStartSizeGradient and removeStartSizeGradient to update this list\r\n     * @returns the list of start size gradients\r\n     */\r\n    public getStartSizeGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._startSizeGradients;\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of emit rate gradients.\r\n     * You must use addEmitRateGradient and removeEmitRateGradient to update this list\r\n     * @returns the list of emit rate gradients\r\n     */\r\n    public getEmitRateGradients(): Nullable<Array<FactorGradient>> {\r\n        return this._emitRateGradients;\r\n    }\r\n\r\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     * This only works when particleEmitterTyps is a BoxParticleEmitter\r\n     */\r\n    public get direction1(): Vector3 {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).direction1) {\r\n            return (<BoxParticleEmitter>this.particleEmitterType).direction1;\r\n        }\r\n\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    public set direction1(value: Vector3) {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).direction1) {\r\n            (<BoxParticleEmitter>this.particleEmitterType).direction1 = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     * This only works when particleEmitterTyps is a BoxParticleEmitter\r\n     */\r\n    public get direction2(): Vector3 {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).direction2) {\r\n            return (<BoxParticleEmitter>this.particleEmitterType).direction2;\r\n        }\r\n\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    public set direction2(value: Vector3) {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).direction2) {\r\n            (<BoxParticleEmitter>this.particleEmitterType).direction2 = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Minimum box point around our emitter. Our emitter is the center of particles source, but if you want your particles to emit from more than one point, then you can tell it to do so.\r\n     * This only works when particleEmitterTyps is a BoxParticleEmitter\r\n     */\r\n    public get minEmitBox(): Vector3 {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).minEmitBox) {\r\n            return (<BoxParticleEmitter>this.particleEmitterType).minEmitBox;\r\n        }\r\n\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    public set minEmitBox(value: Vector3) {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).minEmitBox) {\r\n            (<BoxParticleEmitter>this.particleEmitterType).minEmitBox = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Maximum box point around our emitter. Our emitter is the center of particles source, but if you want your particles to emit from more than one point, then you can tell it to do so.\r\n     * This only works when particleEmitterTyps is a BoxParticleEmitter\r\n     */\r\n    public get maxEmitBox(): Vector3 {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).maxEmitBox) {\r\n            return (<BoxParticleEmitter>this.particleEmitterType).maxEmitBox;\r\n        }\r\n\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    public set maxEmitBox(value: Vector3) {\r\n        if ((<BoxParticleEmitter>this.particleEmitterType).maxEmitBox) {\r\n            (<BoxParticleEmitter>this.particleEmitterType).maxEmitBox = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Random color of each particle after it has been emitted, between color1 and color2 vectors\r\n     */\r\n    public color1 = new Color4(1.0, 1.0, 1.0, 1.0);\r\n    /**\r\n     * Random color of each particle after it has been emitted, between color1 and color2 vectors\r\n     */\r\n    public color2 = new Color4(1.0, 1.0, 1.0, 1.0);\r\n    /**\r\n     * Color the particle will have at the end of its lifetime\r\n     */\r\n    public colorDead = new Color4(0, 0, 0, 1.0);\r\n\r\n    /**\r\n     * An optional mask to filter some colors out of the texture, or filter a part of the alpha channel\r\n     */\r\n    public textureMask = new Color4(1.0, 1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * The particle emitter type defines the emitter used by the particle system.\r\n     * It can be for example box, sphere, or cone...\r\n     */\r\n    public particleEmitterType: IParticleEmitterType;\r\n\r\n    /** @internal */\r\n    public _isSubEmitter = false;\r\n\r\n    /** @internal */\r\n    public _billboardMode = Constants.PARTICLES_BILLBOARDMODE_ALL;\r\n    /**\r\n     * Gets or sets the billboard mode to use when isBillboardBased = true.\r\n     * Value can be: ParticleSystem.BILLBOARDMODE_ALL, ParticleSystem.BILLBOARDMODE_Y, ParticleSystem.BILLBOARDMODE_STRETCHED\r\n     */\r\n    public get billboardMode(): number {\r\n        return this._billboardMode;\r\n    }\r\n\r\n    public set billboardMode(value: number) {\r\n        if (this._billboardMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._billboardMode = value;\r\n        this._reset();\r\n    }\r\n\r\n    /** @internal */\r\n    public _isBillboardBased = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if the particles must be rendered as billboard or aligned with the direction\r\n     */\r\n    public get isBillboardBased(): boolean {\r\n        return this._isBillboardBased;\r\n    }\r\n\r\n    public set isBillboardBased(value: boolean) {\r\n        if (this._isBillboardBased === value) {\r\n            return;\r\n        }\r\n\r\n        this._isBillboardBased = value;\r\n        this._reset();\r\n    }\r\n\r\n    /**\r\n     * The scene the particle system belongs to.\r\n     */\r\n    protected _scene: Nullable<Scene>;\r\n\r\n    /**\r\n     * The engine the particle system belongs to.\r\n     */\r\n    protected _engine: AbstractEngine;\r\n\r\n    /**\r\n     * Local cache of defines for image processing.\r\n     */\r\n    protected _imageProcessingConfigurationDefines = new ImageProcessingConfigurationDefines();\r\n\r\n    /**\r\n     * Default configuration related to image processing available in the standard Material.\r\n     */\r\n    protected _imageProcessingConfiguration: Nullable<ImageProcessingConfiguration>;\r\n\r\n    /**\r\n     * Gets the image processing configuration used either in this material.\r\n     */\r\n    public get imageProcessingConfiguration(): Nullable<ImageProcessingConfiguration> {\r\n        return this._imageProcessingConfiguration;\r\n    }\r\n\r\n    /**\r\n     * Sets the Default image processing configuration used either in the this material.\r\n     *\r\n     * If sets to null, the scene one is in use.\r\n     */\r\n    public set imageProcessingConfiguration(value: Nullable<ImageProcessingConfiguration>) {\r\n        this._attachImageProcessingConfiguration(value);\r\n    }\r\n\r\n    /**\r\n     * Attaches a new image processing configuration to the Standard Material.\r\n     * @param configuration\r\n     */\r\n    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>): void {\r\n        if (configuration === this._imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        // Pick the scene configuration if needed.\r\n        if (!configuration && this._scene) {\r\n            this._imageProcessingConfiguration = this._scene.imageProcessingConfiguration;\r\n        } else {\r\n            this._imageProcessingConfiguration = configuration;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    protected _reset() {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _removeGradientAndTexture(gradient: number, gradients: Nullable<IValueGradient[]>, texture: Nullable<RawTexture>): BaseParticleSystem {\r\n        if (!gradients) {\r\n            return this;\r\n        }\r\n\r\n        let index = 0;\r\n        for (const valueGradient of gradients) {\r\n            if (valueGradient.gradient === gradient) {\r\n                gradients.splice(index, 1);\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        if (texture) {\r\n            texture.dispose();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a particle system.\r\n     * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\r\n     * @param name The name of the particle system\r\n     */\r\n    public constructor(name: string) {\r\n        this.id = name;\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Creates a Point Emitter for the particle system (emits directly from the emitter position)\r\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the box\r\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the box\r\n     */\r\n    public createPointEmitter(direction1: Vector3, direction2: Vector3): PointParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a Hemisphere Emitter for the particle system (emits along the hemisphere radius)\r\n     * @param radius The radius of the hemisphere to emit from\r\n     * @param radiusRange The range of the hemisphere to emit from [0-1] 0 Surface Only, 1 Entire Radius\r\n     */\r\n    public createHemisphericEmitter(radius = 1, radiusRange = 1): HemisphericParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a Sphere Emitter for the particle system (emits along the sphere radius)\r\n     * @param radius The radius of the sphere to emit from\r\n     * @param radiusRange The range of the sphere to emit from [0-1] 0 Surface Only, 1 Entire Radius\r\n     */\r\n    public createSphereEmitter(radius = 1, radiusRange = 1): SphereParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a Directed Sphere Emitter for the particle system (emits between direction1 and direction2)\r\n     * @param radius The radius of the sphere to emit from\r\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the sphere\r\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the sphere\r\n     */\r\n    public createDirectedSphereEmitter(radius = 1, direction1 = new Vector3(0, 1.0, 0), direction2 = new Vector3(0, 1.0, 0)): SphereDirectedParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a Cylinder Emitter for the particle system (emits from the cylinder to the particle position)\r\n     * @param radius The radius of the emission cylinder\r\n     * @param height The height of the emission cylinder\r\n     * @param radiusRange The range of emission [0-1] 0 Surface only, 1 Entire Radius\r\n     * @param directionRandomizer How much to randomize the particle direction [0-1]\r\n     */\r\n    public createCylinderEmitter(radius = 1, height = 1, radiusRange = 1, directionRandomizer = 0): CylinderParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a Directed Cylinder Emitter for the particle system (emits between direction1 and direction2)\r\n     * @param radius The radius of the cylinder to emit from\r\n     * @param height The height of the emission cylinder\r\n     * @param radiusRange the range of the emission cylinder [0-1] 0 Surface only, 1 Entire Radius (1 by default)\r\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the cylinder\r\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the cylinder\r\n     */\r\n    public createDirectedCylinderEmitter(\r\n        radius = 1,\r\n        height = 1,\r\n        radiusRange = 1,\r\n        direction1 = new Vector3(0, 1.0, 0),\r\n        direction2 = new Vector3(0, 1.0, 0)\r\n    ): CylinderDirectedParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a Cone Emitter for the particle system (emits from the cone to the particle position)\r\n     * @param radius The radius of the cone to emit from\r\n     * @param angle The base angle of the cone\r\n     */\r\n    public createConeEmitter(radius = 1, angle = Math.PI / 4): ConeParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    public createDirectedConeEmitter(radius = 1, angle = Math.PI / 4, direction1 = new Vector3(0, 1.0, 0), direction2 = new Vector3(0, 1.0, 0)): ConeDirectedParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a Box Emitter for the particle system. (emits between direction1 and direction2 from withing the box defined by minEmitBox and maxEmitBox)\r\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the box\r\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the box\r\n     * @param minEmitBox Particles are emitted from the box between minEmitBox and maxEmitBox\r\n     * @param maxEmitBox  Particles are emitted from the box between minEmitBox and maxEmitBox\r\n     */\r\n    public createBoxEmitter(direction1: Vector3, direction2: Vector3, minEmitBox: Vector3, maxEmitBox: Vector3): BoxParticleEmitter {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.BaseParticleSystem\", BaseParticleSystem);\r\n", "import type { Nullable } from \"../types\";\r\nimport { Vector2, Vector3, TmpVectors, Vector4 } from \"../Maths/math.vector\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { SubEmitter } from \"./subEmitter\";\r\nimport type { ColorGradient, FactorGradient } from \"../Misc/gradients\";\r\n\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { ThinParticleSystem } from \"./thinParticleSystem\";\r\nimport { Clamp } from \"../Maths/math.scalar.functions\";\r\n\r\n/**\r\n * A particle represents one of the element emitted by a particle system.\r\n * This is mainly define by its coordinates, direction, velocity and age.\r\n */\r\nexport class Particle {\r\n    private static _Count = 0;\r\n    /**\r\n     * Unique ID of the particle\r\n     */\r\n    public id: number;\r\n    /**\r\n     * The world position of the particle in the scene.\r\n     */\r\n    public position = Vector3.Zero();\r\n\r\n    /**\r\n     * The world direction of the particle in the scene.\r\n     */\r\n    public direction = Vector3.Zero();\r\n\r\n    /**\r\n     * The color of the particle.\r\n     */\r\n    public color = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * The color change of the particle per step.\r\n     */\r\n    public colorStep = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * The creation color of the particle.\r\n     */\r\n    public initialColor = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * The color used when the end of life of the particle.\r\n     */\r\n    public colorDead = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Defines how long will the life of the particle be.\r\n     */\r\n    public lifeTime = 1.0;\r\n\r\n    /**\r\n     * The current age of the particle.\r\n     */\r\n    public age = 0;\r\n\r\n    /**\r\n     * The current size of the particle.\r\n     */\r\n    public size = 0;\r\n\r\n    /**\r\n     * The current scale of the particle.\r\n     */\r\n    public scale = new Vector2(1, 1);\r\n\r\n    /**\r\n     * The current angle of the particle.\r\n     */\r\n    public angle = 0;\r\n\r\n    /**\r\n     * Defines how fast is the angle changing.\r\n     */\r\n    public angularSpeed = 0;\r\n\r\n    /**\r\n     * Defines the cell index used by the particle to be rendered from a sprite.\r\n     */\r\n    public cellIndex: number = 0;\r\n\r\n    /**\r\n     * The information required to support color remapping\r\n     */\r\n    public remapData: Vector4;\r\n\r\n    /** @internal */\r\n    public _randomCellOffset?: number;\r\n\r\n    /** @internal */\r\n    public _initialDirection: Nullable<Vector3>;\r\n\r\n    /** @internal */\r\n    public _attachedSubEmitters: Nullable<Array<SubEmitter>> = null;\r\n\r\n    /** @internal */\r\n    public _initialStartSpriteCellId: number;\r\n    /** @internal */\r\n    public _initialEndSpriteCellId: number;\r\n    /** @internal */\r\n    public _initialSpriteCellLoop: boolean;\r\n\r\n    /** @internal */\r\n    public _currentColorGradient: Nullable<ColorGradient>;\r\n    /** @internal */\r\n    public _currentColor1 = new Color4(0, 0, 0, 0);\r\n    /** @internal */\r\n    public _currentColor2 = new Color4(0, 0, 0, 0);\r\n\r\n    /** @internal */\r\n    public _currentSizeGradient: Nullable<FactorGradient>;\r\n    /** @internal */\r\n    public _currentSize1 = 0;\r\n    /** @internal */\r\n    public _currentSize2 = 0;\r\n\r\n    /** @internal */\r\n    public _currentAngularSpeedGradient: Nullable<FactorGradient>;\r\n    /** @internal */\r\n    public _currentAngularSpeed1 = 0;\r\n    /** @internal */\r\n    public _currentAngularSpeed2 = 0;\r\n\r\n    /** @internal */\r\n    public _currentVelocityGradient: Nullable<FactorGradient>;\r\n    /** @internal */\r\n    public _currentVelocity1 = 0;\r\n    /** @internal */\r\n    public _currentVelocity2 = 0;\r\n\r\n    /** @internal */\r\n    public _currentLimitVelocityGradient: Nullable<FactorGradient>;\r\n    /** @internal */\r\n    public _currentLimitVelocity1 = 0;\r\n    /** @internal */\r\n    public _currentLimitVelocity2 = 0;\r\n\r\n    /** @internal */\r\n    public _currentDragGradient: Nullable<FactorGradient>;\r\n    /** @internal */\r\n    public _currentDrag1 = 0;\r\n    /** @internal */\r\n    public _currentDrag2 = 0;\r\n\r\n    /** @internal */\r\n    public _randomNoiseCoordinates1: Vector3;\r\n    /** @internal */\r\n    public _randomNoiseCoordinates2: Vector3;\r\n\r\n    /** @internal */\r\n    public _localPosition?: Vector3;\r\n\r\n    /**\r\n     * Creates a new instance Particle\r\n     * @param particleSystem the particle system the particle belongs to\r\n     */\r\n    constructor(\r\n        /**\r\n         * The particle system the particle belongs to.\r\n         */\r\n        public particleSystem: ThinParticleSystem\r\n    ) {\r\n        this.id = Particle._Count++;\r\n        if (!this.particleSystem.isAnimationSheetEnabled) {\r\n            return;\r\n        }\r\n\r\n        this._updateCellInfoFromSystem();\r\n    }\r\n\r\n    private _updateCellInfoFromSystem(): void {\r\n        this.cellIndex = this.particleSystem.startSpriteCellID;\r\n    }\r\n\r\n    /**\r\n     * Defines how the sprite cell index is updated for the particle\r\n     */\r\n    public updateCellIndex(): void {\r\n        let offsetAge = this.age;\r\n        let changeSpeed = this.particleSystem.spriteCellChangeSpeed;\r\n\r\n        if (this.particleSystem.spriteRandomStartCell) {\r\n            if (this._randomCellOffset === undefined) {\r\n                this._randomCellOffset = Math.random() * this.lifeTime;\r\n            }\r\n\r\n            if (changeSpeed === 0) {\r\n                // Special case when speed = 0 meaning we want to stay on initial cell\r\n                changeSpeed = 1;\r\n                offsetAge = this._randomCellOffset;\r\n            } else {\r\n                offsetAge += this._randomCellOffset;\r\n            }\r\n        }\r\n\r\n        const dist = this._initialEndSpriteCellId - this._initialStartSpriteCellId + 1;\r\n        let ratio: number;\r\n        if (this._initialSpriteCellLoop) {\r\n            ratio = Clamp(((offsetAge * changeSpeed) % this.lifeTime) / this.lifeTime);\r\n        } else {\r\n            ratio = Clamp((offsetAge * changeSpeed) / this.lifeTime);\r\n        }\r\n        this.cellIndex = (this._initialStartSpriteCellId + ratio * dist) | 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _inheritParticleInfoToSubEmitter(subEmitter: SubEmitter) {\r\n        if ((<AbstractMesh>subEmitter.particleSystem.emitter).position) {\r\n            const emitterMesh = <AbstractMesh>subEmitter.particleSystem.emitter;\r\n            emitterMesh.position.copyFrom(this.position);\r\n            if (subEmitter.inheritDirection) {\r\n                const temp = TmpVectors.Vector3[0];\r\n                this.direction.normalizeToRef(temp);\r\n                emitterMesh.setDirection(temp, 0, Math.PI / 2);\r\n            }\r\n        } else {\r\n            const emitterPosition = <Vector3>subEmitter.particleSystem.emitter;\r\n            emitterPosition.copyFrom(this.position);\r\n        }\r\n        // Set inheritedVelocityOffset to be used when new particles are created\r\n        this.direction.scaleToRef(subEmitter.inheritedVelocityAmount / 2, TmpVectors.Vector3[0]);\r\n        subEmitter.particleSystem._inheritedVelocityOffset.copyFrom(TmpVectors.Vector3[0]);\r\n    }\r\n\r\n    /** @internal */\r\n    public _inheritParticleInfoToSubEmitters() {\r\n        if (this._attachedSubEmitters && this._attachedSubEmitters.length > 0) {\r\n            for (const subEmitter of this._attachedSubEmitters) {\r\n                this._inheritParticleInfoToSubEmitter(subEmitter);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _reset() {\r\n        this.age = 0;\r\n        this.id = Particle._Count++;\r\n        this._currentColorGradient = null;\r\n        this._currentSizeGradient = null;\r\n        this._currentAngularSpeedGradient = null;\r\n        this._currentVelocityGradient = null;\r\n        this._currentLimitVelocityGradient = null;\r\n        this._currentDragGradient = null;\r\n        this.cellIndex = this.particleSystem.startSpriteCellID;\r\n        this._randomCellOffset = undefined;\r\n    }\r\n\r\n    /**\r\n     * Copy the properties of particle to another one.\r\n     * @param other the particle to copy the information to.\r\n     */\r\n    public copyTo(other: Particle) {\r\n        other.position.copyFrom(this.position);\r\n        if (this._initialDirection) {\r\n            if (other._initialDirection) {\r\n                other._initialDirection.copyFrom(this._initialDirection);\r\n            } else {\r\n                other._initialDirection = this._initialDirection.clone();\r\n            }\r\n        } else {\r\n            other._initialDirection = null;\r\n        }\r\n        other.direction.copyFrom(this.direction);\r\n        if (this._localPosition) {\r\n            if (other._localPosition) {\r\n                other._localPosition.copyFrom(this._localPosition);\r\n            } else {\r\n                other._localPosition = this._localPosition.clone();\r\n            }\r\n        }\r\n        other.color.copyFrom(this.color);\r\n        other.colorStep.copyFrom(this.colorStep);\r\n        other.initialColor.copyFrom(this.initialColor);\r\n        other.colorDead.copyFrom(this.colorDead);\r\n        other.lifeTime = this.lifeTime;\r\n        other.age = this.age;\r\n        other._randomCellOffset = this._randomCellOffset;\r\n        other.size = this.size;\r\n        other.scale.copyFrom(this.scale);\r\n        other.angle = this.angle;\r\n        other.angularSpeed = this.angularSpeed;\r\n        other.particleSystem = this.particleSystem;\r\n        other.cellIndex = this.cellIndex;\r\n        other.id = this.id;\r\n        other._attachedSubEmitters = this._attachedSubEmitters;\r\n        if (this._currentColorGradient) {\r\n            other._currentColorGradient = this._currentColorGradient;\r\n            other._currentColor1.copyFrom(this._currentColor1);\r\n            other._currentColor2.copyFrom(this._currentColor2);\r\n        }\r\n        if (this._currentSizeGradient) {\r\n            other._currentSizeGradient = this._currentSizeGradient;\r\n            other._currentSize1 = this._currentSize1;\r\n            other._currentSize2 = this._currentSize2;\r\n        }\r\n        if (this._currentAngularSpeedGradient) {\r\n            other._currentAngularSpeedGradient = this._currentAngularSpeedGradient;\r\n            other._currentAngularSpeed1 = this._currentAngularSpeed1;\r\n            other._currentAngularSpeed2 = this._currentAngularSpeed2;\r\n        }\r\n        if (this._currentVelocityGradient) {\r\n            other._currentVelocityGradient = this._currentVelocityGradient;\r\n            other._currentVelocity1 = this._currentVelocity1;\r\n            other._currentVelocity2 = this._currentVelocity2;\r\n        }\r\n        if (this._currentLimitVelocityGradient) {\r\n            other._currentLimitVelocityGradient = this._currentLimitVelocityGradient;\r\n            other._currentLimitVelocity1 = this._currentLimitVelocity1;\r\n            other._currentLimitVelocity2 = this._currentLimitVelocity2;\r\n        }\r\n        if (this._currentDragGradient) {\r\n            other._currentDragGradient = this._currentDragGradient;\r\n            other._currentDrag1 = this._currentDrag1;\r\n            other._currentDrag2 = this._currentDrag2;\r\n        }\r\n        if (this.particleSystem.isAnimationSheetEnabled) {\r\n            other._initialStartSpriteCellId = this._initialStartSpriteCellId;\r\n            other._initialEndSpriteCellId = this._initialEndSpriteCellId;\r\n            other._initialSpriteCellLoop = this._initialSpriteCellLoop;\r\n        }\r\n        if (this.particleSystem.useRampGradients) {\r\n            if (other.remapData && this.remapData) {\r\n                other.remapData.copyFrom(this.remapData);\r\n            } else {\r\n                other.remapData = new Vector4(0, 0, 0, 0);\r\n            }\r\n        }\r\n        if (this._randomNoiseCoordinates1) {\r\n            if (other._randomNoiseCoordinates1) {\r\n                other._randomNoiseCoordinates1.copyFrom(this._randomNoiseCoordinates1);\r\n                other._randomNoiseCoordinates2.copyFrom(this._randomNoiseCoordinates2);\r\n            } else {\r\n                other._randomNoiseCoordinates1 = this._randomNoiseCoordinates1.clone();\r\n                other._randomNoiseCoordinates2 = this._randomNoiseCoordinates2.clone();\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { Particle } from \"../../Particles/particle\";\r\nimport type { IParticleEmitterType } from \"./IParticleEmitterType\";\r\nimport type { UniformBufferEffectCommonAccessor } from \"../../Materials/uniformBufferEffectCommonAccessor\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport { RandomRange } from \"../../Maths/math.scalar.functions\";\r\nimport { DeepCopier } from \"../../Misc/deepCopier\";\r\n/**\r\n * Particle emitter emitting particles from the inside of a box.\r\n * It emits the particles randomly between 2 given directions.\r\n */\r\nexport class BoxParticleEmitter implements IParticleEmitterType {\r\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     */\r\n    public direction1 = new Vector3(0, 1.0, 0);\r\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     */\r\n    public direction2 = new Vector3(0, 1.0, 0);\r\n\r\n    /**\r\n     * Minimum box point around our emitter. Our emitter is the center of particles source, but if you want your particles to emit from more than one point, then you can tell it to do so.\r\n     */\r\n    public minEmitBox = new Vector3(-0.5, -0.5, -0.5);\r\n    /**\r\n     * Maximum box point around our emitter. Our emitter is the center of particles source, but if you want your particles to emit from more than one point, then you can tell it to do so.\r\n     */\r\n    public maxEmitBox = new Vector3(0.5, 0.5, 0.5);\r\n\r\n    /**\r\n     * Creates a new instance BoxParticleEmitter\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param directionToUpdate is the direction vector to update with the result\r\n     * @param particle is the particle we are computed the direction for\r\n     * @param isLocal defines if the direction should be set in local space\r\n     */\r\n    public startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        const randX = RandomRange(this.direction1.x, this.direction2.x);\r\n        const randY = RandomRange(this.direction1.y, this.direction2.y);\r\n        const randZ = RandomRange(this.direction1.z, this.direction2.z);\r\n\r\n        if (isLocal) {\r\n            directionToUpdate.x = randX;\r\n            directionToUpdate.y = randY;\r\n            directionToUpdate.z = randZ;\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the position is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param positionToUpdate is the position vector to update with the result\r\n     * @param particle is the particle we are computed the position for\r\n     * @param isLocal defines if the position should be set in local space\r\n     */\r\n    public startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        const randX = RandomRange(this.minEmitBox.x, this.maxEmitBox.x);\r\n        const randY = RandomRange(this.minEmitBox.y, this.maxEmitBox.y);\r\n        const randZ = RandomRange(this.minEmitBox.z, this.maxEmitBox.z);\r\n\r\n        if (isLocal) {\r\n            positionToUpdate.x = randX;\r\n            positionToUpdate.y = randY;\r\n            positionToUpdate.z = randZ;\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformCoordinatesFromFloatsToRef(randX, randY, randZ, worldMatrix, positionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Clones the current emitter and returns a copy of it\r\n     * @returns the new emitter\r\n     */\r\n    public clone(): BoxParticleEmitter {\r\n        const newOne = new BoxParticleEmitter();\r\n\r\n        DeepCopier.DeepCopy(this, newOne);\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Called by the GPUParticleSystem to setup the update shader\r\n     * @param uboOrEffect defines the update shader\r\n     */\r\n    public applyToShader(uboOrEffect: UniformBufferEffectCommonAccessor): void {\r\n        uboOrEffect.setVector3(\"direction1\", this.direction1);\r\n        uboOrEffect.setVector3(\"direction2\", this.direction2);\r\n        uboOrEffect.setVector3(\"minEmitBox\", this.minEmitBox);\r\n        uboOrEffect.setVector3(\"maxEmitBox\", this.maxEmitBox);\r\n    }\r\n\r\n    /**\r\n     * Creates the structure of the ubo for this particle emitter\r\n     * @param ubo ubo to create the structure for\r\n     */\r\n    public buildUniformLayout(ubo: UniformBuffer): void {\r\n        ubo.addUniform(\"direction1\", 3);\r\n        ubo.addUniform(\"direction2\", 3);\r\n        ubo.addUniform(\"minEmitBox\", 3);\r\n        ubo.addUniform(\"maxEmitBox\", 3);\r\n    }\r\n\r\n    /**\r\n     * Returns a string to use to update the GPU particles update shader\r\n     * @returns a string containing the defines string\r\n     */\r\n    public getEffectDefines(): string {\r\n        return \"#define BOXEMITTER\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"BoxParticleEmitter\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"BoxParticleEmitter\";\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object.\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.type = this.getClassName();\r\n        serializationObject.direction1 = this.direction1.asArray();\r\n        serializationObject.direction2 = this.direction2.asArray();\r\n        serializationObject.minEmitBox = this.minEmitBox.asArray();\r\n        serializationObject.maxEmitBox = this.maxEmitBox.asArray();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse properties from a JSON object\r\n     * @param serializationObject defines the JSON object\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        Vector3.FromArrayToRef(serializationObject.direction1, 0, this.direction1);\r\n        Vector3.FromArrayToRef(serializationObject.direction2, 0, this.direction2);\r\n        Vector3.FromArrayToRef(serializationObject.minEmitBox, 0, this.minEmitBox);\r\n        Vector3.FromArrayToRef(serializationObject.maxEmitBox, 0, this.maxEmitBox);\r\n    }\r\n}\r\n", "import { Color4 } from \"core/Maths/math.color\";\r\nimport type { ColorGradient, FactorGradient } from \"core/Misc/gradients\";\r\nimport { GradientHelper } from \"core/Misc/gradients\";\r\nimport type { Particle } from \"./particle\";\r\nimport type { ThinParticleSystem } from \"./thinParticleSystem\";\r\nimport { Clamp, Lerp, RandomRange } from \"core/Maths/math.scalar.functions\";\r\nimport { TmpVectors, Vector3, Vector4 } from \"core/Maths/math.vector\";\r\n\r\n/** Color */\r\n\r\n/** @internal */\r\nexport function _CreateColorData(particle: Particle, system: ThinParticleSystem) {\r\n    const step = RandomRange(0, 1.0);\r\n\r\n    Color4.LerpToRef(system.color1, system.color2, step, particle.color);\r\n}\r\n\r\n/** @internal */\r\nexport function _CreateColorDeadData(particle: Particle, system: ThinParticleSystem) {\r\n    system.colorDead.subtractToRef(particle.color, system._colorDiff);\r\n    system._colorDiff.scaleToRef(1.0 / particle.lifeTime, particle.colorStep);\r\n}\r\n\r\n/** @internal */\r\nexport function _CreateColorGradientsData(particle: Particle, system: ThinParticleSystem) {\r\n    particle._currentColorGradient = system._colorGradients![0];\r\n    particle._currentColorGradient.getColorToRef(particle.color);\r\n    particle._currentColor1.copyFrom(particle.color);\r\n\r\n    if (system._colorGradients!.length > 1) {\r\n        system._colorGradients![1].getColorToRef(particle._currentColor2);\r\n    } else {\r\n        particle._currentColor2.copyFrom(particle.color);\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport function _ProcessColorGradients(particle: Particle, system: ThinParticleSystem) {\r\n    const colorGradients = system._colorGradients;\r\n    GradientHelper.GetCurrentGradient(system._ratio, colorGradients!, (currentGradient, nextGradient, scale) => {\r\n        if (currentGradient !== particle._currentColorGradient) {\r\n            particle._currentColor1.copyFrom(particle._currentColor2);\r\n            (<ColorGradient>nextGradient).getColorToRef(particle._currentColor2);\r\n            particle._currentColorGradient = <ColorGradient>currentGradient;\r\n        }\r\n        Color4.LerpToRef(particle._currentColor1, particle._currentColor2, scale, particle.color);\r\n    });\r\n}\r\n\r\n/** @internal */\r\nexport function _ProcessColor(particle: Particle, system: ThinParticleSystem) {\r\n    particle.colorStep.scaleToRef(system._scaledUpdateSpeed, system._scaledColorStep);\r\n    particle.color.addInPlace(system._scaledColorStep);\r\n\r\n    if (particle.color.a < 0) {\r\n        particle.color.a = 0;\r\n    }\r\n}\r\n\r\n/** Angular speed */\r\n\r\n/** @internal */\r\nexport function _ProcessAngularSpeedGradients(particle: Particle, system: ThinParticleSystem) {\r\n    GradientHelper.GetCurrentGradient(system._ratio, system._angularSpeedGradients!, (currentGradient, nextGradient, scale) => {\r\n        if (currentGradient !== particle._currentAngularSpeedGradient) {\r\n            particle._currentAngularSpeed1 = particle._currentAngularSpeed2;\r\n            particle._currentAngularSpeed2 = (<FactorGradient>nextGradient).getFactor();\r\n            particle._currentAngularSpeedGradient = <FactorGradient>currentGradient;\r\n        }\r\n        particle.angularSpeed = Lerp(particle._currentAngularSpeed1, particle._currentAngularSpeed2, scale);\r\n    });\r\n}\r\n\r\n/** @internal */\r\nexport function _ProcessAngularSpeed(particle: Particle, system: ThinParticleSystem) {\r\n    particle.angle += particle.angularSpeed * system._scaledUpdateSpeed;\r\n}\r\n\r\n/** Velocity & direction */\r\n\r\n/** @internal */\r\nexport function _CreateDirectionData(particle: Particle, system: ThinParticleSystem) {\r\n    system.particleEmitterType.startDirectionFunction(system._emitterWorldMatrix, particle.direction, particle, system.isLocal, system._emitterInverseWorldMatrix);\r\n}\r\n\r\n/** @internal */\r\nexport function _CreateCustomDirectionData(particle: Particle, system: ThinParticleSystem) {\r\n    system.startDirectionFunction!(system._emitterWorldMatrix, particle.direction, particle, system.isLocal);\r\n}\r\n\r\n/** @internal */\r\nexport function _CreateVelocityGradients(particle: Particle, system: ThinParticleSystem) {\r\n    particle._currentVelocityGradient = system._velocityGradients![0];\r\n    particle._currentVelocity1 = particle._currentVelocityGradient.getFactor();\r\n\r\n    if (system._velocityGradients!.length > 1) {\r\n        particle._currentVelocity2 = system._velocityGradients![1].getFactor();\r\n    } else {\r\n        particle._currentVelocity2 = particle._currentVelocity1;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport function _CreateLimitVelocityGradients(particle: Particle, system: ThinParticleSystem) {\r\n    particle._currentLimitVelocityGradient = system._limitVelocityGradients![0];\r\n    particle._currentLimitVelocity1 = particle._currentLimitVelocityGradient.getFactor();\r\n\r\n    if (system._limitVelocityGradients!.length > 1) {\r\n        particle._currentLimitVelocity2 = system._limitVelocityGradients![1].getFactor();\r\n    } else {\r\n        particle._currentLimitVelocity2 = particle._currentLimitVelocity1;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport function _ProcessVelocityGradients(particle: Particle, system: ThinParticleSystem) {\r\n    GradientHelper.GetCurrentGradient(system._ratio, system._velocityGradients!, (currentGradient, nextGradient, scale) => {\r\n        if (currentGradient !== particle._currentVelocityGradient) {\r\n            particle._currentVelocity1 = particle._currentVelocity2;\r\n            particle._currentVelocity2 = (<FactorGradient>nextGradient).getFactor();\r\n            particle._currentVelocityGradient = <FactorGradient>currentGradient;\r\n        }\r\n        system._directionScale *= Lerp(particle._currentVelocity1, particle._currentVelocity2, scale);\r\n    });\r\n}\r\n\r\n/** @internal */\r\nexport function _ProcessLimitVelocityGradients(particle: Particle, system: ThinParticleSystem) {\r\n    GradientHelper.GetCurrentGradient(system._ratio, system._limitVelocityGradients!, (currentGradient, nextGradient, scale) => {\r\n        if (currentGradient !== particle._currentLimitVelocityGradient) {\r\n            particle._currentLimitVelocity1 = particle._currentLimitVelocity2;\r\n            particle._currentLimitVelocity2 = (<FactorGradient>nextGradient).getFactor();\r\n            particle._currentLimitVelocityGradient = <FactorGradient>currentGradient;\r\n        }\r\n\r\n        const limitVelocity = Lerp(particle._currentLimitVelocity1, particle._currentLimitVelocity2, scale);\r\n        const currentVelocity = particle.direction.length();\r\n\r\n        if (currentVelocity > limitVelocity) {\r\n            particle.direction.scaleInPlace(system.limitVelocityDamping);\r\n        }\r\n    });\r\n}\r\n\r\n/** @internal */\r\nexport function _ProcessDirection(particle: Particle, system: ThinParticleSystem) {\r\n    particle.direction.scaleToRef(system._directionScale, system._scaledDirection);\r\n}\r\n\r\n/** Position */\r\n\r\n/** @internal */\r\nexport function _CreatePositionData(particle: Particle, system: ThinParticleSystem) {\r\n    system.particleEmitterType.startPositionFunction(system._emitterWorldMatrix, particle.position, particle, system.isLocal);\r\n}\r\n\r\n/** @internal */\r\nexport function _CreateCustomPositionData(particle: Particle, system: ThinParticleSystem) {\r\n    system.startPositionFunction!(system._emitterWorldMatrix, particle.position, particle, system.isLocal);\r\n}\r\n\r\n/** @internal */\r\nexport function _CreateIsLocalData(particle: Particle, system: ThinParticleSystem) {\r\n    if (!particle._localPosition) {\r\n        particle._localPosition = particle.position.clone();\r\n    } else {\r\n        particle._localPosition.copyFrom(particle.position);\r\n    }\r\n    Vector3.TransformCoordinatesToRef(particle._localPosition, system._emitterWorldMatrix, particle.position);\r\n}\r\n\r\n/** @internal */\r\nexport function _ProcessPosition(particle: Particle, system: ThinParticleSystem) {\r\n    if (system.isLocal && particle._localPosition) {\r\n        particle._localPosition!.addInPlace(system._scaledDirection);\r\n        Vector3.TransformCoordinatesToRef(particle._localPosition!, system._emitterWorldMatrix, particle.position);\r\n    } else {\r\n        particle.position.addInPlace(system._scaledDirection);\r\n    }\r\n}\r\n\r\n/** Drag */\r\n\r\n/** @internal */\r\nexport function _CreateDragData(particle: Particle, system: ThinParticleSystem) {\r\n    particle._currentDragGradient = system._dragGradients![0];\r\n    particle._currentDrag1 = particle._currentDragGradient.getFactor();\r\n\r\n    if (system._dragGradients!.length > 1) {\r\n        particle._currentDrag2 = system._dragGradients![1].getFactor();\r\n    } else {\r\n        particle._currentDrag2 = particle._currentDrag1;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport function _ProcessDragGradients(particle: Particle, system: ThinParticleSystem) {\r\n    GradientHelper.GetCurrentGradient(system._ratio, system._dragGradients!, (currentGradient, nextGradient, scale) => {\r\n        if (currentGradient !== particle._currentDragGradient) {\r\n            particle._currentDrag1 = particle._currentDrag2;\r\n            particle._currentDrag2 = (<FactorGradient>nextGradient).getFactor();\r\n            particle._currentDragGradient = <FactorGradient>currentGradient;\r\n        }\r\n\r\n        const drag = Lerp(particle._currentDrag1, particle._currentDrag2, scale);\r\n\r\n        system._scaledDirection.scaleInPlace(1.0 - drag);\r\n    });\r\n}\r\n\r\n/** Noise */\r\n\r\n/** @internal */\r\nexport function _CreateNoiseData(particle: Particle, system: ThinParticleSystem) {\r\n    if (particle._randomNoiseCoordinates1) {\r\n        particle._randomNoiseCoordinates1.copyFromFloats(Math.random(), Math.random(), Math.random());\r\n        particle._randomNoiseCoordinates2.copyFromFloats(Math.random(), Math.random(), Math.random());\r\n    } else {\r\n        particle._randomNoiseCoordinates1 = new Vector3(Math.random(), Math.random(), Math.random());\r\n        particle._randomNoiseCoordinates2 = new Vector3(Math.random(), Math.random(), Math.random());\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport function _ProcessNoise(particle: Particle, system: ThinParticleSystem) {\r\n    const noiseTextureData = system._noiseTextureData;\r\n    const noiseTextureSize = system._noiseTextureSize;\r\n\r\n    if (noiseTextureData && noiseTextureSize && particle._randomNoiseCoordinates1) {\r\n        const fetchedColorR = system._fetchR(\r\n            particle._randomNoiseCoordinates1.x,\r\n            particle._randomNoiseCoordinates1.y,\r\n            noiseTextureSize.width,\r\n            noiseTextureSize.height,\r\n            noiseTextureData\r\n        );\r\n        const fetchedColorG = system._fetchR(\r\n            particle._randomNoiseCoordinates1.z,\r\n            particle._randomNoiseCoordinates2.x,\r\n            noiseTextureSize.width,\r\n            noiseTextureSize.height,\r\n            noiseTextureData\r\n        );\r\n        const fetchedColorB = system._fetchR(\r\n            particle._randomNoiseCoordinates2.y,\r\n            particle._randomNoiseCoordinates2.z,\r\n            noiseTextureSize.width,\r\n            noiseTextureSize.height,\r\n            noiseTextureData\r\n        );\r\n\r\n        const force = TmpVectors.Vector3[0];\r\n        const scaledForce = TmpVectors.Vector3[1];\r\n\r\n        force.copyFromFloats((2 * fetchedColorR - 1) * system.noiseStrength.x, (2 * fetchedColorG - 1) * system.noiseStrength.y, (2 * fetchedColorB - 1) * system.noiseStrength.z);\r\n\r\n        force.scaleToRef(system._tempScaledUpdateSpeed, scaledForce);\r\n        particle.direction.addInPlace(scaledForce);\r\n    }\r\n}\r\n\r\n/** Gravity */\r\n\r\n/** @internal */\r\nexport function _ProcessGravity(particle: Particle, system: ThinParticleSystem) {\r\n    system.gravity.scaleToRef(system._tempScaledUpdateSpeed, system._scaledGravity);\r\n    particle.direction.addInPlace(system._scaledGravity);\r\n}\r\n\r\n/** Size */\r\n\r\n/** @internal */\r\nexport function _CreateSizeData(particle: Particle, system: ThinParticleSystem) {\r\n    particle.size = RandomRange(system.minSize, system.maxSize);\r\n    particle.scale.copyFromFloats(RandomRange(system.minScaleX, system.maxScaleX), RandomRange(system.minScaleY, system.maxScaleY));\r\n}\r\n\r\n/** @internal */\r\nexport function _CreateSizeGradientsData(particle: Particle, system: ThinParticleSystem) {\r\n    particle._currentSizeGradient = system._sizeGradients![0];\r\n    particle._currentSize1 = particle._currentSizeGradient.getFactor();\r\n    particle.size = particle._currentSize1;\r\n\r\n    if (system._sizeGradients!.length > 1) {\r\n        particle._currentSize2 = system._sizeGradients![1].getFactor();\r\n    } else {\r\n        particle._currentSize2 = particle._currentSize1;\r\n    }\r\n\r\n    particle.scale.copyFromFloats(RandomRange(system.minScaleX, system.maxScaleX), RandomRange(system.minScaleY, system.maxScaleY));\r\n}\r\n\r\n/** @internal */\r\nexport function _CreateStartSizeGradientsData(particle: Particle, system: ThinParticleSystem) {\r\n    const ratio = system._actualFrame / system.targetStopDuration;\r\n    GradientHelper.GetCurrentGradient(ratio, system._startSizeGradients!, (currentGradient, nextGradient, scale) => {\r\n        if (currentGradient !== system._currentStartSizeGradient) {\r\n            system._currentStartSize1 = system._currentStartSize2;\r\n            system._currentStartSize2 = (<FactorGradient>nextGradient).getFactor();\r\n            system._currentStartSizeGradient = <FactorGradient>currentGradient;\r\n        }\r\n\r\n        const value = Lerp(system._currentStartSize1, system._currentStartSize2, scale);\r\n        particle.scale.scaleInPlace(value);\r\n    });\r\n}\r\n\r\n/** @internal */\r\nexport function _ProcessSizeGradients(particle: Particle, system: ThinParticleSystem) {\r\n    GradientHelper.GetCurrentGradient(system._ratio, system._sizeGradients!, (currentGradient, nextGradient, scale) => {\r\n        if (currentGradient !== particle._currentSizeGradient) {\r\n            particle._currentSize1 = particle._currentSize2;\r\n            particle._currentSize2 = (<FactorGradient>nextGradient).getFactor();\r\n            particle._currentSizeGradient = <FactorGradient>currentGradient;\r\n        }\r\n        particle.size = Lerp(particle._currentSize1, particle._currentSize2, scale);\r\n    });\r\n}\r\n\r\n/** Ramp */\r\n\r\n/** @internal */\r\nexport function _CreateRampData(particle: Particle, system: ThinParticleSystem) {\r\n    particle.remapData = new Vector4(0, 1, 0, 1);\r\n}\r\n\r\n/** Remap */\r\n\r\n/** @internal */\r\nexport function _ProcessRemapGradients(particle: Particle, system: ThinParticleSystem) {\r\n    if (system._colorRemapGradients && system._colorRemapGradients.length > 0) {\r\n        GradientHelper.GetCurrentGradient(system._ratio, system._colorRemapGradients, (currentGradient, nextGradient, scale) => {\r\n            const min = Lerp((<FactorGradient>currentGradient).factor1, (<FactorGradient>nextGradient).factor1, scale);\r\n            const max = Lerp((<FactorGradient>currentGradient).factor2!, (<FactorGradient>nextGradient).factor2!, scale);\r\n\r\n            particle.remapData.x = min;\r\n            particle.remapData.y = max - min;\r\n        });\r\n    }\r\n\r\n    if (system._alphaRemapGradients && system._alphaRemapGradients.length > 0) {\r\n        GradientHelper.GetCurrentGradient(system._ratio, system._alphaRemapGradients, (currentGradient, nextGradient, scale) => {\r\n            const min = Lerp((<FactorGradient>currentGradient).factor1, (<FactorGradient>nextGradient).factor1, scale);\r\n            const max = Lerp((<FactorGradient>currentGradient).factor2!, (<FactorGradient>nextGradient).factor2!, scale);\r\n\r\n            particle.remapData.z = min;\r\n            particle.remapData.w = max - min;\r\n        });\r\n    }\r\n}\r\n\r\n/** Life */\r\n\r\n/** @internal */\r\nexport function _CreateLifeGradientsData(particle: Particle, system: ThinParticleSystem) {\r\n    const ratio = Clamp(system._actualFrame / system.targetStopDuration);\r\n    GradientHelper.GetCurrentGradient(ratio, system._lifeTimeGradients!, (currentGradient, nextGradient) => {\r\n        const factorGradient1 = <FactorGradient>currentGradient;\r\n        const factorGradient2 = <FactorGradient>nextGradient;\r\n        const lifeTime1 = factorGradient1.getFactor();\r\n        const lifeTime2 = factorGradient2.getFactor();\r\n        const gradient = (ratio - factorGradient1.gradient) / (factorGradient2.gradient - factorGradient1.gradient);\r\n        particle.lifeTime = Lerp(lifeTime1, lifeTime2, gradient);\r\n    });\r\n    system._emitPower = RandomRange(system.minEmitPower, system.maxEmitPower);\r\n}\r\n\r\n/** @internal */\r\nexport function _CreateLifetimeData(particle: Particle, system: ThinParticleSystem) {\r\n    particle.lifeTime = RandomRange(system.minLifeTime, system.maxLifeTime);\r\n    system._emitPower = RandomRange(system.minEmitPower, system.maxEmitPower);\r\n}\r\n\r\n/** Emit power */\r\n\r\n/** @internal */\r\nexport function _CreateEmitPowerData(particle: Particle, system: ThinParticleSystem) {\r\n    if (system._emitPower === 0) {\r\n        if (!particle._initialDirection) {\r\n            particle._initialDirection = particle.direction.clone();\r\n        } else {\r\n            particle._initialDirection.copyFrom(particle.direction);\r\n        }\r\n        particle.direction.set(0, 0, 0);\r\n    } else {\r\n        particle._initialDirection = null;\r\n        particle.direction.scaleInPlace(system._emitPower);\r\n    }\r\n\r\n    // Inherited Velocity\r\n    particle.direction.addInPlace(system._inheritedVelocityOffset);\r\n}\r\n\r\n/** Angle */\r\n\r\n/** @internal */\r\nexport function _CreateAngleData(particle: Particle, system: ThinParticleSystem) {\r\n    particle.angularSpeed = RandomRange(system.minAngularSpeed, system.maxAngularSpeed);\r\n    particle.angle = RandomRange(system.minInitialRotation, system.maxInitialRotation);\r\n}\r\n\r\n/** @internal */\r\nexport function _CreateAngleGradientsData(particle: Particle, system: ThinParticleSystem) {\r\n    particle._currentAngularSpeedGradient = system._angularSpeedGradients![0];\r\n    particle.angularSpeed = particle._currentAngularSpeedGradient.getFactor();\r\n    particle._currentAngularSpeed1 = particle.angularSpeed;\r\n\r\n    if (system._angularSpeedGradients!.length > 1) {\r\n        particle._currentAngularSpeed2 = system._angularSpeedGradients![1].getFactor();\r\n    } else {\r\n        particle._currentAngularSpeed2 = particle._currentAngularSpeed1;\r\n    }\r\n    particle.angle = RandomRange(system.minInitialRotation, system.maxInitialRotation);\r\n}\r\n\r\n/** Sheet */\r\n\r\n/** @internal */\r\nexport function _CreateSheetData(particle: Particle, system: ThinParticleSystem) {\r\n    particle._initialStartSpriteCellId = system.startSpriteCellID;\r\n    particle._initialEndSpriteCellId = system.endSpriteCellID;\r\n    particle._initialSpriteCellLoop = system.spriteCellLoop;\r\n}\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Particle } from \"../particle\";\r\nimport type { ThinParticleSystem } from \"../thinParticleSystem\";\r\n\r\n/** @internal */\r\nexport interface _IExecutionQueueItem {\r\n    /** @internal */\r\n    process: (particle: Particle, system: ThinParticleSystem) => void;\r\n    /** @internal */\r\n    previousItem: Nullable<_IExecutionQueueItem>;\r\n    /** @internal */\r\n    nextItem: Nullable<_IExecutionQueueItem>;\r\n}\r\n\r\n/** @internal */\r\nexport function _ConnectBefore(newOne: _IExecutionQueueItem, activeOne: _IExecutionQueueItem) {\r\n    newOne.previousItem = activeOne.previousItem;\r\n    newOne.nextItem = activeOne;\r\n    if (activeOne.previousItem) {\r\n        activeOne.previousItem.nextItem = newOne;\r\n    }\r\n    activeOne.previousItem = newOne;\r\n}\r\n\r\n/** @internal */\r\nexport function _ConnectAfter(newOne: _IExecutionQueueItem, activeOne: _IExecutionQueueItem) {\r\n    newOne.previousItem = activeOne;\r\n    newOne.nextItem = activeOne.nextItem;\r\n    if (activeOne.nextItem) {\r\n        activeOne.nextItem.previousItem = newOne;\r\n    }\r\n    activeOne.nextItem = newOne;\r\n}\r\n\r\n/** @internal */\r\nexport function _ConnectAtTheEnd(newOne: _IExecutionQueueItem, root: _IExecutionQueueItem) {\r\n    let activeOne = root;\r\n    while (activeOne.nextItem) {\r\n        activeOne = activeOne.nextItem;\r\n    }\r\n    newOne.previousItem = activeOne;\r\n    newOne.nextItem = activeOne.nextItem;\r\n    activeOne.nextItem = newOne;\r\n}\r\n\r\n/** @internal */\r\nexport function _RemoveFromQueue(item: _IExecutionQueueItem) {\r\n    if (item.previousItem) {\r\n        item.previousItem.nextItem = item.nextItem;\r\n    }\r\n    if (item.nextItem) {\r\n        item.nextItem.previousItem = item.previousItem;\r\n    }\r\n}\r\n", "import type { Immutable, Nullable } from \"../types\";\r\nimport { FactorGradient, ColorGradient, Color3Gradient, GradientHelper } from \"../Misc/gradients\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Vector3, Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer\";\r\n\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { RawTexture } from \"../Materials/Textures/rawTexture\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { IDisposable, Scene } from \"../scene\";\r\n\r\nimport type { IParticleSystem } from \"./IParticleSystem\";\r\nimport { BaseParticleSystem } from \"./baseParticleSystem\";\r\nimport { Particle } from \"./particle\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport { DrawWrapper } from \"../Materials/drawWrapper\";\r\n\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { Color4, Color3, TmpColors } from \"../Maths/math.color\";\r\nimport type { ISize } from \"../Maths/math.size\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\n\r\nimport \"../Engines/Extensions/engine.alpha\";\r\nimport { AddClipPlaneUniforms, PrepareStringDefinesForClipPlanes, BindClipPlane } from \"../Materials/clipPlaneMaterialHelper\";\r\n\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { ProceduralTexture } from \"../Materials/Textures/Procedurals/proceduralTexture\";\r\nimport { BindFogParameters, BindLogDepth } from \"../Materials/materialHelper.functions\";\r\nimport { BoxParticleEmitter } from \"./EmitterTypes/boxParticleEmitter\";\r\nimport { Lerp } from \"../Maths/math.scalar.functions\";\r\nimport { PrepareSamplersForImageProcessing, PrepareUniformsForImageProcessing } from \"../Materials/imageProcessingConfiguration.functions\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { ShaderLanguage } from \"core/Materials/shaderLanguage\";\r\nimport {\r\n    _CreateAngleData,\r\n    _CreateAngleGradientsData,\r\n    _CreateColorData,\r\n    _CreateColorDeadData,\r\n    _CreateColorGradientsData,\r\n    _CreateCustomDirectionData,\r\n    _CreateCustomPositionData,\r\n    _CreateDirectionData,\r\n    _CreateDragData,\r\n    _CreateEmitPowerData,\r\n    _CreateIsLocalData,\r\n    _CreateLifeGradientsData,\r\n    _CreateLifetimeData,\r\n    _CreateLimitVelocityGradients,\r\n    _CreateNoiseData,\r\n    _CreatePositionData,\r\n    _CreateRampData,\r\n    _CreateSheetData,\r\n    _CreateSizeData,\r\n    _CreateSizeGradientsData,\r\n    _CreateStartSizeGradientsData,\r\n    _CreateVelocityGradients,\r\n    _ProcessAngularSpeed,\r\n    _ProcessAngularSpeedGradients,\r\n    _ProcessColor,\r\n    _ProcessColorGradients,\r\n    _ProcessDirection,\r\n    _ProcessDragGradients,\r\n    _ProcessGravity,\r\n    _ProcessLimitVelocityGradients,\r\n    _ProcessNoise,\r\n    _ProcessPosition,\r\n    _ProcessRemapGradients,\r\n    _ProcessSizeGradients,\r\n    _ProcessVelocityGradients,\r\n} from \"./thinParticleSystem.function\";\r\nimport type { _IExecutionQueueItem } from \"./Queue/executionQueue\";\r\nimport { _ConnectAfter, _ConnectBefore, _RemoveFromQueue } from \"./Queue/executionQueue\";\r\n\r\n/**\r\n * This represents a thin particle system in Babylon.\r\n * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\r\n * Particles can take different shapes while emitted like box, sphere, cone or you can write your custom function.\r\n * This thin version contains a limited subset of the total features in order to provide users with a way to get particles but with a smaller footprint\r\n * @example https://doc.babylonjs.com/features/featuresDeepDive/particles/particle_system/particle_system_intro\r\n */\r\nexport class ThinParticleSystem extends BaseParticleSystem implements IDisposable, IAnimatable, IParticleSystem {\r\n    /**\r\n     * Force all the particle systems to compile to glsl even on WebGPU engines.\r\n     * False by default. This is mostly meant for backward compatibility.\r\n     */\r\n    public static ForceGLSL = false;\r\n\r\n    /**\r\n     * This function can be defined to provide custom update for active particles.\r\n     * This function will be called instead of regular update (age, position, color, etc.).\r\n     * Do not forget that this function will be called on every frame so try to keep it simple and fast :)\r\n     */\r\n    public updateFunction: (particles: Particle[]) => void;\r\n\r\n    /** @internal */\r\n    public _emitterWorldMatrix: Matrix;\r\n    /** @internal */\r\n    public _emitterInverseWorldMatrix: Matrix = Matrix.Identity();\r\n\r\n    private _startDirectionFunction: Nullable<(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean) => void> = null;\r\n\r\n    /**\r\n     * This function can be defined to specify initial direction for every new particle.\r\n     * It by default use the emitterType defined function\r\n     */\r\n    public get startDirectionFunction(): Nullable<(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean) => void> {\r\n        return this._startDirectionFunction;\r\n    }\r\n\r\n    public set startDirectionFunction(value: Nullable<(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean) => void>) {\r\n        if (this._startDirectionFunction === value) {\r\n            return;\r\n        }\r\n        this._startDirectionFunction = value;\r\n\r\n        if (value) {\r\n            this._directionProcessing.process = _CreateCustomDirectionData;\r\n        } else {\r\n            this._directionProcessing.process = _CreateDirectionData;\r\n        }\r\n    }\r\n\r\n    private _startPositionFunction: Nullable<(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean) => void> = null;\r\n\r\n    /**\r\n     * This function can be defined to specify initial position for every new particle.\r\n     * It by default use the emitterType defined function\r\n     */\r\n    public get startPositionFunction(): Nullable<(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean) => void> {\r\n        return this._startPositionFunction;\r\n    }\r\n\r\n    public set startPositionFunction(value: Nullable<(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean) => void>) {\r\n        if (this._startPositionFunction === value) {\r\n            return;\r\n        }\r\n        this._startPositionFunction = value;\r\n\r\n        if (value) {\r\n            this._positionCreation.process = _CreateCustomPositionData;\r\n        } else {\r\n            this._positionCreation.process = _CreatePositionData;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _inheritedVelocityOffset = new Vector3();\r\n    /**\r\n     * An event triggered when the system is disposed\r\n     */\r\n    public onDisposeObservable = new Observable<IParticleSystem>();\r\n    /**\r\n     * An event triggered when the system is stopped\r\n     */\r\n    public onStoppedObservable = new Observable<IParticleSystem>();\r\n    /**\r\n     * An event triggered when the system is started\r\n     */\r\n    public onStartedObservable = new Observable<IParticleSystem>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<IParticleSystem>>;\r\n    /**\r\n     * Sets a callback that will be triggered when the system is disposed\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /** @internal */\r\n    public _noiseTextureSize: Nullable<ISize> = null;\r\n    /** @internal */\r\n    public _noiseTextureData: Nullable<Uint8Array> = null;\r\n    private _particles = new Array<Particle>();\r\n    private _epsilon: number;\r\n    private _capacity: number;\r\n    private _stockParticles = new Array<Particle>();\r\n    private _newPartsExcess = 0;\r\n    private _vertexData: Float32Array;\r\n    private _vertexBuffer: Nullable<Buffer>;\r\n    private _vertexBuffers: { [key: string]: VertexBuffer } = {};\r\n    private _spriteBuffer: Nullable<Buffer>;\r\n    private _indexBuffer: Nullable<DataBuffer>;\r\n    private _linesIndexBuffer: Nullable<DataBuffer>;\r\n    private _linesIndexBufferUseInstancing: Nullable<DataBuffer>;\r\n    private _drawWrappers: DrawWrapper[][]; // first index is render pass id, second index is blend mode\r\n    /** @internal */\r\n    public _customWrappers: { [blendMode: number]: Nullable<DrawWrapper> };\r\n    /** @internal */\r\n    public _scaledColorStep = new Color4(0, 0, 0, 0);\r\n    /** @internal */\r\n    public _colorDiff = new Color4(0, 0, 0, 0);\r\n    /** @internal */\r\n    public _scaledDirection = Vector3.Zero();\r\n    /** @internal */\r\n    public _scaledGravity = Vector3.Zero();\r\n    private _currentRenderId = -1;\r\n    private _alive: boolean;\r\n    private _useInstancing = false;\r\n    private _vertexArrayObject: Nullable<WebGLVertexArrayObject>;\r\n\r\n    private _isDisposed = false;\r\n\r\n    /**\r\n     * Gets a boolean indicating that the particle system was disposed\r\n     */\r\n    public get isDisposed(): boolean {\r\n        return this._isDisposed;\r\n    }\r\n\r\n    private _started = false;\r\n    private _stopped = false;\r\n    /** @internal */\r\n    public _actualFrame = 0;\r\n    /** @internal */\r\n    public _scaledUpdateSpeed: number;\r\n    private _vertexBufferSize: number;\r\n\r\n    /** @internal */\r\n    public _currentEmitRateGradient: Nullable<FactorGradient>;\r\n    /** @internal */\r\n    public _currentEmitRate1 = 0;\r\n    /** @internal */\r\n    public _currentEmitRate2 = 0;\r\n\r\n    /** @internal */\r\n    public _currentStartSizeGradient: Nullable<FactorGradient>;\r\n    /** @internal */\r\n    public _currentStartSize1 = 0;\r\n    /** @internal */\r\n    public _currentStartSize2 = 0;\r\n\r\n    /** Indicates that the update of particles is done in the animate function */\r\n    public readonly updateInAnimate = true;\r\n\r\n    private readonly _rawTextureWidth = 256;\r\n    private _rampGradientsTexture: Nullable<RawTexture>;\r\n    private _useRampGradients = false;\r\n\r\n    /** @internal */\r\n    public _updateQueueStart: Nullable<_IExecutionQueueItem> = null;\r\n    protected _colorProcessing: _IExecutionQueueItem;\r\n    protected _angularSpeedGradientProcessing: _IExecutionQueueItem;\r\n    protected _angularSpeedProcessing: _IExecutionQueueItem;\r\n    protected _velocityGradientProcessing: _IExecutionQueueItem;\r\n    protected _directionProcessing: _IExecutionQueueItem;\r\n    protected _limitVelocityGradientProcessing: _IExecutionQueueItem;\r\n    protected _positionProcessing: _IExecutionQueueItem;\r\n    protected _dragGradientProcessing: _IExecutionQueueItem;\r\n    protected _noiseProcessing: _IExecutionQueueItem;\r\n    protected _gravityProcessing: _IExecutionQueueItem;\r\n    protected _sizeGradientProcessing: _IExecutionQueueItem;\r\n    protected _remapGradientProcessing: _IExecutionQueueItem;\r\n\r\n    /** @internal */\r\n    public _lifeTimeCreation: _IExecutionQueueItem;\r\n    /** @internal */\r\n    public _positionCreation: _IExecutionQueueItem;\r\n    private _isLocalCreation: _IExecutionQueueItem;\r\n    /** @internal */\r\n    public _directionCreation: _IExecutionQueueItem;\r\n    private _emitPowerCreation: _IExecutionQueueItem;\r\n    /** @internal */\r\n    public _sizeCreation: _IExecutionQueueItem;\r\n    private _startSizeCreation: Nullable<_IExecutionQueueItem> = null;\r\n    /** @internal */\r\n    public _angleCreation: _IExecutionQueueItem;\r\n    private _velocityCreation: _IExecutionQueueItem;\r\n    private _limitVelocityCreation: _IExecutionQueueItem;\r\n    private _dragCreation: _IExecutionQueueItem;\r\n    /** @internal */\r\n    public _colorCreation: _IExecutionQueueItem;\r\n    /** @internal */\r\n    public _colorDeadCreation: _IExecutionQueueItem;\r\n    private _sheetCreation: _IExecutionQueueItem;\r\n    private _rampCreation: _IExecutionQueueItem;\r\n    private _noiseCreation: _IExecutionQueueItem;\r\n    private _createQueueStart: Nullable<_IExecutionQueueItem> = null;\r\n\r\n    /** @internal */\r\n    public _directionScale: number;\r\n    /** @internal */\r\n    public _tempScaledUpdateSpeed: number;\r\n    /** @internal */\r\n    public _ratio: number;\r\n    /** @internal */\r\n    public _emitPower: number;\r\n\r\n    /** Gets or sets a matrix to use to compute projection */\r\n    public defaultProjectionMatrix: Matrix;\r\n\r\n    /** Gets or sets a matrix to use to compute view */\r\n    public defaultViewMatrix: Matrix;\r\n\r\n    /** Gets or sets a boolean indicating that ramp gradients must be used\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/particles/particle_system/particle_system_intro#ramp-gradients\r\n     */\r\n    public get useRampGradients(): boolean {\r\n        return this._useRampGradients;\r\n    }\r\n\r\n    public set useRampGradients(value: boolean) {\r\n        if (this._useRampGradients === value) {\r\n            return;\r\n        }\r\n\r\n        this._useRampGradients = value;\r\n\r\n        this._resetEffect();\r\n\r\n        if (value) {\r\n            this._rampCreation = {\r\n                process: _CreateRampData,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n            _ConnectAfter(this._rampCreation, this._colorDeadCreation);\r\n            this._remapGradientProcessing = {\r\n                process: _ProcessRemapGradients,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n            _ConnectAfter(this._remapGradientProcessing, this._gravityProcessing);\r\n        } else {\r\n            _RemoveFromQueue(this._rampCreation);\r\n            _RemoveFromQueue(this._remapGradientProcessing);\r\n        }\r\n    }\r\n\r\n    private _isLocal = false;\r\n\r\n    /**\r\n     * Specifies if the particles are updated in emitter local space or world space\r\n     */\r\n    public get isLocal() {\r\n        return this._isLocal;\r\n    }\r\n\r\n    public set isLocal(value: boolean) {\r\n        if (this._isLocal === value) {\r\n            return;\r\n        }\r\n\r\n        this._isLocal = value;\r\n\r\n        if (value) {\r\n            this._isLocalCreation = {\r\n                process: _CreateIsLocalData,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n\r\n            _ConnectAfter(this._isLocalCreation, this._positionCreation);\r\n        } else {\r\n            _RemoveFromQueue(this._isLocalCreation);\r\n        }\r\n    }\r\n\r\n    /** Indicates that the particle system is CPU based */\r\n    public readonly isGPU = false;\r\n\r\n    /**\r\n     * Gets the current list of active particles\r\n     */\r\n    public get particles(): Particle[] {\r\n        return this._particles;\r\n    }\r\n\r\n    /** Shader language used by the material */\r\n    protected _shaderLanguage = ShaderLanguage.GLSL;\r\n\r\n    /**\r\n     * Gets the shader language used in this material.\r\n     */\r\n    public get shaderLanguage(): ShaderLanguage {\r\n        return this._shaderLanguage;\r\n    }\r\n\r\n    /** @internal */\r\n    public override get _isAnimationSheetEnabled() {\r\n        return this._animationSheetEnabled;\r\n    }\r\n\r\n    public override set _isAnimationSheetEnabled(value: boolean) {\r\n        if (this._animationSheetEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._animationSheetEnabled = value;\r\n\r\n        if (value) {\r\n            this._sheetCreation = {\r\n                process: _CreateSheetData,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n\r\n            _ConnectAfter(this._sheetCreation, this._colorDeadCreation);\r\n        } else {\r\n            _RemoveFromQueue(this._sheetCreation);\r\n        }\r\n\r\n        this._reset();\r\n    }\r\n\r\n    /**\r\n     * Gets the number of particles active at the same time.\r\n     * @returns The number of active particles.\r\n     */\r\n    public getActiveCount() {\r\n        return this._particles.length;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"ParticleSystem\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ParticleSystem\";\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the system is stopping\r\n     * @returns true if the system is currently stopping\r\n     */\r\n    public isStopping() {\r\n        return this._stopped && this.isAlive();\r\n    }\r\n\r\n    /**\r\n     * Gets the custom effect used to render the particles\r\n     * @param blendMode Blend mode for which the effect should be retrieved\r\n     * @returns The effect\r\n     */\r\n    public getCustomEffect(blendMode: number = 0): Nullable<Effect> {\r\n        return this._customWrappers[blendMode]?.effect ?? this._customWrappers[0]!.effect;\r\n    }\r\n\r\n    private _getCustomDrawWrapper(blendMode: number = 0): Nullable<DrawWrapper> {\r\n        return this._customWrappers[blendMode] ?? this._customWrappers[0];\r\n    }\r\n\r\n    /**\r\n     * Sets the custom effect used to render the particles\r\n     * @param effect The effect to set\r\n     * @param blendMode Blend mode for which the effect should be set\r\n     */\r\n    public setCustomEffect(effect: Nullable<Effect>, blendMode: number = 0) {\r\n        this._customWrappers[blendMode] = new DrawWrapper(this._engine);\r\n        this._customWrappers[blendMode].effect = effect;\r\n        if (this._customWrappers[blendMode].drawContext) {\r\n            this._customWrappers[blendMode].drawContext.useInstancing = this._useInstancing;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    private _onBeforeDrawParticlesObservable: Nullable<Observable<Nullable<Effect>>> = null;\r\n\r\n    /**\r\n     * Observable that will be called just before the particles are drawn\r\n     */\r\n    public get onBeforeDrawParticlesObservable(): Observable<Nullable<Effect>> {\r\n        if (!this._onBeforeDrawParticlesObservable) {\r\n            this._onBeforeDrawParticlesObservable = new Observable<Nullable<Effect>>();\r\n        }\r\n\r\n        return this._onBeforeDrawParticlesObservable;\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the particle vertex shader\r\n     */\r\n    public get vertexShaderName(): string {\r\n        return \"particles\";\r\n    }\r\n\r\n    /**\r\n     * Gets the vertex buffers used by the particle system\r\n     */\r\n    public get vertexBuffers(): Immutable<{ [key: string]: VertexBuffer }> {\r\n        return this._vertexBuffers;\r\n    }\r\n\r\n    /**\r\n     * Gets the index buffer used by the particle system (or null if no index buffer is used (if _useInstancing=true))\r\n     */\r\n    public get indexBuffer(): Nullable<DataBuffer> {\r\n        return this._indexBuffer;\r\n    }\r\n\r\n    public override get noiseTexture() {\r\n        return this._noiseTexture;\r\n    }\r\n\r\n    public override set noiseTexture(value: Nullable<ProceduralTexture>) {\r\n        if (this.noiseTexture === value) {\r\n            return;\r\n        }\r\n\r\n        this._noiseTexture = value;\r\n\r\n        if (!value) {\r\n            _RemoveFromQueue(this._noiseCreation);\r\n            _RemoveFromQueue(this._noiseProcessing);\r\n            return;\r\n        }\r\n\r\n        this._noiseCreation = {\r\n            process: _CreateNoiseData,\r\n            previousItem: null,\r\n            nextItem: null,\r\n        };\r\n        _ConnectAfter(this._noiseCreation, this._colorDeadCreation);\r\n\r\n        this._noiseProcessing = {\r\n            process: _ProcessNoise,\r\n            previousItem: null,\r\n            nextItem: null,\r\n        };\r\n        _ConnectAfter(this._noiseProcessing, this._positionProcessing);\r\n    }\r\n\r\n    /**\r\n     * Instantiates a particle system.\r\n     * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\r\n     * @param name The name of the particle system\r\n     * @param capacity The max number of particles alive at the same time\r\n     * @param sceneOrEngine The scene the particle system belongs to or the engine to use if no scene\r\n     * @param customEffect a custom effect used to change the way particles are rendered by default\r\n     * @param isAnimationSheetEnabled Must be true if using a spritesheet to animate the particles texture\r\n     * @param epsilon Offset used to render the particles\r\n     * @param noUpdateQueue If true, the particle system will start with an empty update queue\r\n     */\r\n    constructor(\r\n        name: string,\r\n        capacity: number,\r\n        sceneOrEngine: Scene | AbstractEngine,\r\n        customEffect: Nullable<Effect> = null,\r\n        isAnimationSheetEnabled: boolean = false,\r\n        epsilon: number = 0.01,\r\n        noUpdateQueue: boolean = false\r\n    ) {\r\n        super(name);\r\n\r\n        this._capacity = capacity;\r\n\r\n        this._epsilon = epsilon;\r\n\r\n        if (!sceneOrEngine || sceneOrEngine.getClassName() === \"Scene\") {\r\n            this._scene = (sceneOrEngine as Scene) || EngineStore.LastCreatedScene;\r\n            this._engine = this._scene.getEngine();\r\n            this.uniqueId = this._scene.getUniqueId();\r\n            this._scene.particleSystems.push(this);\r\n        } else {\r\n            this._engine = sceneOrEngine as AbstractEngine;\r\n            this.defaultProjectionMatrix = Matrix.PerspectiveFovLH(0.8, 1, 0.1, 100, this._engine.isNDCHalfZRange);\r\n        }\r\n\r\n        if (this._engine.getCaps().vertexArrayObject) {\r\n            this._vertexArrayObject = null;\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this._initShaderSourceAsync();\r\n\r\n        // Creation queue\r\n        this._lifeTimeCreation = {\r\n            process: _CreateLifetimeData,\r\n            previousItem: null,\r\n            nextItem: null,\r\n        };\r\n\r\n        this._positionCreation = {\r\n            process: _CreatePositionData,\r\n            previousItem: null,\r\n            nextItem: null,\r\n        };\r\n        _ConnectAfter(this._positionCreation, this._lifeTimeCreation);\r\n\r\n        this._directionCreation = {\r\n            process: _CreateDirectionData,\r\n            previousItem: null,\r\n            nextItem: null,\r\n        };\r\n        _ConnectAfter(this._directionCreation, this._positionCreation);\r\n\r\n        this._emitPowerCreation = {\r\n            process: _CreateEmitPowerData,\r\n            previousItem: null,\r\n            nextItem: null,\r\n        };\r\n        _ConnectAfter(this._emitPowerCreation, this._directionCreation);\r\n\r\n        this._sizeCreation = {\r\n            process: _CreateSizeData,\r\n            previousItem: null,\r\n            nextItem: null,\r\n        };\r\n        _ConnectAfter(this._sizeCreation, this._emitPowerCreation);\r\n\r\n        this._angleCreation = {\r\n            process: _CreateAngleData,\r\n            previousItem: null,\r\n            nextItem: null,\r\n        };\r\n        _ConnectAfter(this._angleCreation, this._sizeCreation);\r\n\r\n        this._colorCreation = {\r\n            process: _CreateColorData,\r\n            previousItem: null,\r\n            nextItem: null,\r\n        };\r\n        _ConnectAfter(this._colorCreation, this._angleCreation);\r\n\r\n        this._colorDeadCreation = {\r\n            process: _CreateColorDeadData,\r\n            previousItem: null,\r\n            nextItem: null,\r\n        };\r\n        _ConnectAfter(this._colorDeadCreation, this._colorCreation);\r\n\r\n        this._createQueueStart = this._lifeTimeCreation;\r\n\r\n        // Processing queue\r\n        if (!noUpdateQueue) {\r\n            this._colorProcessing = {\r\n                process: _ProcessColor,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n\r\n            this._angularSpeedProcessing = {\r\n                process: _ProcessAngularSpeed,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n            _ConnectAfter(this._angularSpeedProcessing, this._colorProcessing);\r\n\r\n            this._directionProcessing = {\r\n                process: _ProcessDirection,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n            _ConnectAfter(this._directionProcessing, this._angularSpeedProcessing);\r\n\r\n            this._positionProcessing = {\r\n                process: _ProcessPosition,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n            _ConnectAfter(this._positionProcessing, this._directionProcessing);\r\n\r\n            this._gravityProcessing = {\r\n                process: _ProcessGravity,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n\r\n            _ConnectAfter(this._gravityProcessing, this._positionProcessing);\r\n\r\n            this._updateQueueStart = this._colorProcessing;\r\n        }\r\n\r\n        this._isAnimationSheetEnabled = isAnimationSheetEnabled;\r\n\r\n        // Setup the default processing configuration to the scene.\r\n        this._attachImageProcessingConfiguration(null);\r\n\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        this._customWrappers = { 0: new DrawWrapper(this._engine) };\r\n        this._customWrappers[0]!.effect = customEffect;\r\n\r\n        this._drawWrappers = [];\r\n        this._useInstancing = this._engine.getCaps().instancedArrays;\r\n\r\n        this._createIndexBuffer();\r\n        this._createVertexBuffers();\r\n\r\n        // Default emitter type\r\n        this.particleEmitterType = new BoxParticleEmitter();\r\n\r\n        // Update\r\n        this.updateFunction = (particles: Particle[]): void => {\r\n            if (this.noiseTexture) {\r\n                // We need to get texture data back to CPU\r\n                this._noiseTextureSize = this.noiseTexture.getSize();\r\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\r\n                this.noiseTexture.getContent()?.then((data) => {\r\n                    this._noiseTextureData = data as Uint8Array;\r\n                });\r\n            }\r\n\r\n            const sameParticleArray = particles === this._particles;\r\n\r\n            for (let index = 0; index < particles.length; index++) {\r\n                const particle = particles[index];\r\n\r\n                this._tempScaledUpdateSpeed = this._scaledUpdateSpeed;\r\n                const previousAge = particle.age;\r\n                particle.age += this._tempScaledUpdateSpeed;\r\n\r\n                // Evaluate step to death\r\n                if (particle.age > particle.lifeTime) {\r\n                    const diff = particle.age - previousAge;\r\n                    const oldDiff = particle.lifeTime - previousAge;\r\n\r\n                    this._tempScaledUpdateSpeed = (oldDiff * this._tempScaledUpdateSpeed) / diff;\r\n\r\n                    particle.age = particle.lifeTime;\r\n                }\r\n\r\n                this._ratio = particle.age / particle.lifeTime;\r\n                this._directionScale = this._tempScaledUpdateSpeed;\r\n\r\n                // Processing queue\r\n                let currentQueueItem = this._updateQueueStart;\r\n\r\n                while (currentQueueItem) {\r\n                    currentQueueItem.process(particle, this);\r\n                    currentQueueItem = currentQueueItem.nextItem;\r\n                }\r\n\r\n                if (this._isAnimationSheetEnabled && !noUpdateQueue) {\r\n                    particle.updateCellIndex();\r\n                }\r\n\r\n                // Update the position of the attached sub-emitters to match their attached particle\r\n                particle._inheritParticleInfoToSubEmitters();\r\n\r\n                if (particle.age >= particle.lifeTime) {\r\n                    // Recycle by swapping with last particle\r\n                    this._emitFromParticle(particle);\r\n                    if (particle._attachedSubEmitters) {\r\n                        for (const subEmitter of particle._attachedSubEmitters) {\r\n                            subEmitter.particleSystem.disposeOnStop = true;\r\n                            subEmitter.particleSystem.stop();\r\n                        }\r\n                        particle._attachedSubEmitters = null;\r\n                    }\r\n                    this.recycleParticle(particle);\r\n                    if (sameParticleArray) {\r\n                        index--;\r\n                    }\r\n                    continue;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    /** @internal */\r\n    public _emitFromParticle: (particle: Particle) => void = (particle) => {\r\n        // Do nothing\r\n    };\r\n\r\n    serialize(serializeTexture: boolean) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Clones the particle system.\r\n     * @param name The name of the cloned object\r\n     * @param newEmitter The new emitter to use\r\n     * @param cloneTexture Also clone the textures if true\r\n     */\r\n    public clone(name: string, newEmitter: any, cloneTexture = false): ThinParticleSystem {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    private _addFactorGradient(factorGradients: FactorGradient[], gradient: number, factor: number, factor2?: number) {\r\n        const newGradient = new FactorGradient(gradient, factor, factor2);\r\n        factorGradients.push(newGradient);\r\n\r\n        factorGradients.sort((a, b) => {\r\n            if (a.gradient < b.gradient) {\r\n                return -1;\r\n            } else if (a.gradient > b.gradient) {\r\n                return 1;\r\n            }\r\n\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    private _removeFactorGradient(factorGradients: Nullable<FactorGradient[]>, gradient: number) {\r\n        if (!factorGradients) {\r\n            return;\r\n        }\r\n\r\n        let index = 0;\r\n        for (const factorGradient of factorGradients) {\r\n            if (factorGradient.gradient === gradient) {\r\n                factorGradients.splice(index, 1);\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n    }\r\n\r\n    private _syncLifeTimeCreation() {\r\n        if (this.targetStopDuration && this._lifeTimeGradients && this._lifeTimeGradients.length > 0) {\r\n            this._lifeTimeCreation.process = _CreateLifeGradientsData;\r\n            return;\r\n        }\r\n\r\n        this._lifeTimeCreation.process = _CreateLifetimeData;\r\n    }\r\n\r\n    private _syncStartSizeCreation() {\r\n        if (this._startSizeGradients && this._startSizeGradients[0] && this.targetStopDuration) {\r\n            if (!this._startSizeCreation) {\r\n                this._startSizeCreation = {\r\n                    process: _CreateStartSizeGradientsData,\r\n                    previousItem: null,\r\n                    nextItem: null,\r\n                };\r\n                _ConnectAfter(this._startSizeCreation, this._sizeCreation);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (this._startSizeCreation) {\r\n            _RemoveFromQueue(this._startSizeCreation);\r\n            this._startSizeCreation = null;\r\n        }\r\n    }\r\n\r\n    public override get targetStopDuration(): number {\r\n        return this._targetStopDuration;\r\n    }\r\n\r\n    public override set targetStopDuration(value: number) {\r\n        if (this.targetStopDuration === value) {\r\n            return;\r\n        }\r\n\r\n        this._targetStopDuration = value;\r\n\r\n        this._syncLifeTimeCreation();\r\n        this._syncStartSizeCreation();\r\n    }\r\n\r\n    /**\r\n     * Adds a new life time gradient\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param factor defines the life time factor to affect to the specified gradient\r\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\r\n     * @returns the current particle system\r\n     */\r\n    public addLifeTimeGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\r\n        if (!this._lifeTimeGradients) {\r\n            this._lifeTimeGradients = [];\r\n        }\r\n\r\n        this._addFactorGradient(this._lifeTimeGradients, gradient, factor, factor2);\r\n\r\n        this._syncLifeTimeCreation();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific life time gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeLifeTimeGradient(gradient: number): IParticleSystem {\r\n        this._removeFactorGradient(this._lifeTimeGradients, gradient);\r\n\r\n        this._syncLifeTimeCreation();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new size gradient\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param factor defines the size factor to affect to the specified gradient\r\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\r\n     * @returns the current particle system\r\n     */\r\n    public addSizeGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\r\n        if (!this._sizeGradients) {\r\n            this._sizeGradients = [];\r\n        }\r\n\r\n        if (this._sizeGradients.length === 0) {\r\n            this._sizeCreation.process = _CreateSizeGradientsData;\r\n\r\n            this._sizeGradientProcessing = {\r\n                process: _ProcessSizeGradients,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n            _ConnectBefore(this._sizeGradientProcessing, this._gravityProcessing);\r\n        }\r\n\r\n        this._addFactorGradient(this._sizeGradients, gradient, factor, factor2);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific size gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeSizeGradient(gradient: number): IParticleSystem {\r\n        this._removeFactorGradient(this._sizeGradients, gradient);\r\n\r\n        if (this._sizeGradients?.length === 0) {\r\n            _RemoveFromQueue(this._sizeGradientProcessing);\r\n            this._sizeCreation.process = _CreateSizeData;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new color remap gradient\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param min defines the color remap minimal range\r\n     * @param max defines the color remap maximal range\r\n     * @returns the current particle system\r\n     */\r\n    public addColorRemapGradient(gradient: number, min: number, max: number): IParticleSystem {\r\n        if (!this._colorRemapGradients) {\r\n            this._colorRemapGradients = [];\r\n        }\r\n\r\n        this._addFactorGradient(this._colorRemapGradients, gradient, min, max);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific color remap gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeColorRemapGradient(gradient: number): IParticleSystem {\r\n        this._removeFactorGradient(this._colorRemapGradients, gradient);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new alpha remap gradient\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param min defines the alpha remap minimal range\r\n     * @param max defines the alpha remap maximal range\r\n     * @returns the current particle system\r\n     */\r\n    public addAlphaRemapGradient(gradient: number, min: number, max: number): IParticleSystem {\r\n        if (!this._alphaRemapGradients) {\r\n            this._alphaRemapGradients = [];\r\n        }\r\n\r\n        this._addFactorGradient(this._alphaRemapGradients, gradient, min, max);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific alpha remap gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeAlphaRemapGradient(gradient: number): IParticleSystem {\r\n        this._removeFactorGradient(this._alphaRemapGradients, gradient);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new angular speed gradient\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param factor defines the angular speed  to affect to the specified gradient\r\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\r\n     * @returns the current particle system\r\n     */\r\n    public addAngularSpeedGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\r\n        if (!this._angularSpeedGradients) {\r\n            this._angularSpeedGradients = [];\r\n        }\r\n\r\n        if (this._angularSpeedGradients.length === 0) {\r\n            this._angleCreation.process = _CreateAngleGradientsData;\r\n\r\n            this._angularSpeedGradientProcessing = {\r\n                process: _ProcessAngularSpeedGradients,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n\r\n            _ConnectBefore(this._angularSpeedGradientProcessing, this._angularSpeedProcessing);\r\n        }\r\n\r\n        this._addFactorGradient(this._angularSpeedGradients, gradient, factor, factor2);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific angular speed gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeAngularSpeedGradient(gradient: number): IParticleSystem {\r\n        this._removeFactorGradient(this._angularSpeedGradients, gradient);\r\n\r\n        if (this._angularSpeedGradients?.length === 0) {\r\n            this._angleCreation.process = _CreateAngleData;\r\n            _RemoveFromQueue(this._angularSpeedGradientProcessing);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new velocity gradient\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param factor defines the velocity to affect to the specified gradient\r\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\r\n     * @returns the current particle system\r\n     */\r\n    public addVelocityGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\r\n        if (!this._velocityGradients) {\r\n            this._velocityGradients = [];\r\n        }\r\n\r\n        if (this._velocityGradients.length === 0) {\r\n            this._velocityCreation = {\r\n                process: _CreateVelocityGradients,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n            _ConnectAfter(this._velocityCreation, this._angleCreation);\r\n\r\n            this._velocityGradientProcessing = {\r\n                process: _ProcessVelocityGradients,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n            _ConnectBefore(this._velocityGradientProcessing, this._directionProcessing);\r\n        }\r\n\r\n        this._addFactorGradient(this._velocityGradients, gradient, factor, factor2);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific velocity gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeVelocityGradient(gradient: number): IParticleSystem {\r\n        this._removeFactorGradient(this._velocityGradients, gradient);\r\n\r\n        if (this._velocityGradients?.length === 0) {\r\n            _RemoveFromQueue(this._velocityCreation);\r\n            _RemoveFromQueue(this._velocityGradientProcessing);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new limit velocity gradient\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param factor defines the limit velocity value to affect to the specified gradient\r\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\r\n     * @returns the current particle system\r\n     */\r\n    public addLimitVelocityGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\r\n        if (!this._limitVelocityGradients) {\r\n            this._limitVelocityGradients = [];\r\n        }\r\n\r\n        if (this._limitVelocityGradients.length === 0) {\r\n            this._limitVelocityCreation = {\r\n                process: _CreateLimitVelocityGradients,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n            _ConnectAfter(this._limitVelocityCreation, this._angleCreation);\r\n\r\n            this._limitVelocityGradientProcessing = {\r\n                process: _ProcessLimitVelocityGradients,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n            _ConnectAfter(this._limitVelocityGradientProcessing, this._directionProcessing);\r\n        }\r\n\r\n        this._addFactorGradient(this._limitVelocityGradients, gradient, factor, factor2);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific limit velocity gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeLimitVelocityGradient(gradient: number): IParticleSystem {\r\n        this._removeFactorGradient(this._limitVelocityGradients, gradient);\r\n\r\n        if (this._limitVelocityGradients?.length === 0) {\r\n            _RemoveFromQueue(this._limitVelocityCreation);\r\n            _RemoveFromQueue(this._limitVelocityGradientProcessing);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new drag gradient\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param factor defines the drag value to affect to the specified gradient\r\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\r\n     * @returns the current particle system\r\n     */\r\n    public addDragGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\r\n        if (!this._dragGradients) {\r\n            this._dragGradients = [];\r\n        }\r\n\r\n        if (this._dragGradients.length === 0) {\r\n            this._dragCreation = {\r\n                process: _CreateDragData,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n            _ConnectBefore(this._dragCreation, this._colorDeadCreation);\r\n\r\n            this._dragGradientProcessing = {\r\n                process: _ProcessDragGradients,\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n            _ConnectBefore(this._dragGradientProcessing, this._positionProcessing);\r\n        }\r\n\r\n        this._addFactorGradient(this._dragGradients, gradient, factor, factor2);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific drag gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeDragGradient(gradient: number): IParticleSystem {\r\n        this._removeFactorGradient(this._dragGradients, gradient);\r\n\r\n        if (this._dragGradients?.length === 0) {\r\n            _RemoveFromQueue(this._dragCreation);\r\n            _RemoveFromQueue(this._dragGradientProcessing);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new emit rate gradient (please note that this will only work if you set the targetStopDuration property)\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param factor defines the emit rate value to affect to the specified gradient\r\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\r\n     * @returns the current particle system\r\n     */\r\n    public addEmitRateGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\r\n        if (!this._emitRateGradients) {\r\n            this._emitRateGradients = [];\r\n        }\r\n\r\n        this._addFactorGradient(this._emitRateGradients, gradient, factor, factor2);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific emit rate gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeEmitRateGradient(gradient: number): IParticleSystem {\r\n        this._removeFactorGradient(this._emitRateGradients, gradient);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new start size gradient (please note that this will only work if you set the targetStopDuration property)\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param factor defines the start size value to affect to the specified gradient\r\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\r\n     * @returns the current particle system\r\n     */\r\n    public addStartSizeGradient(gradient: number, factor: number, factor2?: number): IParticleSystem {\r\n        if (!this._startSizeGradients) {\r\n            this._startSizeGradients = [];\r\n        }\r\n\r\n        this._addFactorGradient(this._startSizeGradients, gradient, factor, factor2);\r\n\r\n        this._syncStartSizeCreation();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific start size gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeStartSizeGradient(gradient: number): IParticleSystem {\r\n        this._removeFactorGradient(this._startSizeGradients, gradient);\r\n\r\n        this._syncStartSizeCreation();\r\n\r\n        return this;\r\n    }\r\n\r\n    private _createRampGradientTexture() {\r\n        if (!this._rampGradients || !this._rampGradients.length || this._rampGradientsTexture || !this._scene) {\r\n            return;\r\n        }\r\n\r\n        const data = new Uint8Array(this._rawTextureWidth * 4);\r\n        const tmpColor = TmpColors.Color3[0];\r\n\r\n        for (let x = 0; x < this._rawTextureWidth; x++) {\r\n            const ratio = x / this._rawTextureWidth;\r\n\r\n            GradientHelper.GetCurrentGradient(ratio, this._rampGradients, (currentGradient, nextGradient, scale) => {\r\n                Color3.LerpToRef((<Color3Gradient>currentGradient).color, (<Color3Gradient>nextGradient).color, scale, tmpColor);\r\n                data[x * 4] = tmpColor.r * 255;\r\n                data[x * 4 + 1] = tmpColor.g * 255;\r\n                data[x * 4 + 2] = tmpColor.b * 255;\r\n                data[x * 4 + 3] = 255;\r\n            });\r\n        }\r\n\r\n        this._rampGradientsTexture = RawTexture.CreateRGBATexture(data, this._rawTextureWidth, 1, this._scene, false, false, Constants.TEXTURE_NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    /**\r\n     * Gets the current list of ramp gradients.\r\n     * You must use addRampGradient and removeRampGradient to update this list\r\n     * @returns the list of ramp gradients\r\n     */\r\n    public getRampGradients(): Nullable<Array<Color3Gradient>> {\r\n        return this._rampGradients;\r\n    }\r\n\r\n    /** Force the system to rebuild all gradients that need to be resync */\r\n    public forceRefreshGradients() {\r\n        this._syncRampGradientTexture();\r\n    }\r\n\r\n    private _syncRampGradientTexture() {\r\n        if (!this._rampGradients) {\r\n            return;\r\n        }\r\n\r\n        this._rampGradients.sort((a, b) => {\r\n            if (a.gradient < b.gradient) {\r\n                return -1;\r\n            } else if (a.gradient > b.gradient) {\r\n                return 1;\r\n            }\r\n\r\n            return 0;\r\n        });\r\n\r\n        if (this._rampGradientsTexture) {\r\n            this._rampGradientsTexture.dispose();\r\n            this._rampGradientsTexture = null;\r\n        }\r\n\r\n        this._createRampGradientTexture();\r\n    }\r\n\r\n    /**\r\n     * Adds a new ramp gradient used to remap particle colors\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param color defines the color to affect to the specified gradient\r\n     * @returns the current particle system\r\n     */\r\n    public addRampGradient(gradient: number, color: Color3): ThinParticleSystem {\r\n        if (!this._rampGradients) {\r\n            this._rampGradients = [];\r\n        }\r\n\r\n        const rampGradient = new Color3Gradient(gradient, color);\r\n        this._rampGradients.push(rampGradient);\r\n\r\n        this._syncRampGradientTexture();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific ramp gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns the current particle system\r\n     */\r\n    public removeRampGradient(gradient: number): ThinParticleSystem {\r\n        this._removeGradientAndTexture(gradient, this._rampGradients, this._rampGradientsTexture);\r\n        this._rampGradientsTexture = null;\r\n\r\n        if (this._rampGradients && this._rampGradients.length > 0) {\r\n            this._createRampGradientTexture();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new color gradient\r\n     * @param gradient defines the gradient to use (between 0 and 1)\r\n     * @param color1 defines the color to affect to the specified gradient\r\n     * @param color2 defines an additional color used to define a range ([color, color2]) with main color to pick the final color from\r\n     * @returns this particle system\r\n     */\r\n    public addColorGradient(gradient: number, color1: Color4, color2?: Color4): IParticleSystem {\r\n        if (!this._colorGradients) {\r\n            this._colorGradients = [];\r\n        }\r\n\r\n        if (this._colorGradients.length === 0) {\r\n            this._colorCreation.process = _CreateColorGradientsData;\r\n            this._colorProcessing.process = _ProcessColorGradients;\r\n        }\r\n\r\n        const colorGradient = new ColorGradient(gradient, color1, color2);\r\n        this._colorGradients.push(colorGradient);\r\n\r\n        this._colorGradients.sort((a, b) => {\r\n            if (a.gradient < b.gradient) {\r\n                return -1;\r\n            } else if (a.gradient > b.gradient) {\r\n                return 1;\r\n            }\r\n\r\n            return 0;\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific color gradient\r\n     * @param gradient defines the gradient to remove\r\n     * @returns this particle system\r\n     */\r\n    public removeColorGradient(gradient: number): IParticleSystem {\r\n        if (!this._colorGradients) {\r\n            return this;\r\n        }\r\n\r\n        let index = 0;\r\n        for (const colorGradient of this._colorGradients) {\r\n            if (colorGradient.gradient === gradient) {\r\n                this._colorGradients.splice(index, 1);\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        if (this._colorGradients.length === 0) {\r\n            this._colorCreation.process = _CreateColorData;\r\n            this._colorProcessing.process = _ProcessColor;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Resets the draw wrappers cache\r\n     */\r\n    public resetDrawCache(): void {\r\n        if (!this._drawWrappers) {\r\n            return;\r\n        }\r\n        for (const drawWrappers of this._drawWrappers) {\r\n            if (drawWrappers) {\r\n                for (const drawWrapper of drawWrappers) {\r\n                    drawWrapper?.dispose();\r\n                }\r\n            }\r\n        }\r\n\r\n        this._drawWrappers = [];\r\n    }\r\n\r\n    /** @internal */\r\n    public _fetchR(u: number, v: number, width: number, height: number, pixels: Uint8Array): number {\r\n        u = Math.abs(u) * 0.5 + 0.5;\r\n        v = Math.abs(v) * 0.5 + 0.5;\r\n\r\n        const wrappedU = (u * width) % width | 0;\r\n        const wrappedV = (v * height) % height | 0;\r\n\r\n        const position = (wrappedU + wrappedV * width) * 4;\r\n        return pixels[position] / 255;\r\n    }\r\n\r\n    protected override _reset() {\r\n        this._resetEffect();\r\n    }\r\n\r\n    private _resetEffect() {\r\n        if (this._vertexBuffer) {\r\n            this._vertexBuffer.dispose();\r\n            this._vertexBuffer = null;\r\n        }\r\n\r\n        if (this._spriteBuffer) {\r\n            this._spriteBuffer.dispose();\r\n            this._spriteBuffer = null;\r\n        }\r\n\r\n        if (this._vertexArrayObject) {\r\n            (this._engine as ThinEngine).releaseVertexArrayObject(this._vertexArrayObject);\r\n            this._vertexArrayObject = null;\r\n        }\r\n\r\n        this._createVertexBuffers();\r\n    }\r\n\r\n    private _createVertexBuffers() {\r\n        this._vertexBufferSize = this._useInstancing ? 10 : 12;\r\n        if (this._isAnimationSheetEnabled) {\r\n            this._vertexBufferSize += 1;\r\n        }\r\n\r\n        if (\r\n            !this._isBillboardBased ||\r\n            this.billboardMode === Constants.PARTICLES_BILLBOARDMODE_STRETCHED ||\r\n            this.billboardMode === Constants.PARTICLES_BILLBOARDMODE_STRETCHED_LOCAL\r\n        ) {\r\n            this._vertexBufferSize += 3;\r\n        }\r\n\r\n        if (this._useRampGradients) {\r\n            this._vertexBufferSize += 4;\r\n        }\r\n\r\n        const engine = this._engine;\r\n        const vertexSize = this._vertexBufferSize * (this._useInstancing ? 1 : 4);\r\n        this._vertexData = new Float32Array(this._capacity * vertexSize);\r\n        this._vertexBuffer = new Buffer(engine, this._vertexData, true, vertexSize);\r\n\r\n        let dataOffset = 0;\r\n        const positions = this._vertexBuffer.createVertexBuffer(VertexBuffer.PositionKind, dataOffset, 3, this._vertexBufferSize, this._useInstancing);\r\n        this._vertexBuffers[VertexBuffer.PositionKind] = positions;\r\n        dataOffset += 3;\r\n\r\n        const colors = this._vertexBuffer.createVertexBuffer(VertexBuffer.ColorKind, dataOffset, 4, this._vertexBufferSize, this._useInstancing);\r\n        this._vertexBuffers[VertexBuffer.ColorKind] = colors;\r\n        dataOffset += 4;\r\n\r\n        const options = this._vertexBuffer.createVertexBuffer(\"angle\", dataOffset, 1, this._vertexBufferSize, this._useInstancing);\r\n        this._vertexBuffers[\"angle\"] = options;\r\n        dataOffset += 1;\r\n\r\n        const size = this._vertexBuffer.createVertexBuffer(\"size\", dataOffset, 2, this._vertexBufferSize, this._useInstancing);\r\n        this._vertexBuffers[\"size\"] = size;\r\n        dataOffset += 2;\r\n\r\n        if (this._isAnimationSheetEnabled) {\r\n            const cellIndexBuffer = this._vertexBuffer.createVertexBuffer(\"cellIndex\", dataOffset, 1, this._vertexBufferSize, this._useInstancing);\r\n            this._vertexBuffers[\"cellIndex\"] = cellIndexBuffer;\r\n            dataOffset += 1;\r\n        }\r\n\r\n        if (\r\n            !this._isBillboardBased ||\r\n            this.billboardMode === Constants.PARTICLES_BILLBOARDMODE_STRETCHED ||\r\n            this.billboardMode === Constants.PARTICLES_BILLBOARDMODE_STRETCHED_LOCAL\r\n        ) {\r\n            const directionBuffer = this._vertexBuffer.createVertexBuffer(\"direction\", dataOffset, 3, this._vertexBufferSize, this._useInstancing);\r\n            this._vertexBuffers[\"direction\"] = directionBuffer;\r\n            dataOffset += 3;\r\n        }\r\n\r\n        if (this._useRampGradients) {\r\n            const rampDataBuffer = this._vertexBuffer.createVertexBuffer(\"remapData\", dataOffset, 4, this._vertexBufferSize, this._useInstancing);\r\n            this._vertexBuffers[\"remapData\"] = rampDataBuffer;\r\n            dataOffset += 4;\r\n        }\r\n\r\n        let offsets: VertexBuffer;\r\n        if (this._useInstancing) {\r\n            const spriteData = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\r\n            this._spriteBuffer = new Buffer(engine, spriteData, false, 2);\r\n            offsets = this._spriteBuffer.createVertexBuffer(\"offset\", 0, 2);\r\n        } else {\r\n            offsets = this._vertexBuffer.createVertexBuffer(\"offset\", dataOffset, 2, this._vertexBufferSize, this._useInstancing);\r\n            dataOffset += 2;\r\n        }\r\n        this._vertexBuffers[\"offset\"] = offsets;\r\n\r\n        this.resetDrawCache();\r\n    }\r\n\r\n    private _createIndexBuffer() {\r\n        if (this._useInstancing) {\r\n            this._linesIndexBufferUseInstancing = this._engine.createIndexBuffer(new Uint32Array([0, 1, 1, 3, 3, 2, 2, 0, 0, 3]));\r\n            return;\r\n        }\r\n        const indices = [];\r\n        const indicesWireframe = [];\r\n        let index = 0;\r\n        for (let count = 0; count < this._capacity; count++) {\r\n            indices.push(index);\r\n            indices.push(index + 1);\r\n            indices.push(index + 2);\r\n            indices.push(index);\r\n            indices.push(index + 2);\r\n            indices.push(index + 3);\r\n            indicesWireframe.push(index, index + 1, index + 1, index + 2, index + 2, index + 3, index + 3, index, index, index + 3);\r\n            index += 4;\r\n        }\r\n\r\n        this._indexBuffer = this._engine.createIndexBuffer(indices);\r\n        this._linesIndexBuffer = this._engine.createIndexBuffer(indicesWireframe);\r\n    }\r\n\r\n    /**\r\n     * Gets the maximum number of particles active at the same time.\r\n     * @returns The max number of active particles.\r\n     */\r\n    public getCapacity(): number {\r\n        return this._capacity;\r\n    }\r\n\r\n    /**\r\n     * Gets whether there are still active particles in the system.\r\n     * @returns True if it is alive, otherwise false.\r\n     */\r\n    public isAlive(): boolean {\r\n        return this._alive;\r\n    }\r\n\r\n    /**\r\n     * Gets if the system has been started. (Note: this will still be true after stop is called)\r\n     * @returns True if it has been started, otherwise false.\r\n     */\r\n    public isStarted(): boolean {\r\n        return this._started;\r\n    }\r\n\r\n    /** @internal */\r\n    public _preStart() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Starts the particle system and begins to emit\r\n     * @param delay defines the delay in milliseconds before starting the system (this.startDelay by default)\r\n     */\r\n    public start(delay = this.startDelay): void {\r\n        if (!this.targetStopDuration && this._hasTargetStopDurationDependantGradient()) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"Particle system started with a targetStopDuration dependant gradient (eg. startSizeGradients) but no targetStopDuration set\";\r\n        }\r\n        if (delay) {\r\n            setTimeout(() => {\r\n                this.start(0);\r\n            }, delay);\r\n            return;\r\n        }\r\n        this._started = true;\r\n        this._stopped = false;\r\n        this._actualFrame = 0;\r\n\r\n        this._preStart();\r\n\r\n        // Reset emit gradient so it acts the same on every start\r\n        if (this._emitRateGradients) {\r\n            if (this._emitRateGradients.length > 0) {\r\n                this._currentEmitRateGradient = this._emitRateGradients[0];\r\n                this._currentEmitRate1 = this._currentEmitRateGradient.getFactor();\r\n                this._currentEmitRate2 = this._currentEmitRate1;\r\n            }\r\n            if (this._emitRateGradients.length > 1) {\r\n                this._currentEmitRate2 = this._emitRateGradients[1].getFactor();\r\n            }\r\n        }\r\n        // Reset start size gradient so it acts the same on every start\r\n        if (this._startSizeGradients) {\r\n            if (this._startSizeGradients.length > 0) {\r\n                this._currentStartSizeGradient = this._startSizeGradients[0];\r\n                this._currentStartSize1 = this._currentStartSizeGradient.getFactor();\r\n                this._currentStartSize2 = this._currentStartSize1;\r\n            }\r\n            if (this._startSizeGradients.length > 1) {\r\n                this._currentStartSize2 = this._startSizeGradients[1].getFactor();\r\n            }\r\n        }\r\n\r\n        if (this.preWarmCycles) {\r\n            if (this.emitter?.getClassName().indexOf(\"Mesh\") !== -1) {\r\n                (this.emitter as any).computeWorldMatrix(true);\r\n            }\r\n\r\n            const noiseTextureAsProcedural = this.noiseTexture as ProceduralTexture;\r\n\r\n            if (noiseTextureAsProcedural && noiseTextureAsProcedural.onGeneratedObservable) {\r\n                noiseTextureAsProcedural.onGeneratedObservable.addOnce(() => {\r\n                    setTimeout(() => {\r\n                        for (let index = 0; index < this.preWarmCycles; index++) {\r\n                            this.animate(true);\r\n                            noiseTextureAsProcedural.render();\r\n                        }\r\n                    });\r\n                });\r\n            } else {\r\n                for (let index = 0; index < this.preWarmCycles; index++) {\r\n                    this.animate(true);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Animations\r\n        if (this.beginAnimationOnStart && this.animations && this.animations.length > 0 && this._scene) {\r\n            this._scene.beginAnimation(this, this.beginAnimationFrom, this.beginAnimationTo, this.beginAnimationLoop);\r\n        }\r\n\r\n        this.onStartedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Stops the particle system.\r\n     * @param stopSubEmitters if true it will stop the current system and all created sub-Systems if false it will stop the current root system only, this param is used by the root particle system only. The default value is true.\r\n     */\r\n    public stop(stopSubEmitters = true): void {\r\n        if (this._stopped) {\r\n            return;\r\n        }\r\n\r\n        this.onStoppedObservable.notifyObservers(this);\r\n\r\n        this._stopped = true;\r\n\r\n        this._postStop(stopSubEmitters);\r\n    }\r\n\r\n    /** @internal */\r\n    public _postStop(_stopSubEmitters: boolean) {\r\n        // Do nothing\r\n    }\r\n\r\n    // Animation sheet\r\n\r\n    /**\r\n     * Remove all active particles\r\n     */\r\n    public reset(): void {\r\n        this._stockParticles.length = 0;\r\n        this._particles.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @internal (for internal use only)\r\n     */\r\n    public _appendParticleVertex(index: number, particle: Particle, offsetX: number, offsetY: number): void {\r\n        let offset = index * this._vertexBufferSize;\r\n\r\n        const floatingOriginOffset = TmpVectors.Vector3[0].copyFrom(this._scene?.floatingOriginOffset || Vector3.ZeroReadOnly);\r\n        this._vertexData[offset++] = particle.position.x + this.worldOffset.x - floatingOriginOffset.x;\r\n        this._vertexData[offset++] = particle.position.y + this.worldOffset.y - floatingOriginOffset.y;\r\n        this._vertexData[offset++] = particle.position.z + this.worldOffset.z - floatingOriginOffset.z;\r\n        this._vertexData[offset++] = particle.color.r;\r\n        this._vertexData[offset++] = particle.color.g;\r\n        this._vertexData[offset++] = particle.color.b;\r\n        this._vertexData[offset++] = particle.color.a;\r\n        this._vertexData[offset++] = particle.angle;\r\n\r\n        this._vertexData[offset++] = particle.scale.x * particle.size;\r\n        this._vertexData[offset++] = particle.scale.y * particle.size;\r\n\r\n        if (this._isAnimationSheetEnabled) {\r\n            this._vertexData[offset++] = particle.cellIndex;\r\n        }\r\n\r\n        if (!this._isBillboardBased) {\r\n            if (particle._initialDirection) {\r\n                let initialDirection = particle._initialDirection;\r\n                if (this.isLocal) {\r\n                    Vector3.TransformNormalToRef(initialDirection, this._emitterWorldMatrix, TmpVectors.Vector3[0]);\r\n                    initialDirection = TmpVectors.Vector3[0];\r\n                }\r\n                if (initialDirection.x === 0 && initialDirection.z === 0) {\r\n                    initialDirection.x = 0.001;\r\n                }\r\n\r\n                this._vertexData[offset++] = initialDirection.x;\r\n                this._vertexData[offset++] = initialDirection.y;\r\n                this._vertexData[offset++] = initialDirection.z;\r\n            } else {\r\n                let direction = particle.direction;\r\n                if (this.isLocal) {\r\n                    Vector3.TransformNormalToRef(direction, this._emitterWorldMatrix, TmpVectors.Vector3[0]);\r\n                    direction = TmpVectors.Vector3[0];\r\n                }\r\n\r\n                if (direction.x === 0 && direction.z === 0) {\r\n                    direction.x = 0.001;\r\n                }\r\n                this._vertexData[offset++] = direction.x;\r\n                this._vertexData[offset++] = direction.y;\r\n                this._vertexData[offset++] = direction.z;\r\n            }\r\n        } else if (this.billboardMode === Constants.PARTICLES_BILLBOARDMODE_STRETCHED || this.billboardMode === Constants.PARTICLES_BILLBOARDMODE_STRETCHED_LOCAL) {\r\n            this._vertexData[offset++] = particle.direction.x;\r\n            this._vertexData[offset++] = particle.direction.y;\r\n            this._vertexData[offset++] = particle.direction.z;\r\n        }\r\n\r\n        if (this._useRampGradients && particle.remapData) {\r\n            this._vertexData[offset++] = particle.remapData.x;\r\n            this._vertexData[offset++] = particle.remapData.y;\r\n            this._vertexData[offset++] = particle.remapData.z;\r\n            this._vertexData[offset++] = particle.remapData.w;\r\n        }\r\n\r\n        if (!this._useInstancing) {\r\n            if (this._isAnimationSheetEnabled) {\r\n                if (offsetX === 0) {\r\n                    offsetX = this._epsilon;\r\n                } else if (offsetX === 1) {\r\n                    offsetX = 1 - this._epsilon;\r\n                }\r\n\r\n                if (offsetY === 0) {\r\n                    offsetY = this._epsilon;\r\n                } else if (offsetY === 1) {\r\n                    offsetY = 1 - this._epsilon;\r\n                }\r\n            }\r\n\r\n            this._vertexData[offset++] = offsetX;\r\n            this._vertexData[offset++] = offsetY;\r\n        }\r\n    }\r\n\r\n    // start of sub system methods\r\n\r\n    /**\r\n     * \"Recycles\" one of the particle by copying it back to the \"stock\" of particles and removing it from the active list.\r\n     * Its lifetime will start back at 0.\r\n     * @param particle\r\n     */\r\n    public recycleParticle: (particle: Particle) => void = (particle) => {\r\n        // move particle from activeParticle list to stock particles\r\n        const lastParticle = <Particle>this._particles.pop();\r\n        if (lastParticle !== particle) {\r\n            lastParticle.copyTo(particle);\r\n        }\r\n        this._stockParticles.push(lastParticle);\r\n    };\r\n\r\n    private _createParticle: () => Particle = () => {\r\n        let particle: Particle;\r\n        if (this._stockParticles.length !== 0) {\r\n            particle = <Particle>this._stockParticles.pop();\r\n            particle._reset();\r\n        } else {\r\n            particle = new Particle(this);\r\n        }\r\n\r\n        this._prepareParticle(particle);\r\n        return particle;\r\n    };\r\n\r\n    /** @internal */\r\n    public _prepareParticle(_particle: Particle) {\r\n        //Do nothing\r\n    }\r\n\r\n    private _createNewOnes(newParticles: number) {\r\n        // Add new ones\r\n        let particle: Particle;\r\n        for (let index = 0; index < newParticles; index++) {\r\n            if (this._particles.length === this._capacity) {\r\n                break;\r\n            }\r\n\r\n            particle = this._createParticle();\r\n\r\n            this._particles.push(particle);\r\n\r\n            // Creation queue\r\n            let currentQueueItem = this._createQueueStart;\r\n\r\n            while (currentQueueItem) {\r\n                currentQueueItem.process(particle, this);\r\n                currentQueueItem = currentQueueItem.nextItem;\r\n            }\r\n\r\n            // Update the position of the attached sub-emitters to match their attached particle\r\n            particle._inheritParticleInfoToSubEmitters();\r\n        }\r\n    }\r\n\r\n    private _update(newParticles: number): void {\r\n        // Update current\r\n        this._alive = this._particles.length > 0;\r\n\r\n        if ((<AbstractMesh>this.emitter).position) {\r\n            const emitterMesh = <AbstractMesh>this.emitter;\r\n            this._emitterWorldMatrix = emitterMesh.getWorldMatrix();\r\n        } else {\r\n            const emitterPosition = <Vector3>this.emitter;\r\n            this._emitterWorldMatrix = Matrix.Translation(emitterPosition.x, emitterPosition.y, emitterPosition.z);\r\n        }\r\n\r\n        this._emitterWorldMatrix.invertToRef(this._emitterInverseWorldMatrix);\r\n        this.updateFunction(this._particles);\r\n\r\n        this._createNewOnes(newParticles);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _GetAttributeNamesOrOptions(isAnimationSheetEnabled = false, isBillboardBased = false, useRampGradients = false): string[] {\r\n        const attributeNamesOrOptions = [VertexBuffer.PositionKind, VertexBuffer.ColorKind, \"angle\", \"offset\", \"size\"];\r\n\r\n        if (isAnimationSheetEnabled) {\r\n            attributeNamesOrOptions.push(\"cellIndex\");\r\n        }\r\n\r\n        if (!isBillboardBased) {\r\n            attributeNamesOrOptions.push(\"direction\");\r\n        }\r\n\r\n        if (useRampGradients) {\r\n            attributeNamesOrOptions.push(\"remapData\");\r\n        }\r\n\r\n        return attributeNamesOrOptions;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _GetEffectCreationOptions(isAnimationSheetEnabled = false, useLogarithmicDepth = false, applyFog = false): string[] {\r\n        const effectCreationOption = [\"invView\", \"view\", \"projection\", \"textureMask\", \"translationPivot\", \"eyePosition\"];\r\n\r\n        AddClipPlaneUniforms(effectCreationOption);\r\n\r\n        if (isAnimationSheetEnabled) {\r\n            effectCreationOption.push(\"particlesInfos\");\r\n        }\r\n        if (useLogarithmicDepth) {\r\n            effectCreationOption.push(\"logarithmicDepthConstant\");\r\n        }\r\n\r\n        if (applyFog) {\r\n            effectCreationOption.push(\"vFogInfos\");\r\n            effectCreationOption.push(\"vFogColor\");\r\n        }\r\n\r\n        return effectCreationOption;\r\n    }\r\n\r\n    /**\r\n     * Fill the defines array according to the current settings of the particle system\r\n     * @param defines Array to be updated\r\n     * @param blendMode blend mode to take into account when updating the array\r\n     * @param fillImageProcessing fills the image processing defines\r\n     */\r\n    public fillDefines(defines: Array<string>, blendMode: number, fillImageProcessing: boolean = true): void {\r\n        if (this._scene) {\r\n            PrepareStringDefinesForClipPlanes(this, this._scene, defines);\r\n            if (this.applyFog && this._scene.fogEnabled && this._scene.fogMode !== Constants.FOGMODE_NONE) {\r\n                defines.push(\"#define FOG\");\r\n            }\r\n        }\r\n\r\n        if (this._isAnimationSheetEnabled) {\r\n            defines.push(\"#define ANIMATESHEET\");\r\n        }\r\n\r\n        if (this.useLogarithmicDepth) {\r\n            defines.push(\"#define LOGARITHMICDEPTH\");\r\n        }\r\n\r\n        if (blendMode === BaseParticleSystem.BLENDMODE_MULTIPLY) {\r\n            defines.push(\"#define BLENDMULTIPLYMODE\");\r\n        }\r\n\r\n        if (this._useRampGradients) {\r\n            defines.push(\"#define RAMPGRADIENT\");\r\n        }\r\n\r\n        if (this._isBillboardBased) {\r\n            defines.push(\"#define BILLBOARD\");\r\n\r\n            switch (this.billboardMode) {\r\n                case Constants.PARTICLES_BILLBOARDMODE_Y:\r\n                    defines.push(\"#define BILLBOARDY\");\r\n                    break;\r\n                case Constants.PARTICLES_BILLBOARDMODE_STRETCHED:\r\n                case Constants.PARTICLES_BILLBOARDMODE_STRETCHED_LOCAL:\r\n                    defines.push(\"#define BILLBOARDSTRETCHED\");\r\n                    if (this.billboardMode === Constants.PARTICLES_BILLBOARDMODE_STRETCHED_LOCAL) {\r\n                        defines.push(\"#define BILLBOARDSTRETCHED_LOCAL\");\r\n                    }\r\n                    break;\r\n                case Constants.PARTICLES_BILLBOARDMODE_ALL:\r\n                    defines.push(\"#define BILLBOARDMODE_ALL\");\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (fillImageProcessing && this._imageProcessingConfiguration) {\r\n            this._imageProcessingConfiguration.prepareDefines(this._imageProcessingConfigurationDefines);\r\n            defines.push(this._imageProcessingConfigurationDefines.toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fill the uniforms, attributes and samplers arrays according to the current settings of the particle system\r\n     * @param uniforms Uniforms array to fill\r\n     * @param attributes Attributes array to fill\r\n     * @param samplers Samplers array to fill\r\n     */\r\n    public fillUniformsAttributesAndSamplerNames(uniforms: Array<string>, attributes: Array<string>, samplers: Array<string>) {\r\n        attributes.push(\r\n            ...ThinParticleSystem._GetAttributeNamesOrOptions(\r\n                this._isAnimationSheetEnabled,\r\n                this._isBillboardBased &&\r\n                    this.billboardMode !== Constants.PARTICLES_BILLBOARDMODE_STRETCHED &&\r\n                    this.billboardMode !== Constants.PARTICLES_BILLBOARDMODE_STRETCHED_LOCAL,\r\n                this._useRampGradients\r\n            )\r\n        );\r\n\r\n        uniforms.push(...ThinParticleSystem._GetEffectCreationOptions(this._isAnimationSheetEnabled, this.useLogarithmicDepth, this.applyFog));\r\n\r\n        samplers.push(\"diffuseSampler\", \"rampSampler\");\r\n\r\n        if (this._imageProcessingConfiguration) {\r\n            PrepareUniformsForImageProcessing(uniforms, this._imageProcessingConfigurationDefines);\r\n            PrepareSamplersForImageProcessing(samplers, this._imageProcessingConfigurationDefines);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _getWrapper(blendMode: number): DrawWrapper {\r\n        const customWrapper = this._getCustomDrawWrapper(blendMode);\r\n\r\n        if (customWrapper?.effect) {\r\n            return customWrapper;\r\n        }\r\n\r\n        const defines: Array<string> = [];\r\n\r\n        this.fillDefines(defines, blendMode);\r\n\r\n        // Effect\r\n        const currentRenderPassId = this._engine._features.supportRenderPasses ? this._engine.currentRenderPassId : Constants.RENDERPASS_MAIN;\r\n        let drawWrappers = this._drawWrappers[currentRenderPassId];\r\n        if (!drawWrappers) {\r\n            drawWrappers = this._drawWrappers[currentRenderPassId] = [];\r\n        }\r\n        let drawWrapper = drawWrappers[blendMode];\r\n        if (!drawWrapper) {\r\n            drawWrapper = new DrawWrapper(this._engine);\r\n            if (drawWrapper.drawContext) {\r\n                drawWrapper.drawContext.useInstancing = this._useInstancing;\r\n            }\r\n            drawWrappers[blendMode] = drawWrapper;\r\n        }\r\n\r\n        const join = defines.join(\"\\n\");\r\n        if (drawWrapper.defines !== join) {\r\n            const attributesNamesOrOptions: Array<string> = [];\r\n            const effectCreationOption: Array<string> = [];\r\n            const samplers: Array<string> = [];\r\n\r\n            this.fillUniformsAttributesAndSamplerNames(effectCreationOption, attributesNamesOrOptions, samplers);\r\n\r\n            drawWrapper.setEffect(\r\n                this._engine.createEffect(\r\n                    \"particles\",\r\n                    attributesNamesOrOptions,\r\n                    effectCreationOption,\r\n                    samplers,\r\n                    join,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    this._shaderLanguage\r\n                ),\r\n                join\r\n            );\r\n        }\r\n\r\n        return drawWrapper;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the particle system is paused (no animation will be done).\r\n     */\r\n    public paused = false;\r\n\r\n    /**\r\n     * Animates the particle system for the current frame by emitting new particles and or animating the living ones.\r\n     * @param preWarmOnly will prevent the system from updating the vertex buffer (default is false)\r\n     */\r\n    public animate(preWarmOnly = false): void {\r\n        if (!this._started || this.paused) {\r\n            return;\r\n        }\r\n\r\n        if (!preWarmOnly && this._scene) {\r\n            // Check\r\n            if (!this.isReady()) {\r\n                return;\r\n            }\r\n\r\n            if (this._currentRenderId === this._scene.getFrameId()) {\r\n                return;\r\n            }\r\n            this._currentRenderId = this._scene.getFrameId();\r\n        }\r\n\r\n        this._scaledUpdateSpeed = this.updateSpeed * (preWarmOnly ? this.preWarmStepOffset : this._scene?.getAnimationRatio() || 1);\r\n\r\n        // Determine the number of particles we need to create\r\n        let newParticles;\r\n\r\n        if (this.manualEmitCount > -1) {\r\n            newParticles = this.manualEmitCount;\r\n            this._newPartsExcess = 0;\r\n            this.manualEmitCount = 0;\r\n        } else {\r\n            let rate = this.emitRate;\r\n\r\n            if (this._emitRateGradients && this._emitRateGradients.length > 0 && this.targetStopDuration) {\r\n                const ratio = this._actualFrame / this.targetStopDuration;\r\n                GradientHelper.GetCurrentGradient(ratio, this._emitRateGradients, (currentGradient, nextGradient, scale) => {\r\n                    if (currentGradient !== this._currentEmitRateGradient) {\r\n                        this._currentEmitRate1 = this._currentEmitRate2;\r\n                        this._currentEmitRate2 = (<FactorGradient>nextGradient).getFactor();\r\n                        this._currentEmitRateGradient = <FactorGradient>currentGradient;\r\n                    }\r\n\r\n                    rate = Lerp(this._currentEmitRate1, this._currentEmitRate2, scale);\r\n                });\r\n            }\r\n\r\n            newParticles = (rate * this._scaledUpdateSpeed) >> 0;\r\n            this._newPartsExcess += rate * this._scaledUpdateSpeed - newParticles;\r\n        }\r\n\r\n        if (this._newPartsExcess > 1.0) {\r\n            newParticles += this._newPartsExcess >> 0;\r\n            this._newPartsExcess -= this._newPartsExcess >> 0;\r\n        }\r\n\r\n        this._alive = false;\r\n\r\n        if (!this._stopped) {\r\n            this._actualFrame += this._scaledUpdateSpeed;\r\n\r\n            if (this.targetStopDuration && this._actualFrame >= this.targetStopDuration) {\r\n                this.stop();\r\n            }\r\n        } else {\r\n            newParticles = 0;\r\n        }\r\n        this._update(newParticles);\r\n\r\n        // Stopped?\r\n        if (this._stopped) {\r\n            if (!this._alive) {\r\n                this._started = false;\r\n                if (this.onAnimationEnd) {\r\n                    this.onAnimationEnd();\r\n                }\r\n                if (this.disposeOnStop && this._scene) {\r\n                    this._scene._toBeDisposed.push(this);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!preWarmOnly) {\r\n            // Update VBO\r\n            let offset = 0;\r\n            for (let index = 0; index < this._particles.length; index++) {\r\n                const particle = this._particles[index];\r\n                this._appendParticleVertices(offset, particle);\r\n                offset += this._useInstancing ? 1 : 4;\r\n            }\r\n\r\n            if (this._vertexBuffer) {\r\n                this._vertexBuffer.updateDirectly(this._vertexData, 0, this._particles.length);\r\n            }\r\n        }\r\n\r\n        if (this.manualEmitCount === 0 && this.disposeOnStop) {\r\n            this.stop();\r\n        }\r\n    }\r\n\r\n    private _appendParticleVertices(offset: number, particle: Particle) {\r\n        this._appendParticleVertex(offset++, particle, 0, 0);\r\n        if (!this._useInstancing) {\r\n            this._appendParticleVertex(offset++, particle, 1, 0);\r\n            this._appendParticleVertex(offset++, particle, 1, 1);\r\n            this._appendParticleVertex(offset++, particle, 0, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the particle system.\r\n     */\r\n    public rebuild(): void {\r\n        if (this._engine.getCaps().vertexArrayObject) {\r\n            this._vertexArrayObject = null;\r\n        }\r\n\r\n        this._createIndexBuffer();\r\n\r\n        this._spriteBuffer?._rebuild();\r\n\r\n        this._createVertexBuffers();\r\n\r\n        this.resetDrawCache();\r\n    }\r\n\r\n    private _shadersLoaded = false;\r\n    private async _initShaderSourceAsync() {\r\n        const engine = this._engine;\r\n\r\n        if (engine.isWebGPU && !ThinParticleSystem.ForceGLSL) {\r\n            this._shaderLanguage = ShaderLanguage.WGSL;\r\n\r\n            await Promise.all([import(\"../ShadersWGSL/particles.vertex\"), import(\"../ShadersWGSL/particles.fragment\")]);\r\n        } else {\r\n            await Promise.all([import(\"../Shaders/particles.vertex\"), import(\"../Shaders/particles.fragment\")]);\r\n        }\r\n\r\n        this._shadersLoaded = true;\r\n    }\r\n\r\n    /**\r\n     * Is this system ready to be used/rendered\r\n     * @returns true if the system is ready\r\n     */\r\n    public isReady(): boolean {\r\n        if (!this._shadersLoaded) {\r\n            return false;\r\n        }\r\n        if (!this.emitter || (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.isReady()) || !this.particleTexture || !this.particleTexture.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        if (this.blendMode !== BaseParticleSystem.BLENDMODE_MULTIPLYADD) {\r\n            if (!this._getWrapper(this.blendMode).effect!.isReady()) {\r\n                return false;\r\n            }\r\n        } else {\r\n            if (!this._getWrapper(BaseParticleSystem.BLENDMODE_MULTIPLY).effect!.isReady()) {\r\n                return false;\r\n            }\r\n            if (!this._getWrapper(BaseParticleSystem.BLENDMODE_ADD).effect!.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _render(blendMode: number) {\r\n        const drawWrapper = this._getWrapper(blendMode);\r\n        const effect = drawWrapper.effect!;\r\n\r\n        const engine = this._engine;\r\n\r\n        // Render\r\n        engine.enableEffect(drawWrapper);\r\n\r\n        const viewMatrix = this.defaultViewMatrix ?? this._scene!.getViewMatrix();\r\n        effect.setTexture(\"diffuseSampler\", this.particleTexture);\r\n        effect.setMatrix(\"view\", viewMatrix);\r\n        effect.setMatrix(\"projection\", this.defaultProjectionMatrix ?? this._scene!.getProjectionMatrix());\r\n\r\n        if (this._isAnimationSheetEnabled && this.particleTexture) {\r\n            const baseSize = this.particleTexture.getBaseSize();\r\n            effect.setFloat3(\"particlesInfos\", this.spriteCellWidth / baseSize.width, this.spriteCellHeight / baseSize.height, this.spriteCellWidth / baseSize.width);\r\n        }\r\n\r\n        effect.setVector2(\"translationPivot\", this.translationPivot);\r\n        effect.setFloat4(\"textureMask\", this.textureMask.r, this.textureMask.g, this.textureMask.b, this.textureMask.a);\r\n\r\n        if (this._isBillboardBased && this._scene) {\r\n            const camera = this._scene.activeCamera!;\r\n            effect.setVector3(\"eyePosition\", camera.globalPosition);\r\n        }\r\n\r\n        if (this._rampGradientsTexture) {\r\n            if (!this._rampGradients || !this._rampGradients.length) {\r\n                this._rampGradientsTexture.dispose();\r\n                this._rampGradientsTexture = null;\r\n            }\r\n            effect.setTexture(\"rampSampler\", this._rampGradientsTexture);\r\n        }\r\n\r\n        const defines = effect.defines;\r\n\r\n        if (this._scene) {\r\n            BindClipPlane(effect, this, this._scene);\r\n\r\n            if (this.applyFog) {\r\n                BindFogParameters(this._scene, undefined, effect);\r\n            }\r\n        }\r\n\r\n        if (defines.indexOf(\"#define BILLBOARDMODE_ALL\") >= 0) {\r\n            viewMatrix.invertToRef(TmpVectors.Matrix[0]);\r\n            effect.setMatrix(\"invView\", TmpVectors.Matrix[0]);\r\n        }\r\n\r\n        if (this._vertexArrayObject !== undefined) {\r\n            if (this._scene?.forceWireframe) {\r\n                engine.bindBuffers(this._vertexBuffers, this._linesIndexBufferUseInstancing, effect);\r\n            } else {\r\n                if (!this._vertexArrayObject) {\r\n                    this._vertexArrayObject = (this._engine as ThinEngine).recordVertexArrayObject(this._vertexBuffers, this._indexBuffer, effect);\r\n                }\r\n\r\n                (this._engine as ThinEngine).bindVertexArrayObject(this._vertexArrayObject, this._indexBuffer);\r\n            }\r\n        } else {\r\n            if (!this._indexBuffer) {\r\n                // Use instancing mode\r\n                engine.bindBuffers(this._vertexBuffers, this._scene?.forceWireframe ? this._linesIndexBufferUseInstancing : null, effect);\r\n            } else {\r\n                engine.bindBuffers(this._vertexBuffers, this._scene?.forceWireframe ? this._linesIndexBuffer : this._indexBuffer, effect);\r\n            }\r\n        }\r\n\r\n        // Log. depth\r\n        if (this.useLogarithmicDepth && this._scene) {\r\n            BindLogDepth(defines, effect, this._scene);\r\n        }\r\n\r\n        // image processing\r\n        if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\r\n            this._imageProcessingConfiguration.bind(effect);\r\n        }\r\n\r\n        // Draw order\r\n        this._setEngineBasedOnBlendMode(blendMode);\r\n\r\n        if (this._onBeforeDrawParticlesObservable) {\r\n            this._onBeforeDrawParticlesObservable.notifyObservers(effect);\r\n        }\r\n\r\n        if (this._useInstancing) {\r\n            if (this._scene?.forceWireframe) {\r\n                engine.drawElementsType(Constants.MATERIAL_LineStripDrawMode, 0, 10, this._particles.length);\r\n            } else {\r\n                engine.drawArraysType(Constants.MATERIAL_TriangleStripDrawMode, 0, 4, this._particles.length);\r\n            }\r\n        } else {\r\n            if (this._scene?.forceWireframe) {\r\n                engine.drawElementsType(Constants.MATERIAL_WireFrameFillMode, 0, this._particles.length * 10);\r\n            } else {\r\n                engine.drawElementsType(Constants.MATERIAL_TriangleFillMode, 0, this._particles.length * 6);\r\n            }\r\n        }\r\n\r\n        return this._particles.length;\r\n    }\r\n\r\n    /**\r\n     * Renders the particle system in its current state.\r\n     * @returns the current number of particles\r\n     */\r\n    public render(): number {\r\n        // Check\r\n        if (!this.isReady() || !this._particles.length) {\r\n            return 0;\r\n        }\r\n\r\n        const engine = this._engine as any;\r\n        if (engine.setState) {\r\n            engine.setState(false);\r\n\r\n            if (this.forceDepthWrite) {\r\n                engine.setDepthWrite(true);\r\n            }\r\n        }\r\n\r\n        let outparticles = 0;\r\n\r\n        if (this.blendMode === BaseParticleSystem.BLENDMODE_MULTIPLYADD) {\r\n            outparticles = this._render(BaseParticleSystem.BLENDMODE_MULTIPLY) + this._render(BaseParticleSystem.BLENDMODE_ADD);\r\n        } else {\r\n            outparticles = this._render(this.blendMode);\r\n        }\r\n\r\n        this._engine.unbindInstanceAttributes();\r\n        this._engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n\r\n        return outparticles;\r\n    }\r\n\r\n    /** @internal */\r\n    public _onDispose(_disposeAttachedSubEmitters = false, _disposeEndSubEmitters = false) {\r\n        // Do Nothing\r\n    }\r\n\r\n    /**\r\n     * Disposes the particle system and free the associated resources\r\n     * @param disposeTexture defines if the particle texture must be disposed as well (true by default)\r\n     * @param disposeAttachedSubEmitters defines if the attached sub-emitters must be disposed as well (false by default)\r\n     * @param disposeEndSubEmitters defines if the end type sub-emitters must be disposed as well (false by default)\r\n     */\r\n    public dispose(disposeTexture = true, disposeAttachedSubEmitters = false, disposeEndSubEmitters = false): void {\r\n        this.resetDrawCache();\r\n\r\n        if (this._vertexBuffer) {\r\n            this._vertexBuffer.dispose();\r\n            this._vertexBuffer = null;\r\n        }\r\n\r\n        if (this._spriteBuffer) {\r\n            this._spriteBuffer.dispose();\r\n            this._spriteBuffer = null;\r\n        }\r\n\r\n        if (this._indexBuffer) {\r\n            this._engine._releaseBuffer(this._indexBuffer);\r\n            this._indexBuffer = null;\r\n        }\r\n\r\n        if (this._linesIndexBuffer) {\r\n            this._engine._releaseBuffer(this._linesIndexBuffer);\r\n            this._linesIndexBuffer = null;\r\n        }\r\n\r\n        if (this._linesIndexBufferUseInstancing) {\r\n            this._engine._releaseBuffer(this._linesIndexBufferUseInstancing);\r\n            this._linesIndexBufferUseInstancing = null;\r\n        }\r\n\r\n        if (this._vertexArrayObject) {\r\n            (this._engine as ThinEngine).releaseVertexArrayObject(this._vertexArrayObject);\r\n            this._vertexArrayObject = null;\r\n        }\r\n\r\n        if (disposeTexture && this.particleTexture) {\r\n            this.particleTexture.dispose();\r\n            this.particleTexture = null;\r\n        }\r\n\r\n        if (disposeTexture && this.noiseTexture) {\r\n            this.noiseTexture.dispose();\r\n            this.noiseTexture = null;\r\n        }\r\n\r\n        if (this._rampGradientsTexture) {\r\n            this._rampGradientsTexture.dispose();\r\n            this._rampGradientsTexture = null;\r\n        }\r\n\r\n        this._onDispose(disposeAttachedSubEmitters, disposeEndSubEmitters);\r\n\r\n        if (this._onBeforeDrawParticlesObservable) {\r\n            this._onBeforeDrawParticlesObservable.clear();\r\n        }\r\n\r\n        // Remove from scene\r\n        if (this._scene) {\r\n            const index = this._scene.particleSystems.indexOf(this);\r\n            if (index > -1) {\r\n                this._scene.particleSystems.splice(index, 1);\r\n            }\r\n\r\n            this._scene._activeParticleSystems.dispose();\r\n        }\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n        this.onDisposeObservable.clear();\r\n        this.onStoppedObservable.clear();\r\n        this.onStartedObservable.clear();\r\n\r\n        this.reset();\r\n\r\n        this._isDisposed = true;\r\n    }\r\n}\r\n", "import { Vector3 } from \"../Maths/math.vector\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { ParticleSystem } from \"../Particles/particleSystem\";\r\n\r\n/**\r\n * Type of sub emitter\r\n */\r\nexport const enum SubEmitterType {\r\n    /**\r\n     * Attached to the particle over it's lifetime\r\n     */\r\n    ATTACHED,\r\n    /**\r\n     * Created when the particle dies\r\n     */\r\n    END,\r\n}\r\n\r\n/**\r\n * Sub emitter class used to emit particles from an existing particle\r\n */\r\nexport class SubEmitter {\r\n    /**\r\n     * Type of the submitter (Default: END)\r\n     */\r\n    public type = SubEmitterType.END;\r\n    /**\r\n     * If the particle should inherit the direction from the particle it's attached to. (+Y will face the direction the particle is moving) (Default: false)\r\n     * Note: This only is supported when using an emitter of type Mesh\r\n     */\r\n    public inheritDirection = false;\r\n    /**\r\n     * How much of the attached particles speed should be added to the sub emitted particle (default: 0)\r\n     */\r\n    public inheritedVelocityAmount = 0;\r\n\r\n    /**\r\n     * Creates a sub emitter\r\n     * @param particleSystem the particle system to be used by the sub emitter\r\n     */\r\n    constructor(\r\n        /**\r\n         * the particle system to be used by the sub emitter\r\n         */\r\n        public particleSystem: ParticleSystem\r\n    ) {\r\n        // Create mesh as emitter to support rotation\r\n        if (!particleSystem.emitter || !(<AbstractMesh>particleSystem.emitter).dispose) {\r\n            const internalClass = GetClass(\"BABYLON.AbstractMesh\");\r\n            particleSystem.emitter = new internalClass(\"SubemitterSystemEmitter\", particleSystem.getScene());\r\n            particleSystem._disposeEmitterOnDispose = true;\r\n        }\r\n    }\r\n    /**\r\n     * Clones the sub emitter\r\n     * @returns the cloned sub emitter\r\n     */\r\n    public clone(): SubEmitter {\r\n        // Clone particle system\r\n        let emitter = this.particleSystem.emitter;\r\n        if (!emitter) {\r\n            emitter = new Vector3();\r\n        } else if (emitter instanceof Vector3) {\r\n            emitter = emitter.clone();\r\n        } else if (emitter.getClassName().indexOf(\"Mesh\") !== -1) {\r\n            const internalClass = GetClass(\"BABYLON.Mesh\");\r\n            emitter = new internalClass(\"\", emitter.getScene());\r\n            (emitter! as any).isVisible = false;\r\n        }\r\n        const clone = new SubEmitter(this.particleSystem.clone(this.particleSystem.name, emitter));\r\n\r\n        // Clone properties\r\n        clone.particleSystem.name += \"Clone\";\r\n        clone.type = this.type;\r\n        clone.inheritDirection = this.inheritDirection;\r\n        clone.inheritedVelocityAmount = this.inheritedVelocityAmount;\r\n\r\n        clone.particleSystem._disposeEmitterOnDispose = true;\r\n        clone.particleSystem.disposeOnStop = true;\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Serialize current object to a JSON object\r\n     * @param serializeTexture defines if the texture must be serialized as well\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(serializeTexture: boolean = false): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.type = this.type;\r\n        serializationObject.inheritDirection = this.inheritDirection;\r\n        serializationObject.inheritedVelocityAmount = this.inheritedVelocityAmount;\r\n        serializationObject.particleSystem = this.particleSystem.serialize(serializeTexture);\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _ParseParticleSystem(system: any, sceneOrEngine: Scene | AbstractEngine, rootUrl: string, doNotStart = false): ParticleSystem {\r\n        throw _WarnImport(\"ParseParticle\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new SubEmitter from a serialized JSON version\r\n     * @param serializationObject defines the JSON object to read from\r\n     * @param sceneOrEngine defines the hosting scene or the hosting engine\r\n     * @param rootUrl defines the rootUrl for data loading\r\n     * @returns a new SubEmitter\r\n     */\r\n    public static Parse(serializationObject: any, sceneOrEngine: Scene | AbstractEngine, rootUrl: string): SubEmitter {\r\n        const system = serializationObject.particleSystem;\r\n        const subEmitter = new SubEmitter(SubEmitter._ParseParticleSystem(system, sceneOrEngine, rootUrl, true));\r\n        subEmitter.type = serializationObject.type;\r\n        subEmitter.inheritDirection = serializationObject.inheritDirection;\r\n        subEmitter.inheritedVelocityAmount = serializationObject.inheritedVelocityAmount;\r\n        subEmitter.particleSystem._isSubEmitter = true;\r\n\r\n        return subEmitter;\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose() {\r\n        this.particleSystem.dispose();\r\n    }\r\n}\r\n", "import { DeepCopier } from \"../../Misc/deepCopier\";\r\nimport type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector3, TmpVectors } from \"../../Maths/math.vector\";\r\nimport { RandomRange } from \"../../Maths/math.scalar.functions\";\r\nimport type { Particle } from \"../../Particles/particle\";\r\nimport type { IParticleEmitterType } from \"./IParticleEmitterType\";\r\nimport type { IndicesArray, Nullable, FloatArray } from \"../../types\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { UniformBufferEffectCommonAccessor } from \"../../Materials/uniformBufferEffectCommonAccessor\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\n/**\r\n * Particle emitter emitting particles from the inside of a box.\r\n * It emits the particles randomly between 2 given directions.\r\n */\r\nexport class MeshParticleEmitter implements IParticleEmitterType {\r\n    private _indices: Nullable<IndicesArray> = null;\r\n    private _positions: Nullable<FloatArray> = null;\r\n    private _normals: Nullable<FloatArray> = null;\r\n    private _storedNormal = Vector3.Zero();\r\n    private _mesh: Nullable<AbstractMesh> = null;\r\n\r\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     */\r\n    public direction1 = new Vector3(0, 1.0, 0);\r\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     */\r\n    public direction2 = new Vector3(0, 1.0, 0);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that particle directions must be built from mesh face normals\r\n     */\r\n    public useMeshNormalsForDirection = true;\r\n\r\n    /** Defines the mesh to use as source */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (value) {\r\n            this._indices = value.getIndices();\r\n            this._positions = value.getVerticesData(VertexBuffer.PositionKind);\r\n            this._normals = value.getVerticesData(VertexBuffer.NormalKind);\r\n        } else {\r\n            this._indices = null;\r\n            this._positions = null;\r\n            this._normals = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance MeshParticleEmitter\r\n     * @param mesh defines the mesh to use as source\r\n     */\r\n    constructor(mesh: Nullable<AbstractMesh> = null) {\r\n        this.mesh = mesh;\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param directionToUpdate is the direction vector to update with the result\r\n     * @param particle is the particle we are computed the direction for\r\n     * @param isLocal defines if the direction should be set in local space\r\n     */\r\n    public startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        if (this.useMeshNormalsForDirection && this._normals) {\r\n            Vector3.TransformNormalToRef(this._storedNormal, worldMatrix, directionToUpdate);\r\n            return;\r\n        }\r\n\r\n        const randX = RandomRange(this.direction1.x, this.direction2.x);\r\n        const randY = RandomRange(this.direction1.y, this.direction2.y);\r\n        const randZ = RandomRange(this.direction1.z, this.direction2.z);\r\n\r\n        if (isLocal) {\r\n            directionToUpdate.copyFromFloats(randX, randY, randZ);\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the position is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param positionToUpdate is the position vector to update with the result\r\n     * @param particle is the particle we are computed the position for\r\n     * @param isLocal defines if the position should be set in local space\r\n     */\r\n    public startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        if (!this._indices || !this._positions) {\r\n            return;\r\n        }\r\n\r\n        const randomFaceIndex = 3 * ((Math.random() * (this._indices.length / 3)) | 0);\r\n        const bu = Math.random();\r\n        const bv = Math.random() * (1.0 - bu);\r\n        const bw = 1.0 - bu - bv;\r\n\r\n        const faceIndexA = this._indices[randomFaceIndex];\r\n        const faceIndexB = this._indices[randomFaceIndex + 1];\r\n        const faceIndexC = this._indices[randomFaceIndex + 2];\r\n        const vertexA = TmpVectors.Vector3[0];\r\n        const vertexB = TmpVectors.Vector3[1];\r\n        const vertexC = TmpVectors.Vector3[2];\r\n        const randomVertex = TmpVectors.Vector3[3];\r\n\r\n        Vector3.FromArrayToRef(this._positions, faceIndexA * 3, vertexA);\r\n        Vector3.FromArrayToRef(this._positions, faceIndexB * 3, vertexB);\r\n        Vector3.FromArrayToRef(this._positions, faceIndexC * 3, vertexC);\r\n\r\n        randomVertex.x = bu * vertexA.x + bv * vertexB.x + bw * vertexC.x;\r\n        randomVertex.y = bu * vertexA.y + bv * vertexB.y + bw * vertexC.y;\r\n        randomVertex.z = bu * vertexA.z + bv * vertexB.z + bw * vertexC.z;\r\n\r\n        if (isLocal) {\r\n            positionToUpdate.copyFromFloats(randomVertex.x, randomVertex.y, randomVertex.z);\r\n        } else {\r\n            Vector3.TransformCoordinatesFromFloatsToRef(randomVertex.x, randomVertex.y, randomVertex.z, worldMatrix, positionToUpdate);\r\n        }\r\n\r\n        if (this.useMeshNormalsForDirection && this._normals) {\r\n            Vector3.FromArrayToRef(this._normals, faceIndexA * 3, vertexA);\r\n            Vector3.FromArrayToRef(this._normals, faceIndexB * 3, vertexB);\r\n            Vector3.FromArrayToRef(this._normals, faceIndexC * 3, vertexC);\r\n\r\n            this._storedNormal.x = bu * vertexA.x + bv * vertexB.x + bw * vertexC.x;\r\n            this._storedNormal.y = bu * vertexA.y + bv * vertexB.y + bw * vertexC.y;\r\n            this._storedNormal.z = bu * vertexA.z + bv * vertexB.z + bw * vertexC.z;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the current emitter and returns a copy of it\r\n     * @returns the new emitter\r\n     */\r\n    public clone(): MeshParticleEmitter {\r\n        const newOne = new MeshParticleEmitter(this.mesh);\r\n\r\n        DeepCopier.DeepCopy(this, newOne);\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Called by the GPUParticleSystem to setup the update shader\r\n     * @param uboOrEffect defines the update shader\r\n     */\r\n    public applyToShader(uboOrEffect: UniformBufferEffectCommonAccessor): void {\r\n        uboOrEffect.setVector3(\"direction1\", this.direction1);\r\n        uboOrEffect.setVector3(\"direction2\", this.direction2);\r\n    }\r\n\r\n    /**\r\n     * Creates the structure of the ubo for this particle emitter\r\n     * @param ubo ubo to create the structure for\r\n     */\r\n    public buildUniformLayout(ubo: UniformBuffer): void {\r\n        ubo.addUniform(\"direction1\", 3);\r\n        ubo.addUniform(\"direction2\", 3);\r\n    }\r\n\r\n    /**\r\n     * Returns a string to use to update the GPU particles update shader\r\n     * @returns a string containing the defines string\r\n     */\r\n    public getEffectDefines(): string {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"BoxParticleEmitter\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"MeshParticleEmitter\";\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object.\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.type = this.getClassName();\r\n        serializationObject.direction1 = this.direction1.asArray();\r\n        serializationObject.direction2 = this.direction2.asArray();\r\n        serializationObject.meshId = this.mesh?.id;\r\n        serializationObject.useMeshNormalsForDirection = this.useMeshNormalsForDirection;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse properties from a JSON object\r\n     * @param serializationObject defines the JSON object\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public parse(serializationObject: any, scene: Nullable<Scene>): void {\r\n        Vector3.FromArrayToRef(serializationObject.direction1, 0, this.direction1);\r\n        Vector3.FromArrayToRef(serializationObject.direction2, 0, this.direction2);\r\n\r\n        if (serializationObject.meshId && scene) {\r\n            this.mesh = scene.getLastMeshById(serializationObject.meshId);\r\n        }\r\n\r\n        this.useMeshNormalsForDirection = serializationObject.useMeshNormalsForDirection;\r\n    }\r\n}\r\n", "import { DeepCopier } from \"../../Misc/deepCopier\";\r\nimport type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { RandomRange } from \"../../Maths/math.scalar.functions\";\r\nimport type { Particle } from \"../../Particles/particle\";\r\nimport type { IParticleEmitterType } from \"./IParticleEmitterType\";\r\nimport type { UniformBufferEffectCommonAccessor } from \"../../Materials/uniformBufferEffectCommonAccessor\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\n/**\r\n * Particle emitter emitting particles from a point.\r\n * It emits the particles randomly between 2 given directions.\r\n */\r\nexport class PointParticleEmitter implements IParticleEmitterType {\r\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     */\r\n    public direction1 = new Vector3(0, 1.0, 0);\r\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     */\r\n    public direction2 = new Vector3(0, 1.0, 0);\r\n\r\n    /**\r\n     * Creates a new instance PointParticleEmitter\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param directionToUpdate is the direction vector to update with the result\r\n     * @param particle is the particle we are computed the direction for\r\n     * @param isLocal defines if the direction should be set in local space\r\n     */\r\n    public startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        const randX = RandomRange(this.direction1.x, this.direction2.x);\r\n        const randY = RandomRange(this.direction1.y, this.direction2.y);\r\n        const randZ = RandomRange(this.direction1.z, this.direction2.z);\r\n\r\n        if (isLocal) {\r\n            directionToUpdate.copyFromFloats(randX, randY, randZ);\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the position is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param positionToUpdate is the position vector to update with the result\r\n     * @param particle is the particle we are computed the position for\r\n     * @param isLocal defines if the position should be set in local space\r\n     */\r\n    public startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        if (isLocal) {\r\n            positionToUpdate.copyFromFloats(0, 0, 0);\r\n            return;\r\n        }\r\n        Vector3.TransformCoordinatesFromFloatsToRef(0, 0, 0, worldMatrix, positionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Clones the current emitter and returns a copy of it\r\n     * @returns the new emitter\r\n     */\r\n    public clone(): PointParticleEmitter {\r\n        const newOne = new PointParticleEmitter();\r\n\r\n        DeepCopier.DeepCopy(this, newOne);\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Called by the GPUParticleSystem to setup the update shader\r\n     * @param uboOrEffect defines the update shader\r\n     */\r\n    public applyToShader(uboOrEffect: UniformBufferEffectCommonAccessor): void {\r\n        uboOrEffect.setVector3(\"direction1\", this.direction1);\r\n        uboOrEffect.setVector3(\"direction2\", this.direction2);\r\n    }\r\n\r\n    /**\r\n     * Creates the structure of the ubo for this particle emitter\r\n     * @param ubo ubo to create the structure for\r\n     */\r\n    public buildUniformLayout(ubo: UniformBuffer): void {\r\n        ubo.addUniform(\"direction1\", 3);\r\n        ubo.addUniform(\"direction2\", 3);\r\n    }\r\n\r\n    /**\r\n     * Returns a string to use to update the GPU particles update shader\r\n     * @returns a string containing the defines string\r\n     */\r\n    public getEffectDefines(): string {\r\n        return \"#define POINTEMITTER\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"PointParticleEmitter\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"PointParticleEmitter\";\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object.\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.type = this.getClassName();\r\n        serializationObject.direction1 = this.direction1.asArray();\r\n        serializationObject.direction2 = this.direction2.asArray();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse properties from a JSON object\r\n     * @param serializationObject defines the JSON object\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        Vector3.FromArrayToRef(serializationObject.direction1, 0, this.direction1);\r\n        Vector3.FromArrayToRef(serializationObject.direction2, 0, this.direction2);\r\n    }\r\n}\r\n", "import { DeepCopier } from \"../../Misc/deepCopier\";\r\nimport type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { RandomRange } from \"../../Maths/math.scalar.functions\";\r\nimport type { Particle } from \"../../Particles/particle\";\r\nimport type { IParticleEmitterType } from \"./IParticleEmitterType\";\r\nimport type { UniformBufferEffectCommonAccessor } from \"../../Materials/uniformBufferEffectCommonAccessor\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\n/**\r\n * Particle emitter emitting particles from the inside of a hemisphere.\r\n * It emits the particles alongside the hemisphere radius. The emission direction might be randomized.\r\n */\r\nexport class HemisphericParticleEmitter implements IParticleEmitterType {\r\n    /**\r\n     * Creates a new instance HemisphericParticleEmitter\r\n     * @param radius the radius of the emission hemisphere (1 by default)\r\n     * @param radiusRange the range of the emission hemisphere [0-1] 0 Surface only, 1 Entire Radius (1 by default)\r\n     * @param directionRandomizer defines how much to randomize the particle direction [0-1]\r\n     */\r\n    constructor(\r\n        /**\r\n         * [1] The radius of the emission hemisphere.\r\n         */\r\n        public radius = 1,\r\n        /**\r\n         * [1] The range of emission [0-1] 0 Surface only, 1 Entire Radius.\r\n         */\r\n        public radiusRange = 1,\r\n        /**\r\n         * [0] How much to randomize the particle direction [0-1].\r\n         */\r\n        public directionRandomizer = 0\r\n    ) {}\r\n\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param directionToUpdate is the direction vector to update with the result\r\n     * @param particle is the particle we are computed the direction for\r\n     * @param isLocal defines if the direction should be set in local space\r\n     */\r\n    public startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        const direction = particle.position.subtract(worldMatrix.getTranslation()).normalize();\r\n        const randX = RandomRange(0, this.directionRandomizer);\r\n        const randY = RandomRange(0, this.directionRandomizer);\r\n        const randZ = RandomRange(0, this.directionRandomizer);\r\n        direction.x += randX;\r\n        direction.y += randY;\r\n        direction.z += randZ;\r\n        direction.normalize();\r\n\r\n        if (isLocal) {\r\n            directionToUpdate.copyFrom(direction);\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformNormalFromFloatsToRef(direction.x, direction.y, direction.z, worldMatrix, directionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the position is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param positionToUpdate is the position vector to update with the result\r\n     * @param particle is the particle we are computed the position for\r\n     * @param isLocal defines if the position should be set in local space\r\n     */\r\n    public startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        const randRadius = this.radius - RandomRange(0, this.radius * this.radiusRange);\r\n        const v = RandomRange(0, 1.0);\r\n        const phi = RandomRange(0, 2 * Math.PI);\r\n        const theta = Math.acos(2 * v - 1);\r\n        const randX = randRadius * Math.cos(phi) * Math.sin(theta);\r\n        const randY = randRadius * Math.cos(theta);\r\n        const randZ = randRadius * Math.sin(phi) * Math.sin(theta);\r\n\r\n        if (isLocal) {\r\n            positionToUpdate.copyFromFloats(randX, Math.abs(randY), randZ);\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformCoordinatesFromFloatsToRef(randX, Math.abs(randY), randZ, worldMatrix, positionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Clones the current emitter and returns a copy of it\r\n     * @returns the new emitter\r\n     */\r\n    public clone(): HemisphericParticleEmitter {\r\n        const newOne = new HemisphericParticleEmitter(this.radius, this.directionRandomizer);\r\n\r\n        DeepCopier.DeepCopy(this, newOne);\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Called by the GPUParticleSystem to setup the update shader\r\n     * @param uboOrEffect defines the update shader\r\n     */\r\n    public applyToShader(uboOrEffect: UniformBufferEffectCommonAccessor): void {\r\n        uboOrEffect.setFloat(\"radius\", this.radius);\r\n        uboOrEffect.setFloat(\"radiusRange\", this.radiusRange);\r\n        uboOrEffect.setFloat(\"directionRandomizer\", this.directionRandomizer);\r\n    }\r\n\r\n    /**\r\n     * Creates the structure of the ubo for this particle emitter\r\n     * @param ubo ubo to create the structure for\r\n     */\r\n    public buildUniformLayout(ubo: UniformBuffer): void {\r\n        ubo.addUniform(\"radius\", 1);\r\n        ubo.addUniform(\"radiusRange\", 1);\r\n        ubo.addUniform(\"directionRandomizer\", 1);\r\n    }\r\n\r\n    /**\r\n     * Returns a string to use to update the GPU particles update shader\r\n     * @returns a string containing the defines string\r\n     */\r\n    public getEffectDefines(): string {\r\n        return \"#define HEMISPHERICEMITTER\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"HemisphericParticleEmitter\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"HemisphericParticleEmitter\";\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object.\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n        serializationObject.type = this.getClassName();\r\n        serializationObject.radius = this.radius;\r\n        serializationObject.radiusRange = this.radiusRange;\r\n        serializationObject.directionRandomizer = this.directionRandomizer;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse properties from a JSON object\r\n     * @param serializationObject defines the JSON object\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        this.radius = serializationObject.radius;\r\n        this.radiusRange = serializationObject.radiusRange;\r\n        this.directionRandomizer = serializationObject.directionRandomizer;\r\n    }\r\n}\r\n", "import type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { RandomRange } from \"../../Maths/math.scalar.functions\";\r\nimport type { Particle } from \"../../Particles/particle\";\r\nimport type { IParticleEmitterType } from \"./IParticleEmitterType\";\r\nimport { DeepCopier } from \"../../Misc/deepCopier\";\r\nimport type { UniformBufferEffectCommonAccessor } from \"../../Materials/uniformBufferEffectCommonAccessor\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\n/**\r\n * Particle emitter emitting particles from the inside of a sphere.\r\n * It emits the particles alongside the sphere radius. The emission direction might be randomized.\r\n */\r\nexport class SphereParticleEmitter implements IParticleEmitterType {\r\n    /**\r\n     * Creates a new instance SphereParticleEmitter\r\n     * @param radius the radius of the emission sphere (1 by default)\r\n     * @param radiusRange the range of the emission sphere [0-1] 0 Surface only, 1 Entire Radius (1 by default)\r\n     * @param directionRandomizer defines how much to randomize the particle direction [0-1]\r\n     */\r\n    constructor(\r\n        /**\r\n         * [1] The radius of the emission sphere.\r\n         */\r\n        public radius = 1,\r\n        /**\r\n         * [1] The range of emission [0-1] 0 Surface only, 1 Entire Radius.\r\n         */\r\n        public radiusRange = 1,\r\n        /**\r\n         * [0] How much to randomize the particle direction [0-1].\r\n         */\r\n        public directionRandomizer = 0\r\n    ) {}\r\n\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param directionToUpdate is the direction vector to update with the result\r\n     * @param particle is the particle we are computed the direction for\r\n     * @param isLocal defines if the direction should be set in local space\r\n     */\r\n    public startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        const direction = particle.position.subtract(worldMatrix.getTranslation()).normalize();\r\n        const randX = RandomRange(0, this.directionRandomizer);\r\n        const randY = RandomRange(0, this.directionRandomizer);\r\n        const randZ = RandomRange(0, this.directionRandomizer);\r\n        direction.x += randX;\r\n        direction.y += randY;\r\n        direction.z += randZ;\r\n        direction.normalize();\r\n\r\n        if (isLocal) {\r\n            directionToUpdate.copyFrom(direction);\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformNormalFromFloatsToRef(direction.x, direction.y, direction.z, worldMatrix, directionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the position is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param positionToUpdate is the position vector to update with the result\r\n     * @param particle is the particle we are computed the position for\r\n     * @param isLocal defines if the position should be set in local space\r\n     */\r\n    public startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        const randRadius = this.radius - RandomRange(0, this.radius * this.radiusRange);\r\n        const v = RandomRange(0, 1.0);\r\n        const phi = RandomRange(0, 2 * Math.PI);\r\n        const theta = Math.acos(2 * v - 1);\r\n        const randX = randRadius * Math.cos(phi) * Math.sin(theta);\r\n        const randY = randRadius * Math.cos(theta);\r\n        const randZ = randRadius * Math.sin(phi) * Math.sin(theta);\r\n\r\n        if (isLocal) {\r\n            positionToUpdate.copyFromFloats(randX, randY, randZ);\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformCoordinatesFromFloatsToRef(randX, randY, randZ, worldMatrix, positionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Clones the current emitter and returns a copy of it\r\n     * @returns the new emitter\r\n     */\r\n    public clone(): SphereParticleEmitter {\r\n        const newOne = new SphereParticleEmitter(this.radius, this.directionRandomizer);\r\n\r\n        DeepCopier.DeepCopy(this, newOne);\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Called by the GPUParticleSystem to setup the update shader\r\n     * @param uboOrEffect defines the update shader\r\n     */\r\n    public applyToShader(uboOrEffect: UniformBufferEffectCommonAccessor): void {\r\n        uboOrEffect.setFloat(\"radius\", this.radius);\r\n        uboOrEffect.setFloat(\"radiusRange\", this.radiusRange);\r\n        uboOrEffect.setFloat(\"directionRandomizer\", this.directionRandomizer);\r\n    }\r\n\r\n    /**\r\n     * Creates the structure of the ubo for this particle emitter\r\n     * @param ubo ubo to create the structure for\r\n     */\r\n    public buildUniformLayout(ubo: UniformBuffer): void {\r\n        ubo.addUniform(\"radius\", 1);\r\n        ubo.addUniform(\"radiusRange\", 1);\r\n        ubo.addUniform(\"directionRandomizer\", 1);\r\n    }\r\n\r\n    /**\r\n     * Returns a string to use to update the GPU particles update shader\r\n     * @returns a string containing the defines string\r\n     */\r\n    public getEffectDefines(): string {\r\n        return \"#define SPHEREEMITTER\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"SphereParticleEmitter\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"SphereParticleEmitter\";\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object.\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n        serializationObject.type = this.getClassName();\r\n        serializationObject.radius = this.radius;\r\n        serializationObject.radiusRange = this.radiusRange;\r\n        serializationObject.directionRandomizer = this.directionRandomizer;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse properties from a JSON object\r\n     * @param serializationObject defines the JSON object\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        this.radius = serializationObject.radius;\r\n        this.radiusRange = serializationObject.radiusRange;\r\n        this.directionRandomizer = serializationObject.directionRandomizer;\r\n    }\r\n}\r\n\r\n/**\r\n * Particle emitter emitting particles from the inside of a sphere.\r\n * It emits the particles randomly between two vectors.\r\n */\r\nexport class SphereDirectedParticleEmitter extends SphereParticleEmitter {\r\n    /**\r\n     * Creates a new instance SphereDirectedParticleEmitter\r\n     * @param radius the radius of the emission sphere (1 by default)\r\n     * @param direction1 the min limit of the emission direction (up vector by default)\r\n     * @param direction2 the max limit of the emission direction (up vector by default)\r\n     */\r\n    constructor(\r\n        radius = 1,\r\n        /**\r\n         * [Up vector] The min limit of the emission direction.\r\n         */\r\n        public direction1 = new Vector3(0, 1, 0),\r\n        /**\r\n         * [Up vector] The max limit of the emission direction.\r\n         */\r\n        public direction2 = new Vector3(0, 1, 0)\r\n    ) {\r\n        super(radius);\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param directionToUpdate is the direction vector to update with the result\r\n     */\r\n    public override startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3): void {\r\n        const randX = RandomRange(this.direction1.x, this.direction2.x);\r\n        const randY = RandomRange(this.direction1.y, this.direction2.y);\r\n        const randZ = RandomRange(this.direction1.z, this.direction2.z);\r\n        Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Clones the current emitter and returns a copy of it\r\n     * @returns the new emitter\r\n     */\r\n    public override clone(): SphereDirectedParticleEmitter {\r\n        const newOne = new SphereDirectedParticleEmitter(this.radius, this.direction1, this.direction2);\r\n\r\n        DeepCopier.DeepCopy(this, newOne);\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Called by the GPUParticleSystem to setup the update shader\r\n     * @param uboOrEffect defines the update shader\r\n     */\r\n    public override applyToShader(uboOrEffect: UniformBufferEffectCommonAccessor): void {\r\n        uboOrEffect.setFloat(\"radius\", this.radius);\r\n        uboOrEffect.setFloat(\"radiusRange\", this.radiusRange);\r\n        uboOrEffect.setVector3(\"direction1\", this.direction1);\r\n        uboOrEffect.setVector3(\"direction2\", this.direction2);\r\n    }\r\n\r\n    /**\r\n     * Creates the structure of the ubo for this particle emitter\r\n     * @param ubo ubo to create the structure for\r\n     */\r\n    public override buildUniformLayout(ubo: UniformBuffer): void {\r\n        ubo.addUniform(\"radius\", 1);\r\n        ubo.addUniform(\"radiusRange\", 1);\r\n        ubo.addUniform(\"direction1\", 3);\r\n        ubo.addUniform(\"direction2\", 3);\r\n    }\r\n\r\n    /**\r\n     * Returns a string to use to update the GPU particles update shader\r\n     * @returns a string containing the defines string\r\n     */\r\n    public override getEffectDefines(): string {\r\n        return \"#define SPHEREEMITTER\\n#define DIRECTEDSPHEREEMITTER\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"SphereDirectedParticleEmitter\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"SphereDirectedParticleEmitter\";\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object.\r\n     * @returns the JSON object\r\n     */\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.direction1 = this.direction1.asArray();\r\n        serializationObject.direction2 = this.direction2.asArray();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse properties from a JSON object\r\n     * @param serializationObject defines the JSON object\r\n     */\r\n    public override parse(serializationObject: any): void {\r\n        super.parse(serializationObject);\r\n        this.direction1.copyFrom(serializationObject.direction1);\r\n        this.direction2.copyFrom(serializationObject.direction2);\r\n    }\r\n}\r\n", "import type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { RandomRange } from \"../../Maths/math.scalar.functions\";\r\nimport type { Particle } from \"../../Particles/particle\";\r\nimport type { IParticleEmitterType } from \"./IParticleEmitterType\";\r\nimport { DeepCopier } from \"../../Misc/deepCopier\";\r\nimport type { UniformBufferEffectCommonAccessor } from \"../../Materials/uniformBufferEffectCommonAccessor\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\n/**\r\n * Particle emitter emitting particles from the inside of a cylinder.\r\n * It emits the particles alongside the cylinder radius. The emission direction might be randomized.\r\n */\r\nexport class CylinderParticleEmitter implements IParticleEmitterType {\r\n    private _tempVector = Vector3.Zero();\r\n\r\n    /**\r\n     * Creates a new instance CylinderParticleEmitter\r\n     * @param radius the radius of the emission cylinder (1 by default)\r\n     * @param height the height of the emission cylinder (1 by default)\r\n     * @param radiusRange the range of the emission cylinder [0-1] 0 Surface only, 1 Entire Radius (1 by default)\r\n     * @param directionRandomizer defines how much to randomize the particle direction [0-1]\r\n     */\r\n    constructor(\r\n        /**\r\n         * [1] The radius of the emission cylinder.\r\n         */\r\n        public radius = 1,\r\n        /**\r\n         * [1] The height of the emission cylinder.\r\n         */\r\n        public height = 1,\r\n        /**\r\n         * [1] The range of emission [0-1] 0 Surface only, 1 Entire Radius.\r\n         */\r\n        public radiusRange = 1,\r\n        /**\r\n         * [0] How much to randomize the particle direction [0-1].\r\n         */\r\n        public directionRandomizer = 0\r\n    ) {}\r\n\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param directionToUpdate is the direction vector to update with the result\r\n     * @param particle is the particle we are computed the direction for\r\n     * @param isLocal defines if the direction should be set in local space\r\n     * @param inverseWorldMatrix defines the inverted world matrix to use if isLocal is false\r\n     */\r\n    public startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean, inverseWorldMatrix: Matrix): void {\r\n        particle.position.subtractToRef(worldMatrix.getTranslation(), this._tempVector);\r\n\r\n        this._tempVector.normalize();\r\n\r\n        Vector3.TransformNormalToRef(this._tempVector, inverseWorldMatrix, this._tempVector);\r\n\r\n        const randY = RandomRange(-this.directionRandomizer / 2, this.directionRandomizer / 2);\r\n\r\n        let angle = Math.atan2(this._tempVector.x, this._tempVector.z);\r\n        angle += RandomRange(-Math.PI / 2, Math.PI / 2) * this.directionRandomizer;\r\n\r\n        this._tempVector.y = randY; // set direction y to rand y to mirror normal of cylinder surface\r\n        this._tempVector.x = Math.sin(angle);\r\n        this._tempVector.z = Math.cos(angle);\r\n        this._tempVector.normalize();\r\n\r\n        if (isLocal) {\r\n            directionToUpdate.copyFrom(this._tempVector);\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformNormalFromFloatsToRef(this._tempVector.x, this._tempVector.y, this._tempVector.z, worldMatrix, directionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the position is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param positionToUpdate is the position vector to update with the result\r\n     * @param particle is the particle we are computed the position for\r\n     * @param isLocal defines if the position should be set in local space\r\n     */\r\n    public startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        const yPos = RandomRange(-this.height / 2, this.height / 2);\r\n        const angle = RandomRange(0, 2 * Math.PI);\r\n\r\n        // Pick a properly distributed point within the circle https://programming.guide/random-point-within-circle.html\r\n        const radiusDistribution = RandomRange((1 - this.radiusRange) * (1 - this.radiusRange), 1);\r\n        const positionRadius = Math.sqrt(radiusDistribution) * this.radius;\r\n        const xPos = positionRadius * Math.cos(angle);\r\n        const zPos = positionRadius * Math.sin(angle);\r\n\r\n        if (isLocal) {\r\n            positionToUpdate.copyFromFloats(xPos, yPos, zPos);\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformCoordinatesFromFloatsToRef(xPos, yPos, zPos, worldMatrix, positionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Clones the current emitter and returns a copy of it\r\n     * @returns the new emitter\r\n     */\r\n    public clone(): CylinderParticleEmitter {\r\n        const newOne = new CylinderParticleEmitter(this.radius, this.directionRandomizer);\r\n\r\n        DeepCopier.DeepCopy(this, newOne);\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Called by the GPUParticleSystem to setup the update shader\r\n     * @param uboOrEffect defines the update shader\r\n     */\r\n    public applyToShader(uboOrEffect: UniformBufferEffectCommonAccessor): void {\r\n        uboOrEffect.setFloat(\"radius\", this.radius);\r\n        uboOrEffect.setFloat(\"height\", this.height);\r\n        uboOrEffect.setFloat(\"radiusRange\", this.radiusRange);\r\n        uboOrEffect.setFloat(\"directionRandomizer\", this.directionRandomizer);\r\n    }\r\n\r\n    /**\r\n     * Creates the structure of the ubo for this particle emitter\r\n     * @param ubo ubo to create the structure for\r\n     */\r\n    public buildUniformLayout(ubo: UniformBuffer): void {\r\n        ubo.addUniform(\"radius\", 1);\r\n        ubo.addUniform(\"height\", 1);\r\n        ubo.addUniform(\"radiusRange\", 1);\r\n        ubo.addUniform(\"directionRandomizer\", 1);\r\n    }\r\n\r\n    /**\r\n     * Returns a string to use to update the GPU particles update shader\r\n     * @returns a string containing the defines string\r\n     */\r\n    public getEffectDefines(): string {\r\n        return \"#define CYLINDEREMITTER\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"CylinderParticleEmitter\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"CylinderParticleEmitter\";\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object.\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n        serializationObject.type = this.getClassName();\r\n        serializationObject.radius = this.radius;\r\n        serializationObject.height = this.height;\r\n        serializationObject.radiusRange = this.radiusRange;\r\n        serializationObject.directionRandomizer = this.directionRandomizer;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse properties from a JSON object\r\n     * @param serializationObject defines the JSON object\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        this.radius = serializationObject.radius;\r\n        this.height = serializationObject.height;\r\n        this.radiusRange = serializationObject.radiusRange;\r\n        this.directionRandomizer = serializationObject.directionRandomizer;\r\n    }\r\n}\r\n\r\n/**\r\n * Particle emitter emitting particles from the inside of a cylinder.\r\n * It emits the particles randomly between two vectors.\r\n */\r\nexport class CylinderDirectedParticleEmitter extends CylinderParticleEmitter {\r\n    /**\r\n     * Creates a new instance CylinderDirectedParticleEmitter\r\n     * @param radius the radius of the emission cylinder (1 by default)\r\n     * @param height the height of the emission cylinder (1 by default)\r\n     * @param radiusRange the range of the emission cylinder [0-1] 0 Surface only, 1 Entire Radius (1 by default)\r\n     * @param direction1 the min limit of the emission direction (up vector by default)\r\n     * @param direction2 the max limit of the emission direction (up vector by default)\r\n     */\r\n    constructor(\r\n        radius = 1,\r\n        height = 1,\r\n        radiusRange = 1,\r\n        /**\r\n         * [Up vector] The min limit of the emission direction.\r\n         */\r\n        public direction1 = new Vector3(0, 1, 0),\r\n        /**\r\n         * [Up vector] The max limit of the emission direction.\r\n         */\r\n        public direction2 = new Vector3(0, 1, 0)\r\n    ) {\r\n        super(radius, height, radiusRange);\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param directionToUpdate is the direction vector to update with the result\r\n     * @param _particle is the particle we are computed the direction for\r\n     * @param isLocal defines if the direction should be set in local space\r\n     */\r\n    public override startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, _particle: Particle, isLocal: boolean): void {\r\n        const randX = RandomRange(this.direction1.x, this.direction2.x);\r\n        const randY = RandomRange(this.direction1.y, this.direction2.y);\r\n        const randZ = RandomRange(this.direction1.z, this.direction2.z);\r\n        if (isLocal) {\r\n            directionToUpdate.copyFromFloats(randX, randY, randZ);\r\n            return;\r\n        }\r\n        Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Clones the current emitter and returns a copy of it\r\n     * @returns the new emitter\r\n     */\r\n    public override clone(): CylinderDirectedParticleEmitter {\r\n        const newOne = new CylinderDirectedParticleEmitter(this.radius, this.height, this.radiusRange, this.direction1, this.direction2);\r\n\r\n        DeepCopier.DeepCopy(this, newOne);\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Called by the GPUParticleSystem to setup the update shader\r\n     * @param uboOrEffect defines the update shader\r\n     */\r\n    public override applyToShader(uboOrEffect: UniformBufferEffectCommonAccessor): void {\r\n        uboOrEffect.setFloat(\"radius\", this.radius);\r\n        uboOrEffect.setFloat(\"height\", this.height);\r\n        uboOrEffect.setFloat(\"radiusRange\", this.radiusRange);\r\n        uboOrEffect.setVector3(\"direction1\", this.direction1);\r\n        uboOrEffect.setVector3(\"direction2\", this.direction2);\r\n    }\r\n\r\n    /**\r\n     * Creates the structure of the ubo for this particle emitter\r\n     * @param ubo ubo to create the structure for\r\n     */\r\n    public override buildUniformLayout(ubo: UniformBuffer): void {\r\n        ubo.addUniform(\"radius\", 1);\r\n        ubo.addUniform(\"height\", 1);\r\n        ubo.addUniform(\"radiusRange\", 1);\r\n        ubo.addUniform(\"direction1\", 3);\r\n        ubo.addUniform(\"direction2\", 3);\r\n    }\r\n\r\n    /**\r\n     * Returns a string to use to update the GPU particles update shader\r\n     * @returns a string containing the defines string\r\n     */\r\n    public override getEffectDefines(): string {\r\n        return \"#define CYLINDEREMITTER\\n#define DIRECTEDCYLINDEREMITTER\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"CylinderDirectedParticleEmitter\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"CylinderDirectedParticleEmitter\";\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object.\r\n     * @returns the JSON object\r\n     */\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.direction1 = this.direction1.asArray();\r\n        serializationObject.direction2 = this.direction2.asArray();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse properties from a JSON object\r\n     * @param serializationObject defines the JSON object\r\n     */\r\n    public override parse(serializationObject: any): void {\r\n        super.parse(serializationObject);\r\n        Vector3.FromArrayToRef(serializationObject.direction1, 0, this.direction1);\r\n        Vector3.FromArrayToRef(serializationObject.direction2, 0, this.direction2);\r\n    }\r\n}\r\n", "import { DeepCopier } from \"../../Misc/deepCopier\";\r\nimport type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector3, TmpVectors } from \"../../Maths/math.vector\";\r\nimport { RandomRange } from \"../../Maths/math.scalar.functions\";\r\nimport type { Particle } from \"../../Particles/particle\";\r\nimport type { IParticleEmitterType } from \"./IParticleEmitterType\";\r\nimport type { UniformBufferEffectCommonAccessor } from \"../../Materials/uniformBufferEffectCommonAccessor\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\n/**\r\n * Particle emitter emitting particles from the inside of a cone.\r\n * It emits the particles alongside the cone volume from the base to the particle.\r\n * The emission direction might be randomized.\r\n */\r\nexport class ConeParticleEmitter implements IParticleEmitterType {\r\n    private _radius: number;\r\n    private _angle: number;\r\n    private _height: number;\r\n\r\n    /**\r\n     * Gets or sets a value indicating where on the radius the start position should be picked (1 = everywhere, 0 = only surface)\r\n     */\r\n    public radiusRange = 1;\r\n\r\n    /**\r\n     * Gets or sets a value indicating where on the height the start position should be picked (1 = everywhere, 0 = only surface)\r\n     */\r\n    public heightRange = 1;\r\n\r\n    /**\r\n     * Gets or sets a value indicating if all the particles should be emitted from the spawn point only (the base of the cone)\r\n     */\r\n    public emitFromSpawnPointOnly = false;\r\n\r\n    /**\r\n     * Gets or sets the radius of the emission cone\r\n     */\r\n    public get radius(): number {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: number) {\r\n        this._radius = value;\r\n        this._buildHeight();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the angle of the emission cone\r\n     */\r\n    public get angle(): number {\r\n        return this._angle;\r\n    }\r\n\r\n    public set angle(value: number) {\r\n        this._angle = value;\r\n        this._buildHeight();\r\n    }\r\n\r\n    private _buildHeight() {\r\n        if (this._angle !== 0) {\r\n            this._height = this._radius / Math.tan(this._angle / 2);\r\n        } else {\r\n            this._height = 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance ConeParticleEmitter\r\n     * @param radius the radius of the emission cone (1 by default)\r\n     * @param angle the cone base angle (PI by default)\r\n     * @param directionRandomizer defines how much to randomize the particle direction [0-1] (default is 0)\r\n     */\r\n    constructor(\r\n        radius = 1,\r\n        angle = Math.PI,\r\n        /** [0] defines how much to randomize the particle direction [0-1] (default is 0) */\r\n        public directionRandomizer = 0\r\n    ) {\r\n        this.angle = angle;\r\n        this.radius = radius;\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param directionToUpdate is the direction vector to update with the result\r\n     * @param particle is the particle we are computed the direction for\r\n     * @param isLocal defines if the direction should be set in local space\r\n     */\r\n    public startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        if (isLocal) {\r\n            TmpVectors.Vector3[0].copyFrom(particle._localPosition!).normalize();\r\n        } else {\r\n            particle.position.subtractToRef(worldMatrix.getTranslation(), TmpVectors.Vector3[0]).normalize();\r\n        }\r\n\r\n        const randX = RandomRange(0, this.directionRandomizer);\r\n        const randY = RandomRange(0, this.directionRandomizer);\r\n        const randZ = RandomRange(0, this.directionRandomizer);\r\n        directionToUpdate.x = TmpVectors.Vector3[0].x + randX;\r\n        directionToUpdate.y = TmpVectors.Vector3[0].y + randY;\r\n        directionToUpdate.z = TmpVectors.Vector3[0].z + randZ;\r\n        directionToUpdate.normalize();\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the position is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param positionToUpdate is the position vector to update with the result\r\n     * @param particle is the particle we are computed the position for\r\n     * @param isLocal defines if the position should be set in local space\r\n     */\r\n    startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        const s = RandomRange(0, Math.PI * 2);\r\n        let h: number;\r\n\r\n        if (!this.emitFromSpawnPointOnly) {\r\n            h = RandomRange(0, this.heightRange);\r\n            // Better distribution in a cone at normal angles.\r\n            h = 1 - h * h;\r\n        } else {\r\n            h = 0.0001;\r\n        }\r\n        let radius = this._radius - RandomRange(0, this._radius * this.radiusRange);\r\n        radius = radius * h;\r\n\r\n        const randX = radius * Math.sin(s);\r\n        const randZ = radius * Math.cos(s);\r\n        const randY = h * this._height;\r\n\r\n        if (isLocal) {\r\n            positionToUpdate.x = randX;\r\n            positionToUpdate.y = randY;\r\n            positionToUpdate.z = randZ;\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformCoordinatesFromFloatsToRef(randX, randY, randZ, worldMatrix, positionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Clones the current emitter and returns a copy of it\r\n     * @returns the new emitter\r\n     */\r\n    public clone(): ConeParticleEmitter {\r\n        const newOne = new ConeParticleEmitter(this._radius, this._angle, this.directionRandomizer);\r\n\r\n        DeepCopier.DeepCopy(this, newOne);\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Called by the GPUParticleSystem to setup the update shader\r\n     * @param uboOrEffect defines the update shader\r\n     */\r\n    public applyToShader(uboOrEffect: UniformBufferEffectCommonAccessor): void {\r\n        uboOrEffect.setFloat2(\"radius\", this._radius, this.radiusRange);\r\n        uboOrEffect.setFloat(\"coneAngle\", this._angle);\r\n        uboOrEffect.setFloat2(\"height\", this._height, this.heightRange);\r\n        uboOrEffect.setFloat(\"directionRandomizer\", this.directionRandomizer);\r\n    }\r\n\r\n    /**\r\n     * Creates the structure of the ubo for this particle emitter\r\n     * @param ubo ubo to create the structure for\r\n     */\r\n    public buildUniformLayout(ubo: UniformBuffer): void {\r\n        ubo.addUniform(\"radius\", 2);\r\n        ubo.addUniform(\"coneAngle\", 1);\r\n        ubo.addUniform(\"height\", 2);\r\n        ubo.addUniform(\"directionRandomizer\", 1);\r\n    }\r\n\r\n    /**\r\n     * Returns a string to use to update the GPU particles update shader\r\n     * @returns a string containing the defines string\r\n     */\r\n    public getEffectDefines(): string {\r\n        let defines = \"#define CONEEMITTER\";\r\n\r\n        if (this.emitFromSpawnPointOnly) {\r\n            defines += \"\\n#define CONEEMITTERSPAWNPOINT\";\r\n        }\r\n\r\n        return defines;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"ConeParticleEmitter\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ConeParticleEmitter\";\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object.\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.type = this.getClassName();\r\n        serializationObject.radius = this._radius;\r\n        serializationObject.angle = this._angle;\r\n        serializationObject.directionRandomizer = this.directionRandomizer;\r\n        serializationObject.radiusRange = this.radiusRange;\r\n        serializationObject.heightRange = this.heightRange;\r\n        serializationObject.emitFromSpawnPointOnly = this.emitFromSpawnPointOnly;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse properties from a JSON object\r\n     * @param serializationObject defines the JSON object\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        this.radius = serializationObject.radius;\r\n        this.angle = serializationObject.angle;\r\n        this.directionRandomizer = serializationObject.directionRandomizer;\r\n\r\n        this.radiusRange = serializationObject.radiusRange !== undefined ? serializationObject.radiusRange : 1;\r\n        this.heightRange = serializationObject.radiusRange !== undefined ? serializationObject.heightRange : 1;\r\n        this.emitFromSpawnPointOnly = serializationObject.emitFromSpawnPointOnly !== undefined ? serializationObject.emitFromSpawnPointOnly : false;\r\n    }\r\n}\r\nexport class ConeDirectedParticleEmitter extends ConeParticleEmitter {\r\n    constructor(\r\n        radius = 1,\r\n        angle = Math.PI,\r\n        /**\r\n         * [Up vector] The min limit of the emission direction.\r\n         */\r\n        public direction1 = new Vector3(0, 1, 0),\r\n        /**\r\n         * [Up vector] The max limit of the emission direction.\r\n         */\r\n        public direction2 = new Vector3(0, 1, 0)\r\n    ) {\r\n        super(radius, angle);\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param directionToUpdate is the direction vector to update with the result\r\n     */\r\n    public override startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3): void {\r\n        const randX = RandomRange(this.direction1.x, this.direction2.x);\r\n        const randY = RandomRange(this.direction1.y, this.direction2.y);\r\n        const randZ = RandomRange(this.direction1.z, this.direction2.z);\r\n        Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Clones the current emitter and returns a copy of it\r\n     * @returns the new emitter\r\n     */\r\n    public override clone(): ConeDirectedParticleEmitter {\r\n        const newOne = new ConeDirectedParticleEmitter(this.radius, this.angle, this.direction1, this.direction2);\r\n\r\n        DeepCopier.DeepCopy(this, newOne);\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Called by the GPUParticleSystem to setup the update shader\r\n     * @param uboOrEffect defines the update shader\r\n     */\r\n    public override applyToShader(uboOrEffect: UniformBufferEffectCommonAccessor): void {\r\n        uboOrEffect.setFloat(\"radius\", this.radius);\r\n        uboOrEffect.setFloat(\"radiusRange\", this.radiusRange);\r\n        uboOrEffect.setVector3(\"direction1\", this.direction1);\r\n        uboOrEffect.setVector3(\"direction2\", this.direction2);\r\n    }\r\n\r\n    /**\r\n     * Creates the structure of the ubo for this particle emitter\r\n     * @param ubo ubo to create the structure for\r\n     */\r\n    public override buildUniformLayout(ubo: UniformBuffer): void {\r\n        ubo.addUniform(\"radius\", 1);\r\n        ubo.addUniform(\"radiusRange\", 1);\r\n        ubo.addUniform(\"direction1\", 3);\r\n        ubo.addUniform(\"direction2\", 3);\r\n    }\r\n\r\n    /**\r\n     * Returns a string to use to update the GPU particles update shader\r\n     * @returns a string containing the defines string\r\n     */\r\n    public override getEffectDefines(): string {\r\n        return \"#define CONEEMITTER\\n#define DIRECTEDCONEEMITTER\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"ConeDirectedParticleEmitter\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"ConeDirectedParticleEmitter\";\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object.\r\n     * @returns the JSON object\r\n     */\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.direction1 = this.direction1.asArray();\r\n        serializationObject.direction2 = this.direction2.asArray();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse properties from a JSON object\r\n     * @param serializationObject defines the JSON object\r\n     */\r\n    public override parse(serializationObject: any): void {\r\n        super.parse(serializationObject);\r\n        this.direction1.copyFrom(serializationObject.direction1);\r\n        this.direction2.copyFrom(serializationObject.direction2);\r\n    }\r\n}\r\n", "import { Vector3 } from \"core/Maths/math.vector\";\r\nimport { PointParticleEmitter } from \"./EmitterTypes/pointParticleEmitter\";\r\nimport { HemisphericParticleEmitter } from \"./EmitterTypes/hemisphericParticleEmitter\";\r\nimport { SphereDirectedParticleEmitter, SphereParticleEmitter } from \"./EmitterTypes/sphereParticleEmitter\";\r\nimport { CylinderDirectedParticleEmitter, CylinderParticleEmitter } from \"./EmitterTypes/cylinderParticleEmitter\";\r\nimport { ConeDirectedParticleEmitter, ConeParticleEmitter } from \"./EmitterTypes/coneParticleEmitter\";\r\n\r\n/**\r\n * Creates a Point Emitter for the particle system (emits directly from the emitter position)\r\n * @param direction1 Particles are emitted between the direction1 and direction2 from within the box\r\n * @param direction2 Particles are emitted between the direction1 and direction2 from within the box\r\n * @returns the emitter\r\n */\r\nexport function CreatePointEmitter(direction1: Vector3, direction2: Vector3): PointParticleEmitter {\r\n    const particleEmitter = new PointParticleEmitter();\r\n    particleEmitter.direction1 = direction1;\r\n    particleEmitter.direction2 = direction2;\r\n    return particleEmitter;\r\n}\r\n\r\n/**\r\n * Creates a Hemisphere Emitter for the particle system (emits along the hemisphere radius)\r\n * @param radius The radius of the hemisphere to emit from\r\n * @param radiusRange The range of the hemisphere to emit from [0-1] 0 Surface Only, 1 Entire Radius\r\n * @returns the emitter\r\n */\r\nexport function CreateHemisphericEmitter(radius = 1, radiusRange = 1): HemisphericParticleEmitter {\r\n    return new HemisphericParticleEmitter(radius, radiusRange);\r\n}\r\n\r\n/**\r\n * Creates a Sphere Emitter for the particle system (emits along the sphere radius)\r\n * @param radius The radius of the sphere to emit from\r\n * @param radiusRange The range of the sphere to emit from [0-1] 0 Surface Only, 1 Entire Radius\r\n * @returns the emitter\r\n */\r\nexport function CreateSphereEmitter(radius = 1, radiusRange = 1): SphereParticleEmitter {\r\n    return new SphereParticleEmitter(radius, radiusRange);\r\n}\r\n\r\n/**\r\n * Creates a Directed Sphere Emitter for the particle system (emits between direction1 and direction2)\r\n * @param radius The radius of the sphere to emit from\r\n * @param direction1 Particles are emitted between the direction1 and direction2 from within the sphere\r\n * @param direction2 Particles are emitted between the direction1 and direction2 from within the sphere\r\n * @returns the emitter\r\n */\r\nexport function CreateDirectedSphereEmitter(radius = 1, direction1 = new Vector3(0, 1.0, 0), direction2 = new Vector3(0, 1.0, 0)): SphereDirectedParticleEmitter {\r\n    return new SphereDirectedParticleEmitter(radius, direction1, direction2);\r\n}\r\n\r\n/**\r\n * Creates a Cylinder Emitter for the particle system (emits from the cylinder to the particle position)\r\n * @param radius The radius of the emission cylinder\r\n * @param height The height of the emission cylinder\r\n * @param radiusRange The range of emission [0-1] 0 Surface only, 1 Entire Radius\r\n * @param directionRandomizer How much to randomize the particle direction [0-1]\r\n * @returns the emitter\r\n */\r\nexport function CreateCylinderEmitter(radius = 1, height = 1, radiusRange = 1, directionRandomizer = 0): CylinderParticleEmitter {\r\n    return new CylinderParticleEmitter(radius, height, radiusRange, directionRandomizer);\r\n}\r\n\r\n/**\r\n * Creates a Directed Cylinder Emitter for the particle system (emits between direction1 and direction2)\r\n * @param radius The radius of the cylinder to emit from\r\n * @param height The height of the emission cylinder\r\n * @param radiusRange the range of the emission cylinder [0-1] 0 Surface only, 1 Entire Radius (1 by default)\r\n * @param direction1 Particles are emitted between the direction1 and direction2 from within the cylinder\r\n * @param direction2 Particles are emitted between the direction1 and direction2 from within the cylinder\r\n * @returns the emitter\r\n */\r\nexport function CreateDirectedCylinderEmitter(\r\n    radius = 1,\r\n    height = 1,\r\n    radiusRange = 1,\r\n    direction1 = new Vector3(0, 1.0, 0),\r\n    direction2 = new Vector3(0, 1.0, 0)\r\n): CylinderDirectedParticleEmitter {\r\n    return new CylinderDirectedParticleEmitter(radius, height, radiusRange, direction1, direction2);\r\n}\r\n\r\n/**\r\n * Creates a Cone Emitter for the particle system (emits from the cone to the particle position)\r\n * @param radius The radius of the cone to emit from\r\n * @param angle The base angle of the cone\r\n * @returns the emitter\r\n */\r\nexport function CreateConeEmitter(radius = 1, angle = Math.PI / 4): ConeParticleEmitter {\r\n    return new ConeParticleEmitter(radius, angle);\r\n}\r\n\r\nexport function CreateDirectedConeEmitter(radius = 1, angle = Math.PI / 4, direction1 = new Vector3(0, 1.0, 0), direction2 = new Vector3(0, 1.0, 0)): ConeDirectedParticleEmitter {\r\n    return new ConeDirectedParticleEmitter(radius, angle, direction1, direction2);\r\n}\r\n", "import { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { Particle } from \"./particle\";\r\nimport type { ThinParticleSystem } from \"./thinParticleSystem\";\r\n\r\nconst ToAttractor: Vector3 = Vector3.Zero();\r\nconst Force: Vector3 = Vector3.Zero();\r\nconst ScaledForce: Vector3 = Vector3.Zero();\r\n\r\n/**\r\n * Class representing an attractor in a particle system.\r\n * #DEZ79M#40\r\n */\r\nexport class Attractor {\r\n    /**\r\n     * Gets or sets the strength of the attractor.\r\n     * A positive value attracts particles, while a negative value repels them.\r\n     */\r\n    public strength = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the position of the attractor in 3D space.\r\n     */\r\n    public position = Vector3.Zero();\r\n\r\n    /** @internal */\r\n    public _processParticle(particle: Particle, system: ThinParticleSystem) {\r\n        this.position.subtractToRef(particle.position, ToAttractor);\r\n        const distanceSquared = ToAttractor.lengthSquared() + 1; // Avoid going under 1.0\r\n        ToAttractor.normalize().scaleToRef(this.strength / distanceSquared, Force);\r\n\r\n        Force.scaleToRef(system._tempScaledUpdateSpeed, ScaledForce);\r\n\r\n        particle.direction.addInPlace(ScaledForce); // Update particle velocity\r\n    }\r\n\r\n    /**\r\n     * Serializes the attractor to a JSON object.\r\n     * @returns The serialized JSON object.\r\n     */\r\n    public serialize(): any {\r\n        return {\r\n            position: this.position.asArray(),\r\n            strength: this.strength,\r\n        };\r\n    }\r\n}\r\n", "import { ThinParticleSystem } from \"./thinParticleSystem\";\r\nimport type { IParticleEmitterType } from \"./EmitterTypes/IParticleEmitterType\";\r\nimport { SubEmitter, SubEmitterType } from \"./subEmitter\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { IParticleSystem } from \"./IParticleSystem\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { Particle } from \"./particle\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { MeshParticleEmitter } from \"./EmitterTypes/meshParticleEmitter\";\r\nimport { CustomParticleEmitter } from \"./EmitterTypes/customParticleEmitter\";\r\nimport { BoxParticleEmitter } from \"./EmitterTypes/boxParticleEmitter\";\r\nimport { PointParticleEmitter } from \"./EmitterTypes/pointParticleEmitter\";\r\nimport { HemisphericParticleEmitter } from \"./EmitterTypes/hemisphericParticleEmitter\";\r\nimport { SphereDirectedParticleEmitter, SphereParticleEmitter } from \"./EmitterTypes/sphereParticleEmitter\";\r\nimport { CylinderDirectedParticleEmitter, CylinderParticleEmitter } from \"./EmitterTypes/cylinderParticleEmitter\";\r\nimport { ConeDirectedParticleEmitter, ConeParticleEmitter } from \"./EmitterTypes/coneParticleEmitter\";\r\nimport {\r\n    CreateConeEmitter,\r\n    CreateCylinderEmitter,\r\n    CreateDirectedCylinderEmitter,\r\n    CreateDirectedSphereEmitter,\r\n    CreateDirectedConeEmitter,\r\n    CreateHemisphericEmitter,\r\n    CreatePointEmitter,\r\n    CreateSphereEmitter,\r\n} from \"./particleSystem.functions\";\r\nimport { Attractor } from \"./attractor\";\r\nimport type { _IExecutionQueueItem } from \"./Queue/executionQueue\";\r\nimport { _ConnectAfter, _RemoveFromQueue } from \"./Queue/executionQueue\";\r\nimport type { FlowMap } from \"./flowMap\";\r\nimport type { NodeParticleSystemSet } from \"./Node/nodeParticleSystemSet\";\r\n\r\n/**\r\n * This represents a particle system in Babylon.\r\n * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\r\n * Particles can take different shapes while emitted like box, sphere, cone or you can write your custom function.\r\n * @example https://doc.babylonjs.com/features/featuresDeepDive/particles/particle_system/particle_system_intro\r\n */\r\nexport class ParticleSystem extends ThinParticleSystem {\r\n    /**\r\n     * Billboard mode will only apply to Y axis\r\n     */\r\n    public static readonly BILLBOARDMODE_Y = Constants.PARTICLES_BILLBOARDMODE_Y;\r\n    /**\r\n     * Billboard mode will apply to all axes\r\n     */\r\n    public static readonly BILLBOARDMODE_ALL = Constants.PARTICLES_BILLBOARDMODE_ALL;\r\n    /**\r\n     * Special billboard mode where the particle will be biilboard to the camera but rotated to align with direction\r\n     */\r\n    public static readonly BILLBOARDMODE_STRETCHED = Constants.PARTICLES_BILLBOARDMODE_STRETCHED;\r\n    /**\r\n     * Special billboard mode where the particle will be billboard to the camera but only around the axis of the direction of particle emission\r\n     */\r\n    public static readonly BILLBOARDMODE_STRETCHED_LOCAL = Constants.PARTICLES_BILLBOARDMODE_STRETCHED_LOCAL;\r\n\r\n    // Sub-emitters\r\n    private _rootParticleSystem: Nullable<ParticleSystem>;\r\n\r\n    /**\r\n     * The Sub-emitters templates that will be used to generate the sub particle system to be associated with the system, this property is used by the root particle system only.\r\n     * When a particle is spawned, an array will be chosen at random and all the emitters in that array will be attached to the particle.  (Default: [])\r\n     */\r\n    public subEmitters: Array<ParticleSystem | SubEmitter | Array<SubEmitter>>;\r\n    // the subEmitters field above converted to a constant type\r\n    private _subEmitters: Array<Array<SubEmitter>>;\r\n\r\n    /**\r\n     * @internal\r\n     * If the particle systems emitter should be disposed when the particle system is disposed\r\n     */\r\n    public _disposeEmitterOnDispose = false;\r\n    /**\r\n     * The current active Sub-systems, this property is used by the root particle system only.\r\n     */\r\n    public activeSubSystems: Array<ParticleSystem>;\r\n    /**\r\n     * Creates a Point Emitter for the particle system (emits directly from the emitter position)\r\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the box\r\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the box\r\n     * @returns the emitter\r\n     */\r\n    public override createPointEmitter(direction1: Vector3, direction2: Vector3): PointParticleEmitter {\r\n        const particleEmitter = CreatePointEmitter(direction1, direction2);\r\n        this.particleEmitterType = particleEmitter;\r\n        return particleEmitter;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a function indicating if the particle system can start.\r\n     * @returns true if the particle system can start, false otherwise.\r\n     */\r\n    public canStart = () => {\r\n        return true;\r\n    };\r\n\r\n    /** Flow map */\r\n    private _flowMap: Nullable<FlowMap> = null;\r\n    private _flowMapUpdate: Nullable<_IExecutionQueueItem> = null;\r\n\r\n    /** @internal */\r\n    public _source: Nullable<NodeParticleSystemSet> = null;\r\n\r\n    /** @internal */\r\n    public _blockReference: number = 0;\r\n\r\n    /**\r\n     * Gets the NodeParticleSystemSet that this particle system belongs to.\r\n     */\r\n    public get source(): Nullable<NodeParticleSystemSet> {\r\n        return this._source;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the particle system was generated by a node particle system set\r\n     */\r\n    public override get isNodeGenerated(): boolean {\r\n        return this._source !== null;\r\n    }\r\n    /**\r\n     * The strength of the flow map\r\n     */\r\n    public flowMapStrength = 1.0;\r\n\r\n    /** Gets or sets the current flow map */\r\n    public get flowMap(): Nullable<FlowMap> {\r\n        return this._flowMap;\r\n    }\r\n\r\n    public set flowMap(value: Nullable<FlowMap>) {\r\n        if (this._flowMap === value) {\r\n            return;\r\n        }\r\n\r\n        this._flowMap = value;\r\n\r\n        if (this._flowMapUpdate) {\r\n            _RemoveFromQueue(this._flowMapUpdate);\r\n            this._flowMapUpdate = null;\r\n        }\r\n        if (value) {\r\n            this._flowMapUpdate = {\r\n                process: (particle: Particle) => {\r\n                    const matrix = this.getScene()?.getTransformMatrix();\r\n                    this._flowMap!._processParticle(particle, this.flowMapStrength * this._tempScaledUpdateSpeed, matrix);\r\n                },\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n            _ConnectAfter(this._flowMapUpdate, this._directionProcessing!);\r\n        }\r\n    }\r\n\r\n    /** Attractors */\r\n    private _attractors: Attractor[] = [];\r\n    private _attractorUpdate: Nullable<_IExecutionQueueItem> = null;\r\n\r\n    /**\r\n     * The list of attractors used to change the direction of the particles in the system.\r\n     * Please note that this is a copy of the internal array. If you want to modify it, please use the addAttractor and removeAttractor methods.\r\n     */\r\n    public get attractors(): Attractor[] {\r\n        return this._attractors.slice(0);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the particle system\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /**\r\n     * Add an attractor to the particle system. Attractors are used to change the direction of the particles in the system.\r\n     * @param attractor The attractor to add to the particle system\r\n     */\r\n    public addAttractor(attractor: Attractor): void {\r\n        this._attractors.push(attractor);\r\n\r\n        if (this._attractors.length === 1) {\r\n            this._attractorUpdate = {\r\n                process: (particle: Particle) => {\r\n                    for (const attractor of this._attractors) {\r\n                        attractor._processParticle(particle, this);\r\n                    }\r\n                },\r\n                previousItem: null,\r\n                nextItem: null,\r\n            };\r\n            _ConnectAfter(this._attractorUpdate, this._directionProcessing!);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes an attractor from the particle system. Attractors are used to change the direction of the particles in the system.\r\n     * @param attractor The attractor to remove from the particle system\r\n     */\r\n    public removeAttractor(attractor: Attractor): void {\r\n        const index = this._attractors.indexOf(attractor);\r\n        if (index !== -1) {\r\n            this._attractors.splice(index, 1);\r\n        }\r\n\r\n        if (this._attractors.length === 0) {\r\n            _RemoveFromQueue(this._attractorUpdate!);\r\n        }\r\n    }\r\n\r\n    public override start(delay = this.startDelay): void {\r\n        if (!this.canStart()) {\r\n            return;\r\n        }\r\n        super.start(delay);\r\n    }\r\n\r\n    /**\r\n     * Creates a Hemisphere Emitter for the particle system (emits along the hemisphere radius)\r\n     * @param radius The radius of the hemisphere to emit from\r\n     * @param radiusRange The range of the hemisphere to emit from [0-1] 0 Surface Only, 1 Entire Radius\r\n     * @returns the emitter\r\n     */\r\n    public override createHemisphericEmitter(radius = 1, radiusRange = 1): HemisphericParticleEmitter {\r\n        const particleEmitter = CreateHemisphericEmitter(radius, radiusRange);\r\n        this.particleEmitterType = particleEmitter;\r\n        return particleEmitter;\r\n    }\r\n\r\n    /**\r\n     * Creates a Sphere Emitter for the particle system (emits along the sphere radius)\r\n     * @param radius The radius of the sphere to emit from\r\n     * @param radiusRange The range of the sphere to emit from [0-1] 0 Surface Only, 1 Entire Radius\r\n     * @returns the emitter\r\n     */\r\n    public override createSphereEmitter(radius = 1, radiusRange = 1): SphereParticleEmitter {\r\n        const particleEmitter = CreateSphereEmitter(radius, radiusRange);\r\n        this.particleEmitterType = particleEmitter;\r\n        return particleEmitter;\r\n    }\r\n\r\n    /**\r\n     * Creates a Directed Sphere Emitter for the particle system (emits between direction1 and direction2)\r\n     * @param radius The radius of the sphere to emit from\r\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the sphere\r\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the sphere\r\n     * @returns the emitter\r\n     */\r\n    public override createDirectedSphereEmitter(radius = 1, direction1 = new Vector3(0, 1.0, 0), direction2 = new Vector3(0, 1.0, 0)): SphereDirectedParticleEmitter {\r\n        const particleEmitter = CreateDirectedSphereEmitter(radius, direction1, direction2);\r\n        this.particleEmitterType = particleEmitter;\r\n        return particleEmitter;\r\n    }\r\n\r\n    /**\r\n     * Creates a Cylinder Emitter for the particle system (emits from the cylinder to the particle position)\r\n     * @param radius The radius of the emission cylinder\r\n     * @param height The height of the emission cylinder\r\n     * @param radiusRange The range of emission [0-1] 0 Surface only, 1 Entire Radius\r\n     * @param directionRandomizer How much to randomize the particle direction [0-1]\r\n     * @returns the emitter\r\n     */\r\n    public override createCylinderEmitter(radius = 1, height = 1, radiusRange = 1, directionRandomizer = 0): CylinderParticleEmitter {\r\n        const particleEmitter = CreateCylinderEmitter(radius, height, radiusRange, directionRandomizer);\r\n        this.particleEmitterType = particleEmitter;\r\n        return particleEmitter;\r\n    }\r\n\r\n    /**\r\n     * Creates a Directed Cylinder Emitter for the particle system (emits between direction1 and direction2)\r\n     * @param radius The radius of the cylinder to emit from\r\n     * @param height The height of the emission cylinder\r\n     * @param radiusRange the range of the emission cylinder [0-1] 0 Surface only, 1 Entire Radius (1 by default)\r\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the cylinder\r\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the cylinder\r\n     * @returns the emitter\r\n     */\r\n    public override createDirectedCylinderEmitter(\r\n        radius = 1,\r\n        height = 1,\r\n        radiusRange = 1,\r\n        direction1 = new Vector3(0, 1.0, 0),\r\n        direction2 = new Vector3(0, 1.0, 0)\r\n    ): CylinderDirectedParticleEmitter {\r\n        const particleEmitter = CreateDirectedCylinderEmitter(radius, height, radiusRange, direction1, direction2);\r\n        this.particleEmitterType = particleEmitter;\r\n        return particleEmitter;\r\n    }\r\n\r\n    /**\r\n     * Creates a Cone Emitter for the particle system (emits from the cone to the particle position)\r\n     * @param radius The radius of the cone to emit from\r\n     * @param angle The base angle of the cone\r\n     * @returns the emitter\r\n     */\r\n    public override createConeEmitter(radius = 1, angle = Math.PI / 4): ConeParticleEmitter {\r\n        const particleEmitter = CreateConeEmitter(radius, angle);\r\n        this.particleEmitterType = particleEmitter;\r\n        return particleEmitter;\r\n    }\r\n\r\n    public override createDirectedConeEmitter(\r\n        radius = 1,\r\n        angle = Math.PI / 4,\r\n        direction1 = new Vector3(0, 1.0, 0),\r\n        direction2 = new Vector3(0, 1.0, 0)\r\n    ): ConeDirectedParticleEmitter {\r\n        const particleEmitter = CreateDirectedConeEmitter(radius, angle, direction1, direction2);\r\n        this.particleEmitterType = particleEmitter;\r\n        return particleEmitter;\r\n    }\r\n\r\n    /**\r\n     * Creates a Box Emitter for the particle system. (emits between direction1 and direction2 from withing the box defined by minEmitBox and maxEmitBox)\r\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the box\r\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the box\r\n     * @param minEmitBox Particles are emitted from the box between minEmitBox and maxEmitBox\r\n     * @param maxEmitBox  Particles are emitted from the box between minEmitBox and maxEmitBox\r\n     * @returns the emitter\r\n     */\r\n    public override createBoxEmitter(direction1: Vector3, direction2: Vector3, minEmitBox: Vector3, maxEmitBox: Vector3): BoxParticleEmitter {\r\n        const particleEmitter = new BoxParticleEmitter();\r\n        this.particleEmitterType = particleEmitter;\r\n        this.direction1 = direction1;\r\n        this.direction2 = direction2;\r\n        this.minEmitBox = minEmitBox;\r\n        this.maxEmitBox = maxEmitBox;\r\n        return particleEmitter;\r\n    }\r\n\r\n    private _prepareSubEmitterInternalArray() {\r\n        this._subEmitters = new Array<Array<SubEmitter>>();\r\n        if (this.subEmitters) {\r\n            for (const subEmitter of this.subEmitters) {\r\n                if (subEmitter instanceof ParticleSystem) {\r\n                    this._subEmitters.push([new SubEmitter(subEmitter)]);\r\n                } else if (subEmitter instanceof SubEmitter) {\r\n                    this._subEmitters.push([subEmitter]);\r\n                } else if (subEmitter instanceof Array) {\r\n                    this._subEmitters.push(subEmitter);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _stopSubEmitters(): void {\r\n        if (!this.activeSubSystems) {\r\n            return;\r\n        }\r\n        for (const subSystem of this.activeSubSystems) {\r\n            subSystem.stop(true);\r\n        }\r\n        this.activeSubSystems = [] as ParticleSystem[];\r\n    }\r\n\r\n    private _removeFromRoot(): void {\r\n        if (!this._rootParticleSystem) {\r\n            return;\r\n        }\r\n\r\n        const index = this._rootParticleSystem.activeSubSystems.indexOf(this);\r\n        if (index !== -1) {\r\n            this._rootParticleSystem.activeSubSystems.splice(index, 1);\r\n        }\r\n\r\n        this._rootParticleSystem = null;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _emitFromParticle: (particle: Particle) => void = (particle) => {\r\n        if (!this._subEmitters || this._subEmitters.length === 0) {\r\n            return;\r\n        }\r\n        const templateIndex = Math.floor(Math.random() * this._subEmitters.length);\r\n\r\n        for (const subEmitter of this._subEmitters[templateIndex]) {\r\n            if (subEmitter.type === SubEmitterType.END) {\r\n                const subSystem = subEmitter.clone();\r\n                particle._inheritParticleInfoToSubEmitter(subSystem);\r\n                subSystem.particleSystem._rootParticleSystem = this;\r\n                this.activeSubSystems.push(subSystem.particleSystem);\r\n                subSystem.particleSystem.start();\r\n            }\r\n        }\r\n    };\r\n\r\n    /** @internal */\r\n    public override _preStart() {\r\n        // Convert the subEmitters field to the constant type field _subEmitters\r\n        this._prepareSubEmitterInternalArray();\r\n\r\n        if (this._subEmitters && this._subEmitters.length != 0) {\r\n            this.activeSubSystems = [] as ParticleSystem[];\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public override _postStop(stopSubEmitters: boolean) {\r\n        if (stopSubEmitters) {\r\n            this._stopSubEmitters();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public override _prepareParticle(particle: Particle): void {\r\n        // Attach emitters\r\n        if (this._subEmitters && this._subEmitters.length > 0) {\r\n            const subEmitters = this._subEmitters[Math.floor(Math.random() * this._subEmitters.length)];\r\n            particle._attachedSubEmitters = [];\r\n            for (const subEmitter of subEmitters) {\r\n                if (subEmitter.type === SubEmitterType.ATTACHED) {\r\n                    const newEmitter = subEmitter.clone();\r\n                    particle._attachedSubEmitters.push(newEmitter);\r\n                    newEmitter.particleSystem.start();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public override _onDispose(disposeAttachedSubEmitters = false, disposeEndSubEmitters = false) {\r\n        this._removeFromRoot();\r\n\r\n        if (this.subEmitters && !this._subEmitters) {\r\n            this._prepareSubEmitterInternalArray();\r\n        }\r\n\r\n        if (disposeAttachedSubEmitters) {\r\n            if (this.particles) {\r\n                for (const particle of this.particles) {\r\n                    if (particle._attachedSubEmitters) {\r\n                        for (let i = particle._attachedSubEmitters.length - 1; i >= 0; i -= 1) {\r\n                            particle._attachedSubEmitters[i].dispose();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (disposeEndSubEmitters) {\r\n            if (this.activeSubSystems) {\r\n                for (let i = this.activeSubSystems.length - 1; i >= 0; i -= 1) {\r\n                    this.activeSubSystems[i].dispose();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this._subEmitters && this._subEmitters.length) {\r\n            for (let index = 0; index < this._subEmitters.length; index++) {\r\n                for (const subEmitter of this._subEmitters[index]) {\r\n                    subEmitter.dispose();\r\n                }\r\n            }\r\n\r\n            this._subEmitters = [];\r\n            this.subEmitters = [];\r\n        }\r\n\r\n        if (this._disposeEmitterOnDispose && this.emitter && (this.emitter as AbstractMesh).dispose) {\r\n            (<AbstractMesh>this.emitter).dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedParticleSystem: any, particleSystem: IParticleSystem, sceneOrEngine: Scene | AbstractEngine, rootUrl: string) {\r\n        let scene: Nullable<Scene>;\r\n\r\n        if (sceneOrEngine instanceof AbstractEngine) {\r\n            scene = null;\r\n        } else {\r\n            scene = sceneOrEngine;\r\n        }\r\n\r\n        const internalClass = GetClass(\"BABYLON.Texture\");\r\n        if (internalClass && scene) {\r\n            // Texture\r\n            if (parsedParticleSystem.texture) {\r\n                particleSystem.particleTexture = internalClass.Parse(parsedParticleSystem.texture, scene, rootUrl) as BaseTexture;\r\n            } else if (parsedParticleSystem.textureName) {\r\n                particleSystem.particleTexture = new internalClass(\r\n                    rootUrl + parsedParticleSystem.textureName,\r\n                    scene,\r\n                    false,\r\n                    parsedParticleSystem.invertY !== undefined ? parsedParticleSystem.invertY : true\r\n                );\r\n                particleSystem.particleTexture!.name = parsedParticleSystem.textureName;\r\n            }\r\n        }\r\n\r\n        // Emitter\r\n        if (!parsedParticleSystem.emitterId && parsedParticleSystem.emitterId !== 0 && parsedParticleSystem.emitter === undefined) {\r\n            particleSystem.emitter = Vector3.Zero();\r\n        } else if (parsedParticleSystem.emitterId && scene) {\r\n            particleSystem.emitter = scene.getLastMeshById(parsedParticleSystem.emitterId);\r\n        } else {\r\n            particleSystem.emitter = Vector3.FromArray(parsedParticleSystem.emitter);\r\n        }\r\n\r\n        particleSystem.isLocal = !!parsedParticleSystem.isLocal;\r\n\r\n        // Misc.\r\n        if (parsedParticleSystem.renderingGroupId !== undefined) {\r\n            particleSystem.renderingGroupId = parsedParticleSystem.renderingGroupId;\r\n        }\r\n\r\n        if (parsedParticleSystem.isBillboardBased !== undefined) {\r\n            particleSystem.isBillboardBased = parsedParticleSystem.isBillboardBased;\r\n        }\r\n\r\n        if (parsedParticleSystem.billboardMode !== undefined) {\r\n            particleSystem.billboardMode = parsedParticleSystem.billboardMode;\r\n        }\r\n\r\n        if (parsedParticleSystem.useLogarithmicDepth !== undefined) {\r\n            particleSystem.useLogarithmicDepth = parsedParticleSystem.useLogarithmicDepth;\r\n        }\r\n\r\n        // Animations\r\n        if (parsedParticleSystem.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedParticleSystem.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedParticleSystem.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    particleSystem.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n            particleSystem.beginAnimationOnStart = parsedParticleSystem.beginAnimationOnStart;\r\n            particleSystem.beginAnimationFrom = parsedParticleSystem.beginAnimationFrom;\r\n            particleSystem.beginAnimationTo = parsedParticleSystem.beginAnimationTo;\r\n            particleSystem.beginAnimationLoop = parsedParticleSystem.beginAnimationLoop;\r\n        }\r\n\r\n        if (parsedParticleSystem.autoAnimate && scene) {\r\n            scene.beginAnimation(\r\n                particleSystem,\r\n                parsedParticleSystem.autoAnimateFrom,\r\n                parsedParticleSystem.autoAnimateTo,\r\n                parsedParticleSystem.autoAnimateLoop,\r\n                parsedParticleSystem.autoAnimateSpeed || 1.0\r\n            );\r\n        }\r\n\r\n        // Particle system\r\n        particleSystem.startDelay = parsedParticleSystem.startDelay | 0;\r\n        particleSystem.minAngularSpeed = parsedParticleSystem.minAngularSpeed;\r\n        particleSystem.maxAngularSpeed = parsedParticleSystem.maxAngularSpeed;\r\n        particleSystem.minSize = parsedParticleSystem.minSize;\r\n        particleSystem.maxSize = parsedParticleSystem.maxSize;\r\n\r\n        if (parsedParticleSystem.minScaleX) {\r\n            particleSystem.minScaleX = parsedParticleSystem.minScaleX;\r\n            particleSystem.maxScaleX = parsedParticleSystem.maxScaleX;\r\n            particleSystem.minScaleY = parsedParticleSystem.minScaleY;\r\n            particleSystem.maxScaleY = parsedParticleSystem.maxScaleY;\r\n        }\r\n\r\n        if (parsedParticleSystem.preWarmCycles !== undefined) {\r\n            particleSystem.preWarmCycles = parsedParticleSystem.preWarmCycles;\r\n            particleSystem.preWarmStepOffset = parsedParticleSystem.preWarmStepOffset;\r\n        }\r\n\r\n        if (parsedParticleSystem.minInitialRotation !== undefined) {\r\n            particleSystem.minInitialRotation = parsedParticleSystem.minInitialRotation;\r\n            particleSystem.maxInitialRotation = parsedParticleSystem.maxInitialRotation;\r\n        }\r\n\r\n        particleSystem.minLifeTime = parsedParticleSystem.minLifeTime;\r\n        particleSystem.maxLifeTime = parsedParticleSystem.maxLifeTime;\r\n        particleSystem.minEmitPower = parsedParticleSystem.minEmitPower;\r\n        particleSystem.maxEmitPower = parsedParticleSystem.maxEmitPower;\r\n        particleSystem.emitRate = parsedParticleSystem.emitRate;\r\n        particleSystem.gravity = Vector3.FromArray(parsedParticleSystem.gravity);\r\n        if (parsedParticleSystem.noiseStrength) {\r\n            particleSystem.noiseStrength = Vector3.FromArray(parsedParticleSystem.noiseStrength);\r\n        }\r\n        particleSystem.color1 = Color4.FromArray(parsedParticleSystem.color1);\r\n        particleSystem.color2 = Color4.FromArray(parsedParticleSystem.color2);\r\n        particleSystem.colorDead = Color4.FromArray(parsedParticleSystem.colorDead);\r\n        particleSystem.updateSpeed = parsedParticleSystem.updateSpeed;\r\n        particleSystem.targetStopDuration = parsedParticleSystem.targetStopDuration;\r\n        particleSystem.blendMode = parsedParticleSystem.blendMode;\r\n\r\n        if (parsedParticleSystem.colorGradients) {\r\n            for (const colorGradient of parsedParticleSystem.colorGradients) {\r\n                particleSystem.addColorGradient(\r\n                    colorGradient.gradient,\r\n                    Color4.FromArray(colorGradient.color1),\r\n                    colorGradient.color2 ? Color4.FromArray(colorGradient.color2) : undefined\r\n                );\r\n            }\r\n        }\r\n\r\n        if (parsedParticleSystem.rampGradients) {\r\n            for (const rampGradient of parsedParticleSystem.rampGradients) {\r\n                particleSystem.addRampGradient(rampGradient.gradient, Color3.FromArray(rampGradient.color));\r\n            }\r\n            particleSystem.useRampGradients = parsedParticleSystem.useRampGradients;\r\n        }\r\n\r\n        if (parsedParticleSystem.colorRemapGradients) {\r\n            for (const colorRemapGradient of parsedParticleSystem.colorRemapGradients) {\r\n                particleSystem.addColorRemapGradient(\r\n                    colorRemapGradient.gradient,\r\n                    colorRemapGradient.factor1 !== undefined ? colorRemapGradient.factor1 : colorRemapGradient.factor,\r\n                    colorRemapGradient.factor2\r\n                );\r\n            }\r\n        }\r\n\r\n        if (parsedParticleSystem.alphaRemapGradients) {\r\n            for (const alphaRemapGradient of parsedParticleSystem.alphaRemapGradients) {\r\n                particleSystem.addAlphaRemapGradient(\r\n                    alphaRemapGradient.gradient,\r\n                    alphaRemapGradient.factor1 !== undefined ? alphaRemapGradient.factor1 : alphaRemapGradient.factor,\r\n                    alphaRemapGradient.factor2\r\n                );\r\n            }\r\n        }\r\n\r\n        if (parsedParticleSystem.sizeGradients) {\r\n            for (const sizeGradient of parsedParticleSystem.sizeGradients) {\r\n                particleSystem.addSizeGradient(sizeGradient.gradient, sizeGradient.factor1 !== undefined ? sizeGradient.factor1 : sizeGradient.factor, sizeGradient.factor2);\r\n            }\r\n        }\r\n\r\n        if (parsedParticleSystem.angularSpeedGradients) {\r\n            for (const angularSpeedGradient of parsedParticleSystem.angularSpeedGradients) {\r\n                particleSystem.addAngularSpeedGradient(\r\n                    angularSpeedGradient.gradient,\r\n                    angularSpeedGradient.factor1 !== undefined ? angularSpeedGradient.factor1 : angularSpeedGradient.factor,\r\n                    angularSpeedGradient.factor2\r\n                );\r\n            }\r\n        }\r\n\r\n        if (parsedParticleSystem.velocityGradients) {\r\n            for (const velocityGradient of parsedParticleSystem.velocityGradients) {\r\n                particleSystem.addVelocityGradient(\r\n                    velocityGradient.gradient,\r\n                    velocityGradient.factor1 !== undefined ? velocityGradient.factor1 : velocityGradient.factor,\r\n                    velocityGradient.factor2\r\n                );\r\n            }\r\n        }\r\n\r\n        if (parsedParticleSystem.dragGradients) {\r\n            for (const dragGradient of parsedParticleSystem.dragGradients) {\r\n                particleSystem.addDragGradient(dragGradient.gradient, dragGradient.factor1 !== undefined ? dragGradient.factor1 : dragGradient.factor, dragGradient.factor2);\r\n            }\r\n        }\r\n\r\n        if (parsedParticleSystem.emitRateGradients) {\r\n            for (const emitRateGradient of parsedParticleSystem.emitRateGradients) {\r\n                particleSystem.addEmitRateGradient(\r\n                    emitRateGradient.gradient,\r\n                    emitRateGradient.factor1 !== undefined ? emitRateGradient.factor1 : emitRateGradient.factor,\r\n                    emitRateGradient.factor2\r\n                );\r\n            }\r\n        }\r\n\r\n        if (parsedParticleSystem.startSizeGradients) {\r\n            for (const startSizeGradient of parsedParticleSystem.startSizeGradients) {\r\n                particleSystem.addStartSizeGradient(\r\n                    startSizeGradient.gradient,\r\n                    startSizeGradient.factor1 !== undefined ? startSizeGradient.factor1 : startSizeGradient.factor,\r\n                    startSizeGradient.factor2\r\n                );\r\n            }\r\n        }\r\n\r\n        if (parsedParticleSystem.lifeTimeGradients) {\r\n            for (const lifeTimeGradient of parsedParticleSystem.lifeTimeGradients) {\r\n                particleSystem.addLifeTimeGradient(\r\n                    lifeTimeGradient.gradient,\r\n                    lifeTimeGradient.factor1 !== undefined ? lifeTimeGradient.factor1 : lifeTimeGradient.factor,\r\n                    lifeTimeGradient.factor2\r\n                );\r\n            }\r\n        }\r\n\r\n        if (parsedParticleSystem.limitVelocityGradients) {\r\n            for (const limitVelocityGradient of parsedParticleSystem.limitVelocityGradients) {\r\n                particleSystem.addLimitVelocityGradient(\r\n                    limitVelocityGradient.gradient,\r\n                    limitVelocityGradient.factor1 !== undefined ? limitVelocityGradient.factor1 : limitVelocityGradient.factor,\r\n                    limitVelocityGradient.factor2\r\n                );\r\n            }\r\n            particleSystem.limitVelocityDamping = parsedParticleSystem.limitVelocityDamping;\r\n        }\r\n\r\n        if (parsedParticleSystem.noiseTexture && scene) {\r\n            const internalClass = GetClass(\"BABYLON.ProceduralTexture\");\r\n            particleSystem.noiseTexture = internalClass.Parse(parsedParticleSystem.noiseTexture, scene, rootUrl);\r\n        }\r\n\r\n        // Emitter\r\n        let emitterType: IParticleEmitterType;\r\n        if (parsedParticleSystem.particleEmitterType) {\r\n            switch (parsedParticleSystem.particleEmitterType.type) {\r\n                case \"SphereParticleEmitter\":\r\n                    emitterType = new SphereParticleEmitter();\r\n                    break;\r\n                case \"SphereDirectedParticleEmitter\":\r\n                    emitterType = new SphereDirectedParticleEmitter();\r\n                    break;\r\n                case \"ConeEmitter\":\r\n                case \"ConeParticleEmitter\":\r\n                    emitterType = new ConeParticleEmitter();\r\n                    break;\r\n                case \"ConeDirectedParticleEmitter\":\r\n                    emitterType = new ConeDirectedParticleEmitter();\r\n                    break;\r\n                case \"CylinderParticleEmitter\":\r\n                    emitterType = new CylinderParticleEmitter();\r\n                    break;\r\n                case \"CylinderDirectedParticleEmitter\":\r\n                    emitterType = new CylinderDirectedParticleEmitter();\r\n                    break;\r\n                case \"HemisphericParticleEmitter\":\r\n                    emitterType = new HemisphericParticleEmitter();\r\n                    break;\r\n                case \"PointParticleEmitter\":\r\n                    emitterType = new PointParticleEmitter();\r\n                    break;\r\n                case \"MeshParticleEmitter\":\r\n                    emitterType = new MeshParticleEmitter();\r\n                    break;\r\n                case \"CustomParticleEmitter\":\r\n                    emitterType = new CustomParticleEmitter();\r\n                    break;\r\n                case \"BoxEmitter\":\r\n                case \"BoxParticleEmitter\":\r\n                default:\r\n                    emitterType = new BoxParticleEmitter();\r\n                    break;\r\n            }\r\n\r\n            emitterType.parse(parsedParticleSystem.particleEmitterType, scene);\r\n        } else {\r\n            emitterType = new BoxParticleEmitter();\r\n            emitterType.parse(parsedParticleSystem, scene);\r\n        }\r\n        particleSystem.particleEmitterType = emitterType;\r\n\r\n        // Animation sheet\r\n        particleSystem.startSpriteCellID = parsedParticleSystem.startSpriteCellID;\r\n        particleSystem.endSpriteCellID = parsedParticleSystem.endSpriteCellID;\r\n        particleSystem.spriteCellLoop = parsedParticleSystem.spriteCellLoop ?? true;\r\n        particleSystem.spriteCellWidth = parsedParticleSystem.spriteCellWidth;\r\n        particleSystem.spriteCellHeight = parsedParticleSystem.spriteCellHeight;\r\n        particleSystem.spriteCellChangeSpeed = parsedParticleSystem.spriteCellChangeSpeed;\r\n        particleSystem.spriteRandomStartCell = parsedParticleSystem.spriteRandomStartCell;\r\n\r\n        particleSystem.disposeOnStop = parsedParticleSystem.disposeOnStop ?? false;\r\n        particleSystem.manualEmitCount = parsedParticleSystem.manualEmitCount ?? -1;\r\n    }\r\n\r\n    /**\r\n     * Parses a JSON object to create a particle system.\r\n     * @param parsedParticleSystem The JSON object to parse\r\n     * @param sceneOrEngine The scene or the engine to create the particle system in\r\n     * @param rootUrl The root url to use to load external dependencies like texture\r\n     * @param doNotStart Ignore the preventAutoStart attribute and does not start\r\n     * @param capacity defines the system capacity (if null or undefined the sotred capacity will be used)\r\n     * @returns the Parsed particle system\r\n     */\r\n    public static Parse(parsedParticleSystem: any, sceneOrEngine: Scene | AbstractEngine, rootUrl: string, doNotStart = false, capacity?: number): ParticleSystem {\r\n        const name = parsedParticleSystem.name;\r\n        let custom: Nullable<Effect> = null;\r\n        let program: any = null;\r\n        let engine: AbstractEngine;\r\n        let scene: Nullable<Scene>;\r\n\r\n        if (sceneOrEngine instanceof AbstractEngine) {\r\n            engine = sceneOrEngine;\r\n        } else {\r\n            scene = sceneOrEngine;\r\n            engine = scene.getEngine();\r\n        }\r\n\r\n        if (parsedParticleSystem.customShader && (engine as any).createEffectForParticles) {\r\n            program = parsedParticleSystem.customShader;\r\n            const defines: string = program.shaderOptions.defines.length > 0 ? program.shaderOptions.defines.join(\"\\n\") : \"\";\r\n            custom = (engine as any).createEffectForParticles(program.shaderPath.fragmentElement, program.shaderOptions.uniforms, program.shaderOptions.samplers, defines);\r\n        }\r\n        const particleSystem = new ParticleSystem(name, capacity || parsedParticleSystem.capacity, sceneOrEngine, custom, parsedParticleSystem.isAnimationSheetEnabled);\r\n        particleSystem.customShader = program;\r\n        particleSystem._rootUrl = rootUrl;\r\n\r\n        if (parsedParticleSystem.id) {\r\n            particleSystem.id = parsedParticleSystem.id;\r\n        }\r\n\r\n        // SubEmitters\r\n        if (parsedParticleSystem.subEmitters) {\r\n            particleSystem.subEmitters = [];\r\n            for (const cell of parsedParticleSystem.subEmitters) {\r\n                const cellArray = [];\r\n                for (const sub of cell) {\r\n                    cellArray.push(SubEmitter.Parse(sub, sceneOrEngine, rootUrl));\r\n                }\r\n\r\n                particleSystem.subEmitters.push(cellArray);\r\n            }\r\n        }\r\n\r\n        // Attractors\r\n        if (parsedParticleSystem.attractors) {\r\n            for (const attractor of parsedParticleSystem.attractors) {\r\n                const newAttractor = new Attractor();\r\n                newAttractor.position = Vector3.FromArray(attractor.position);\r\n                newAttractor.strength = attractor.strength;\r\n                particleSystem.addAttractor(newAttractor);\r\n            }\r\n        }\r\n\r\n        ParticleSystem._Parse(parsedParticleSystem, particleSystem, sceneOrEngine, rootUrl);\r\n\r\n        if (parsedParticleSystem.textureMask) {\r\n            particleSystem.textureMask = Color4.FromArray(parsedParticleSystem.textureMask);\r\n        }\r\n\r\n        if (parsedParticleSystem.worldOffset) {\r\n            particleSystem.worldOffset = Vector3.FromArray(parsedParticleSystem.worldOffset);\r\n        }\r\n\r\n        // Auto start\r\n        if (parsedParticleSystem.preventAutoStart) {\r\n            particleSystem.preventAutoStart = parsedParticleSystem.preventAutoStart;\r\n        }\r\n\r\n        if (parsedParticleSystem.metadata) {\r\n            particleSystem.metadata = parsedParticleSystem.metadata;\r\n        }\r\n\r\n        if (!doNotStart && !particleSystem.preventAutoStart) {\r\n            particleSystem.start();\r\n        }\r\n\r\n        return particleSystem;\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object\r\n     * @param serializeTexture defines if the texture must be serialized as well\r\n     * @returns the JSON object\r\n     */\r\n    public override serialize(serializeTexture = false): any {\r\n        const serializationObject: any = {};\r\n\r\n        ParticleSystem._Serialize(serializationObject, this, serializeTexture);\r\n\r\n        serializationObject.textureMask = this.textureMask.asArray();\r\n        serializationObject.customShader = this.customShader;\r\n        serializationObject.preventAutoStart = this.preventAutoStart;\r\n        serializationObject.worldOffset = this.worldOffset.asArray();\r\n\r\n        if (this.metadata) {\r\n            serializationObject.metadata = this.metadata;\r\n        }\r\n\r\n        // SubEmitters\r\n        if (this.subEmitters) {\r\n            serializationObject.subEmitters = [];\r\n\r\n            if (!this._subEmitters) {\r\n                this._prepareSubEmitterInternalArray();\r\n            }\r\n\r\n            for (const subs of this._subEmitters) {\r\n                const cell = [];\r\n                for (const sub of subs) {\r\n                    cell.push(sub.serialize(serializeTexture));\r\n                }\r\n\r\n                serializationObject.subEmitters.push(cell);\r\n            }\r\n        }\r\n\r\n        // Attractors\r\n        if (this._attractors && this._attractors.length) {\r\n            serializationObject.attractors = [];\r\n            for (const attractor of this._attractors) {\r\n                serializationObject.attractors.push(attractor.serialize());\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Serialize(serializationObject: any, particleSystem: IParticleSystem, serializeTexture: boolean) {\r\n        serializationObject.name = particleSystem.name;\r\n        serializationObject.id = particleSystem.id;\r\n\r\n        serializationObject.capacity = particleSystem.getCapacity();\r\n\r\n        serializationObject.disposeOnStop = particleSystem.disposeOnStop;\r\n        serializationObject.manualEmitCount = particleSystem.manualEmitCount;\r\n\r\n        // Emitter\r\n        if ((<AbstractMesh>particleSystem.emitter).position) {\r\n            const emitterMesh = <AbstractMesh>particleSystem.emitter;\r\n            serializationObject.emitterId = emitterMesh.id;\r\n        } else {\r\n            const emitterPosition = <Vector3>particleSystem.emitter;\r\n            serializationObject.emitter = emitterPosition.asArray();\r\n        }\r\n\r\n        // Emitter\r\n        if (particleSystem.particleEmitterType) {\r\n            serializationObject.particleEmitterType = particleSystem.particleEmitterType.serialize();\r\n        }\r\n\r\n        if (particleSystem.particleTexture) {\r\n            if (serializeTexture) {\r\n                serializationObject.texture = particleSystem.particleTexture.serialize();\r\n            } else {\r\n                serializationObject.textureName = particleSystem.particleTexture.name;\r\n                serializationObject.invertY = !!(particleSystem.particleTexture as any)._invertY;\r\n            }\r\n        }\r\n\r\n        serializationObject.isLocal = particleSystem.isLocal;\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(particleSystem, serializationObject);\r\n        serializationObject.beginAnimationOnStart = particleSystem.beginAnimationOnStart;\r\n        serializationObject.beginAnimationFrom = particleSystem.beginAnimationFrom;\r\n        serializationObject.beginAnimationTo = particleSystem.beginAnimationTo;\r\n        serializationObject.beginAnimationLoop = particleSystem.beginAnimationLoop;\r\n\r\n        // Particle system\r\n        serializationObject.startDelay = particleSystem.startDelay;\r\n        serializationObject.renderingGroupId = particleSystem.renderingGroupId;\r\n        serializationObject.isBillboardBased = particleSystem.isBillboardBased;\r\n        serializationObject.billboardMode = particleSystem.billboardMode;\r\n        serializationObject.minAngularSpeed = particleSystem.minAngularSpeed;\r\n        serializationObject.maxAngularSpeed = particleSystem.maxAngularSpeed;\r\n        serializationObject.minSize = particleSystem.minSize;\r\n        serializationObject.maxSize = particleSystem.maxSize;\r\n        serializationObject.minScaleX = particleSystem.minScaleX;\r\n        serializationObject.maxScaleX = particleSystem.maxScaleX;\r\n        serializationObject.minScaleY = particleSystem.minScaleY;\r\n        serializationObject.maxScaleY = particleSystem.maxScaleY;\r\n        serializationObject.minEmitPower = particleSystem.minEmitPower;\r\n        serializationObject.maxEmitPower = particleSystem.maxEmitPower;\r\n        serializationObject.minLifeTime = particleSystem.minLifeTime;\r\n        serializationObject.maxLifeTime = particleSystem.maxLifeTime;\r\n        serializationObject.emitRate = particleSystem.emitRate;\r\n        serializationObject.gravity = particleSystem.gravity.asArray();\r\n        serializationObject.noiseStrength = particleSystem.noiseStrength.asArray();\r\n        serializationObject.color1 = particleSystem.color1.asArray();\r\n        serializationObject.color2 = particleSystem.color2.asArray();\r\n        serializationObject.colorDead = particleSystem.colorDead.asArray();\r\n        serializationObject.updateSpeed = particleSystem.updateSpeed;\r\n        serializationObject.targetStopDuration = particleSystem.targetStopDuration;\r\n        serializationObject.blendMode = particleSystem.blendMode;\r\n        serializationObject.preWarmCycles = particleSystem.preWarmCycles;\r\n        serializationObject.preWarmStepOffset = particleSystem.preWarmStepOffset;\r\n        serializationObject.minInitialRotation = particleSystem.minInitialRotation;\r\n        serializationObject.maxInitialRotation = particleSystem.maxInitialRotation;\r\n        serializationObject.startSpriteCellID = particleSystem.startSpriteCellID;\r\n        serializationObject.spriteCellLoop = particleSystem.spriteCellLoop;\r\n        serializationObject.endSpriteCellID = particleSystem.endSpriteCellID;\r\n        serializationObject.spriteCellChangeSpeed = particleSystem.spriteCellChangeSpeed;\r\n        serializationObject.spriteCellWidth = particleSystem.spriteCellWidth;\r\n        serializationObject.spriteCellHeight = particleSystem.spriteCellHeight;\r\n        serializationObject.spriteRandomStartCell = particleSystem.spriteRandomStartCell;\r\n        serializationObject.isAnimationSheetEnabled = particleSystem.isAnimationSheetEnabled;\r\n        serializationObject.useLogarithmicDepth = particleSystem.useLogarithmicDepth;\r\n\r\n        const colorGradients = particleSystem.getColorGradients();\r\n        if (colorGradients) {\r\n            serializationObject.colorGradients = [];\r\n            for (const colorGradient of colorGradients) {\r\n                const serializedGradient: any = {\r\n                    gradient: colorGradient.gradient,\r\n                    color1: colorGradient.color1.asArray(),\r\n                };\r\n\r\n                if (colorGradient.color2) {\r\n                    serializedGradient.color2 = colorGradient.color2.asArray();\r\n                } else {\r\n                    serializedGradient.color2 = colorGradient.color1.asArray();\r\n                }\r\n\r\n                serializationObject.colorGradients.push(serializedGradient);\r\n            }\r\n        }\r\n\r\n        const rampGradients = particleSystem.getRampGradients();\r\n        if (rampGradients) {\r\n            serializationObject.rampGradients = [];\r\n            for (const rampGradient of rampGradients) {\r\n                const serializedGradient: any = {\r\n                    gradient: rampGradient.gradient,\r\n                    color: rampGradient.color.asArray(),\r\n                };\r\n\r\n                serializationObject.rampGradients.push(serializedGradient);\r\n            }\r\n            serializationObject.useRampGradients = particleSystem.useRampGradients;\r\n        }\r\n\r\n        const colorRemapGradients = particleSystem.getColorRemapGradients();\r\n        if (colorRemapGradients) {\r\n            serializationObject.colorRemapGradients = [];\r\n            for (const colorRemapGradient of colorRemapGradients) {\r\n                const serializedGradient: any = {\r\n                    gradient: colorRemapGradient.gradient,\r\n                    factor1: colorRemapGradient.factor1,\r\n                };\r\n\r\n                if (colorRemapGradient.factor2 !== undefined) {\r\n                    serializedGradient.factor2 = colorRemapGradient.factor2;\r\n                } else {\r\n                    serializedGradient.factor2 = colorRemapGradient.factor1;\r\n                }\r\n\r\n                serializationObject.colorRemapGradients.push(serializedGradient);\r\n            }\r\n        }\r\n\r\n        const alphaRemapGradients = particleSystem.getAlphaRemapGradients();\r\n        if (alphaRemapGradients) {\r\n            serializationObject.alphaRemapGradients = [];\r\n            for (const alphaRemapGradient of alphaRemapGradients) {\r\n                const serializedGradient: any = {\r\n                    gradient: alphaRemapGradient.gradient,\r\n                    factor1: alphaRemapGradient.factor1,\r\n                };\r\n\r\n                if (alphaRemapGradient.factor2 !== undefined) {\r\n                    serializedGradient.factor2 = alphaRemapGradient.factor2;\r\n                } else {\r\n                    serializedGradient.factor2 = alphaRemapGradient.factor1;\r\n                }\r\n\r\n                serializationObject.alphaRemapGradients.push(serializedGradient);\r\n            }\r\n        }\r\n\r\n        const sizeGradients = particleSystem.getSizeGradients();\r\n        if (sizeGradients) {\r\n            serializationObject.sizeGradients = [];\r\n            for (const sizeGradient of sizeGradients) {\r\n                const serializedGradient: any = {\r\n                    gradient: sizeGradient.gradient,\r\n                    factor1: sizeGradient.factor1,\r\n                };\r\n\r\n                if (sizeGradient.factor2 !== undefined) {\r\n                    serializedGradient.factor2 = sizeGradient.factor2;\r\n                } else {\r\n                    serializedGradient.factor2 = sizeGradient.factor1;\r\n                }\r\n\r\n                serializationObject.sizeGradients.push(serializedGradient);\r\n            }\r\n        }\r\n\r\n        const angularSpeedGradients = particleSystem.getAngularSpeedGradients();\r\n        if (angularSpeedGradients) {\r\n            serializationObject.angularSpeedGradients = [];\r\n            for (const angularSpeedGradient of angularSpeedGradients) {\r\n                const serializedGradient: any = {\r\n                    gradient: angularSpeedGradient.gradient,\r\n                    factor1: angularSpeedGradient.factor1,\r\n                };\r\n\r\n                if (angularSpeedGradient.factor2 !== undefined) {\r\n                    serializedGradient.factor2 = angularSpeedGradient.factor2;\r\n                } else {\r\n                    serializedGradient.factor2 = angularSpeedGradient.factor1;\r\n                }\r\n\r\n                serializationObject.angularSpeedGradients.push(serializedGradient);\r\n            }\r\n        }\r\n\r\n        const velocityGradients = particleSystem.getVelocityGradients();\r\n        if (velocityGradients) {\r\n            serializationObject.velocityGradients = [];\r\n            for (const velocityGradient of velocityGradients) {\r\n                const serializedGradient: any = {\r\n                    gradient: velocityGradient.gradient,\r\n                    factor1: velocityGradient.factor1,\r\n                };\r\n\r\n                if (velocityGradient.factor2 !== undefined) {\r\n                    serializedGradient.factor2 = velocityGradient.factor2;\r\n                } else {\r\n                    serializedGradient.factor2 = velocityGradient.factor1;\r\n                }\r\n\r\n                serializationObject.velocityGradients.push(serializedGradient);\r\n            }\r\n        }\r\n\r\n        const dragGradients = particleSystem.getDragGradients();\r\n        if (dragGradients) {\r\n            serializationObject.dragGradients = [];\r\n            for (const dragGradient of dragGradients) {\r\n                const serializedGradient: any = {\r\n                    gradient: dragGradient.gradient,\r\n                    factor1: dragGradient.factor1,\r\n                };\r\n\r\n                if (dragGradient.factor2 !== undefined) {\r\n                    serializedGradient.factor2 = dragGradient.factor2;\r\n                } else {\r\n                    serializedGradient.factor2 = dragGradient.factor1;\r\n                }\r\n\r\n                serializationObject.dragGradients.push(serializedGradient);\r\n            }\r\n        }\r\n\r\n        const emitRateGradients = particleSystem.getEmitRateGradients();\r\n        if (emitRateGradients) {\r\n            serializationObject.emitRateGradients = [];\r\n            for (const emitRateGradient of emitRateGradients) {\r\n                const serializedGradient: any = {\r\n                    gradient: emitRateGradient.gradient,\r\n                    factor1: emitRateGradient.factor1,\r\n                };\r\n\r\n                if (emitRateGradient.factor2 !== undefined) {\r\n                    serializedGradient.factor2 = emitRateGradient.factor2;\r\n                } else {\r\n                    serializedGradient.factor2 = emitRateGradient.factor1;\r\n                }\r\n\r\n                serializationObject.emitRateGradients.push(serializedGradient);\r\n            }\r\n        }\r\n\r\n        const startSizeGradients = particleSystem.getStartSizeGradients();\r\n        if (startSizeGradients) {\r\n            serializationObject.startSizeGradients = [];\r\n            for (const startSizeGradient of startSizeGradients) {\r\n                const serializedGradient: any = {\r\n                    gradient: startSizeGradient.gradient,\r\n                    factor1: startSizeGradient.factor1,\r\n                };\r\n\r\n                if (startSizeGradient.factor2 !== undefined) {\r\n                    serializedGradient.factor2 = startSizeGradient.factor2;\r\n                } else {\r\n                    serializedGradient.factor2 = startSizeGradient.factor1;\r\n                }\r\n\r\n                serializationObject.startSizeGradients.push(serializedGradient);\r\n            }\r\n        }\r\n\r\n        const lifeTimeGradients = particleSystem.getLifeTimeGradients();\r\n        if (lifeTimeGradients) {\r\n            serializationObject.lifeTimeGradients = [];\r\n            for (const lifeTimeGradient of lifeTimeGradients) {\r\n                const serializedGradient: any = {\r\n                    gradient: lifeTimeGradient.gradient,\r\n                    factor1: lifeTimeGradient.factor1,\r\n                };\r\n\r\n                if (lifeTimeGradient.factor2 !== undefined) {\r\n                    serializedGradient.factor2 = lifeTimeGradient.factor2;\r\n                } else {\r\n                    serializedGradient.factor2 = lifeTimeGradient.factor1;\r\n                }\r\n\r\n                serializationObject.lifeTimeGradients.push(serializedGradient);\r\n            }\r\n        }\r\n\r\n        const limitVelocityGradients = particleSystem.getLimitVelocityGradients();\r\n        if (limitVelocityGradients) {\r\n            serializationObject.limitVelocityGradients = [];\r\n            for (const limitVelocityGradient of limitVelocityGradients) {\r\n                const serializedGradient: any = {\r\n                    gradient: limitVelocityGradient.gradient,\r\n                    factor1: limitVelocityGradient.factor1,\r\n                };\r\n\r\n                if (limitVelocityGradient.factor2 !== undefined) {\r\n                    serializedGradient.factor2 = limitVelocityGradient.factor2;\r\n                } else {\r\n                    serializedGradient.factor2 = limitVelocityGradient.factor1;\r\n                }\r\n\r\n                serializationObject.limitVelocityGradients.push(serializedGradient);\r\n            }\r\n\r\n            serializationObject.limitVelocityDamping = particleSystem.limitVelocityDamping;\r\n        }\r\n\r\n        if (particleSystem.noiseTexture) {\r\n            serializationObject.noiseTexture = particleSystem.noiseTexture.serialize();\r\n        }\r\n    }\r\n\r\n    // Clone\r\n    /**\r\n     * Clones the particle system.\r\n     * @param name The name of the cloned object\r\n     * @param newEmitter The new emitter to use\r\n     * @param cloneTexture Also clone the textures if true\r\n     * @returns the cloned particle system\r\n     */\r\n    public override clone(name: string, newEmitter: any, cloneTexture = false): ParticleSystem {\r\n        const custom = { ...this._customWrappers };\r\n        let program: any = null;\r\n        const engine = this._engine;\r\n        if (engine.createEffectForParticles) {\r\n            if (this.customShader != null) {\r\n                program = this.customShader;\r\n                const defines: string = program.shaderOptions.defines.length > 0 ? program.shaderOptions.defines.join(\"\\n\") : \"\";\r\n                const effect = engine.createEffectForParticles(program.shaderPath.fragmentElement, program.shaderOptions.uniforms, program.shaderOptions.samplers, defines);\r\n                if (!custom[0]) {\r\n                    this.setCustomEffect(effect, 0);\r\n                } else {\r\n                    custom[0].effect = effect;\r\n                }\r\n            }\r\n        }\r\n\r\n        const serialization = this.serialize(cloneTexture);\r\n        const result = ParticleSystem.Parse(serialization, this._scene || this._engine, this._rootUrl);\r\n        result.name = name;\r\n        result.customShader = program;\r\n        result._customWrappers = custom;\r\n\r\n        if (newEmitter === undefined) {\r\n            newEmitter = this.emitter;\r\n        }\r\n\r\n        if (this.noiseTexture) {\r\n            result.noiseTexture = this.noiseTexture.clone();\r\n        }\r\n\r\n        result.emitter = newEmitter;\r\n        if (!this.preventAutoStart) {\r\n            result.start();\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nSubEmitter._ParseParticleSystem = ParticleSystem.Parse;\r\n"],
  "mappings": "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",
  "names": ["SubEmitterType", "attractor", "internalClass"]
}
